
SignLanguageToText.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00003e78  00003f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  0080014a  0080014a  00003ff6  2**0
                  ALLOC
  3 .stab         00003c0c  00000000  00000000  00003ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001fe3  00000000  00000000  00007c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00009ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000bf1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000dfa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ec70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <main>
      8a:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 1e 	jmp	0x3df8	; 0x3df8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e0       	ldi	r26, 0x01	; 1
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 1e 	jmp	0x3df8	; 0x3df8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0c 1f 	jmp	0x3e18	; 0x3e18 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_16>:
volatile u8 little;



ISR(ADC_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CHNL0_Flag == TRUE)
     cba:	80 91 4f 01 	lds	r24, 0x014F
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	a1 f4       	brne	.+40     	; 0xcea <__vector_16+0x4c>
	{
		thumb=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
     cc2:	e4 e2       	ldi	r30, 0x24	; 36
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	28 2f       	mov	r18, r24
     cca:	e5 e2       	ldi	r30, 0x25	; 37
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	98 2f       	mov	r25, r24
     cd6:	88 27       	eor	r24, r24
     cd8:	82 2b       	or	r24, r18
     cda:	80 93 73 01 	sts	0x0173, r24
		ResultADCReadyFlag0 = TRUE;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 67 01 	sts	0x0167, r24
		ADC_CHNL0_Flag = FALSE;
     ce4:	10 92 4f 01 	sts	0x014F, r1
     ce8:	5f c0       	rjmp	.+190    	; 0xda8 <__vector_16+0x10a>
	}

	else if(ADC_CHNL4_Flag == TRUE)
     cea:	80 91 53 01 	lds	r24, 0x0153
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	a1 f4       	brne	.+40     	; 0xd1a <__vector_16+0x7c>
	{
		index_F=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
     cf2:	e4 e2       	ldi	r30, 0x24	; 36
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	28 2f       	mov	r18, r24
     cfa:	e5 e2       	ldi	r30, 0x25	; 37
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	98 2f       	mov	r25, r24
     d06:	88 27       	eor	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	80 93 71 01 	sts	0x0171, r24
		ResultADCReadyFlag4 = TRUE;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 6b 01 	sts	0x016B, r24
		ADC_CHNL4_Flag = FALSE;
     d14:	10 92 53 01 	sts	0x0153, r1
     d18:	47 c0       	rjmp	.+142    	; 0xda8 <__vector_16+0x10a>
	}

	else if(ADC_CHNL5_Flag == TRUE)
     d1a:	80 91 54 01 	lds	r24, 0x0154
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	a1 f4       	brne	.+40     	; 0xd4a <__vector_16+0xac>
	{
		middle=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
     d22:	e4 e2       	ldi	r30, 0x24	; 36
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	28 2f       	mov	r18, r24
     d2a:	e5 e2       	ldi	r30, 0x25	; 37
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	98 2f       	mov	r25, r24
     d36:	88 27       	eor	r24, r24
     d38:	82 2b       	or	r24, r18
     d3a:	80 93 6f 01 	sts	0x016F, r24
		ResultADCReadyFlag5 = TRUE;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	80 93 6c 01 	sts	0x016C, r24
		ADC_CHNL5_Flag = FALSE;
     d44:	10 92 54 01 	sts	0x0154, r1
     d48:	2f c0       	rjmp	.+94     	; 0xda8 <__vector_16+0x10a>
	}

	else if(ADC_CHNL6_Flag == TRUE)
     d4a:	80 91 55 01 	lds	r24, 0x0155
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	a1 f4       	brne	.+40     	; 0xd7a <__vector_16+0xdc>
	{
		ring=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
     d52:	e4 e2       	ldi	r30, 0x24	; 36
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	28 2f       	mov	r18, r24
     d5a:	e5 e2       	ldi	r30, 0x25	; 37
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	98 2f       	mov	r25, r24
     d66:	88 27       	eor	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	80 93 72 01 	sts	0x0172, r24
		ResultADCReadyFlag6 = TRUE;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 6d 01 	sts	0x016D, r24
		ADC_CHNL6_Flag = FALSE;
     d74:	10 92 55 01 	sts	0x0155, r1
     d78:	17 c0       	rjmp	.+46     	; 0xda8 <__vector_16+0x10a>
	}

	else if(ADC_CHNL7_Flag == TRUE)
     d7a:	80 91 56 01 	lds	r24, 0x0156
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	99 f4       	brne	.+38     	; 0xda8 <__vector_16+0x10a>
	{
		little=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
     d82:	e4 e2       	ldi	r30, 0x24	; 36
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	28 2f       	mov	r18, r24
     d8a:	e5 e2       	ldi	r30, 0x25	; 37
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	98 2f       	mov	r25, r24
     d96:	88 27       	eor	r24, r24
     d98:	82 2b       	or	r24, r18
     d9a:	80 93 70 01 	sts	0x0170, r24
		ResultADCReadyFlag7 = TRUE;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 6e 01 	sts	0x016E, r24
		ADC_CHNL7_Flag = FALSE;
     da4:	10 92 56 01 	sts	0x0156, r1
	}

}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	2f 91       	pop	r18
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <main>:

int main ()
{
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	cd 5e       	subi	r28, 0xED	; 237
     dce:	d0 40       	sbci	r29, 0x00	; 0
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
	volatile u8 arr1[16]="STOP ";
     dda:	ce 01       	movw	r24, r28
     ddc:	02 96       	adiw	r24, 0x02	; 2
     dde:	ce 54       	subi	r28, 0x4E	; 78
     de0:	df 4f       	sbci	r29, 0xFF	; 255
     de2:	99 83       	std	Y+1, r25	; 0x01
     de4:	88 83       	st	Y, r24
     de6:	c2 5b       	subi	r28, 0xB2	; 178
     de8:	d0 40       	sbci	r29, 0x00	; 0
     dea:	e0 e6       	ldi	r30, 0x60	; 96
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	cc 54       	subi	r28, 0x4C	; 76
     df0:	df 4f       	sbci	r29, 0xFF	; 255
     df2:	f9 83       	std	Y+1, r31	; 0x01
     df4:	e8 83       	st	Y, r30
     df6:	c4 5b       	subi	r28, 0xB4	; 180
     df8:	d0 40       	sbci	r29, 0x00	; 0
     dfa:	f6 e0       	ldi	r31, 0x06	; 6
     dfc:	ca 54       	subi	r28, 0x4A	; 74
     dfe:	df 4f       	sbci	r29, 0xFF	; 255
     e00:	f8 83       	st	Y, r31
     e02:	c6 5b       	subi	r28, 0xB6	; 182
     e04:	d0 40       	sbci	r29, 0x00	; 0
     e06:	cc 54       	subi	r28, 0x4C	; 76
     e08:	df 4f       	sbci	r29, 0xFF	; 255
     e0a:	e8 81       	ld	r30, Y
     e0c:	f9 81       	ldd	r31, Y+1	; 0x01
     e0e:	c4 5b       	subi	r28, 0xB4	; 180
     e10:	d0 40       	sbci	r29, 0x00	; 0
     e12:	00 80       	ld	r0, Z
     e14:	cc 54       	subi	r28, 0x4C	; 76
     e16:	df 4f       	sbci	r29, 0xFF	; 255
     e18:	88 81       	ld	r24, Y
     e1a:	99 81       	ldd	r25, Y+1	; 0x01
     e1c:	c4 5b       	subi	r28, 0xB4	; 180
     e1e:	d0 40       	sbci	r29, 0x00	; 0
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	cc 54       	subi	r28, 0x4C	; 76
     e24:	df 4f       	sbci	r29, 0xFF	; 255
     e26:	99 83       	std	Y+1, r25	; 0x01
     e28:	88 83       	st	Y, r24
     e2a:	c4 5b       	subi	r28, 0xB4	; 180
     e2c:	d0 40       	sbci	r29, 0x00	; 0
     e2e:	ce 54       	subi	r28, 0x4E	; 78
     e30:	df 4f       	sbci	r29, 0xFF	; 255
     e32:	e8 81       	ld	r30, Y
     e34:	f9 81       	ldd	r31, Y+1	; 0x01
     e36:	c2 5b       	subi	r28, 0xB2	; 178
     e38:	d0 40       	sbci	r29, 0x00	; 0
     e3a:	00 82       	st	Z, r0
     e3c:	ce 54       	subi	r28, 0x4E	; 78
     e3e:	df 4f       	sbci	r29, 0xFF	; 255
     e40:	88 81       	ld	r24, Y
     e42:	99 81       	ldd	r25, Y+1	; 0x01
     e44:	c2 5b       	subi	r28, 0xB2	; 178
     e46:	d0 40       	sbci	r29, 0x00	; 0
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	ce 54       	subi	r28, 0x4E	; 78
     e4c:	df 4f       	sbci	r29, 0xFF	; 255
     e4e:	99 83       	std	Y+1, r25	; 0x01
     e50:	88 83       	st	Y, r24
     e52:	c2 5b       	subi	r28, 0xB2	; 178
     e54:	d0 40       	sbci	r29, 0x00	; 0
     e56:	ca 54       	subi	r28, 0x4A	; 74
     e58:	df 4f       	sbci	r29, 0xFF	; 255
     e5a:	98 81       	ld	r25, Y
     e5c:	c6 5b       	subi	r28, 0xB6	; 182
     e5e:	d0 40       	sbci	r29, 0x00	; 0
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	ca 54       	subi	r28, 0x4A	; 74
     e64:	df 4f       	sbci	r29, 0xFF	; 255
     e66:	98 83       	st	Y, r25
     e68:	c6 5b       	subi	r28, 0xB6	; 182
     e6a:	d0 40       	sbci	r29, 0x00	; 0
     e6c:	ca 54       	subi	r28, 0x4A	; 74
     e6e:	df 4f       	sbci	r29, 0xFF	; 255
     e70:	e8 81       	ld	r30, Y
     e72:	c6 5b       	subi	r28, 0xB6	; 182
     e74:	d0 40       	sbci	r29, 0x00	; 0
     e76:	ee 23       	and	r30, r30
     e78:	31 f6       	brne	.-116    	; 0xe06 <main+0x46>
     e7a:	ce 01       	movw	r24, r28
     e7c:	08 96       	adiw	r24, 0x08	; 8
     e7e:	2a e0       	ldi	r18, 0x0A	; 10
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	a9 01       	movw	r20, r18
     e88:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <memset>
	volatile u8 arr2[16]="PERFECTOO ";
     e8c:	ce 01       	movw	r24, r28
     e8e:	42 96       	adiw	r24, 0x12	; 18
     e90:	c9 54       	subi	r28, 0x49	; 73
     e92:	df 4f       	sbci	r29, 0xFF	; 255
     e94:	99 83       	std	Y+1, r25	; 0x01
     e96:	88 83       	st	Y, r24
     e98:	c7 5b       	subi	r28, 0xB7	; 183
     e9a:	d0 40       	sbci	r29, 0x00	; 0
     e9c:	e0 e7       	ldi	r30, 0x70	; 112
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	c7 54       	subi	r28, 0x47	; 71
     ea2:	df 4f       	sbci	r29, 0xFF	; 255
     ea4:	f9 83       	std	Y+1, r31	; 0x01
     ea6:	e8 83       	st	Y, r30
     ea8:	c9 5b       	subi	r28, 0xB9	; 185
     eaa:	d0 40       	sbci	r29, 0x00	; 0
     eac:	fb e0       	ldi	r31, 0x0B	; 11
     eae:	c5 54       	subi	r28, 0x45	; 69
     eb0:	df 4f       	sbci	r29, 0xFF	; 255
     eb2:	f8 83       	st	Y, r31
     eb4:	cb 5b       	subi	r28, 0xBB	; 187
     eb6:	d0 40       	sbci	r29, 0x00	; 0
     eb8:	c7 54       	subi	r28, 0x47	; 71
     eba:	df 4f       	sbci	r29, 0xFF	; 255
     ebc:	e8 81       	ld	r30, Y
     ebe:	f9 81       	ldd	r31, Y+1	; 0x01
     ec0:	c9 5b       	subi	r28, 0xB9	; 185
     ec2:	d0 40       	sbci	r29, 0x00	; 0
     ec4:	00 80       	ld	r0, Z
     ec6:	c7 54       	subi	r28, 0x47	; 71
     ec8:	df 4f       	sbci	r29, 0xFF	; 255
     eca:	88 81       	ld	r24, Y
     ecc:	99 81       	ldd	r25, Y+1	; 0x01
     ece:	c9 5b       	subi	r28, 0xB9	; 185
     ed0:	d0 40       	sbci	r29, 0x00	; 0
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	c7 54       	subi	r28, 0x47	; 71
     ed6:	df 4f       	sbci	r29, 0xFF	; 255
     ed8:	99 83       	std	Y+1, r25	; 0x01
     eda:	88 83       	st	Y, r24
     edc:	c9 5b       	subi	r28, 0xB9	; 185
     ede:	d0 40       	sbci	r29, 0x00	; 0
     ee0:	c9 54       	subi	r28, 0x49	; 73
     ee2:	df 4f       	sbci	r29, 0xFF	; 255
     ee4:	e8 81       	ld	r30, Y
     ee6:	f9 81       	ldd	r31, Y+1	; 0x01
     ee8:	c7 5b       	subi	r28, 0xB7	; 183
     eea:	d0 40       	sbci	r29, 0x00	; 0
     eec:	00 82       	st	Z, r0
     eee:	c9 54       	subi	r28, 0x49	; 73
     ef0:	df 4f       	sbci	r29, 0xFF	; 255
     ef2:	88 81       	ld	r24, Y
     ef4:	99 81       	ldd	r25, Y+1	; 0x01
     ef6:	c7 5b       	subi	r28, 0xB7	; 183
     ef8:	d0 40       	sbci	r29, 0x00	; 0
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	c9 54       	subi	r28, 0x49	; 73
     efe:	df 4f       	sbci	r29, 0xFF	; 255
     f00:	99 83       	std	Y+1, r25	; 0x01
     f02:	88 83       	st	Y, r24
     f04:	c7 5b       	subi	r28, 0xB7	; 183
     f06:	d0 40       	sbci	r29, 0x00	; 0
     f08:	c5 54       	subi	r28, 0x45	; 69
     f0a:	df 4f       	sbci	r29, 0xFF	; 255
     f0c:	98 81       	ld	r25, Y
     f0e:	cb 5b       	subi	r28, 0xBB	; 187
     f10:	d0 40       	sbci	r29, 0x00	; 0
     f12:	91 50       	subi	r25, 0x01	; 1
     f14:	c5 54       	subi	r28, 0x45	; 69
     f16:	df 4f       	sbci	r29, 0xFF	; 255
     f18:	98 83       	st	Y, r25
     f1a:	cb 5b       	subi	r28, 0xBB	; 187
     f1c:	d0 40       	sbci	r29, 0x00	; 0
     f1e:	c5 54       	subi	r28, 0x45	; 69
     f20:	df 4f       	sbci	r29, 0xFF	; 255
     f22:	e8 81       	ld	r30, Y
     f24:	cb 5b       	subi	r28, 0xBB	; 187
     f26:	d0 40       	sbci	r29, 0x00	; 0
     f28:	ee 23       	and	r30, r30
     f2a:	31 f6       	brne	.-116    	; 0xeb8 <main+0xf8>
     f2c:	ce 01       	movw	r24, r28
     f2e:	4d 96       	adiw	r24, 0x1d	; 29
     f30:	25 e0       	ldi	r18, 0x05	; 5
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	a9 01       	movw	r20, r18
     f3a:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <memset>
	volatile u8 arr3[16]="IT HURTS ";
     f3e:	ce 01       	movw	r24, r28
     f40:	82 96       	adiw	r24, 0x22	; 34
     f42:	c4 54       	subi	r28, 0x44	; 68
     f44:	df 4f       	sbci	r29, 0xFF	; 255
     f46:	99 83       	std	Y+1, r25	; 0x01
     f48:	88 83       	st	Y, r24
     f4a:	cc 5b       	subi	r28, 0xBC	; 188
     f4c:	d0 40       	sbci	r29, 0x00	; 0
     f4e:	e0 e8       	ldi	r30, 0x80	; 128
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	c2 54       	subi	r28, 0x42	; 66
     f54:	df 4f       	sbci	r29, 0xFF	; 255
     f56:	f9 83       	std	Y+1, r31	; 0x01
     f58:	e8 83       	st	Y, r30
     f5a:	ce 5b       	subi	r28, 0xBE	; 190
     f5c:	d0 40       	sbci	r29, 0x00	; 0
     f5e:	fa e0       	ldi	r31, 0x0A	; 10
     f60:	c0 54       	subi	r28, 0x40	; 64
     f62:	df 4f       	sbci	r29, 0xFF	; 255
     f64:	f8 83       	st	Y, r31
     f66:	c0 5c       	subi	r28, 0xC0	; 192
     f68:	d0 40       	sbci	r29, 0x00	; 0
     f6a:	c2 54       	subi	r28, 0x42	; 66
     f6c:	df 4f       	sbci	r29, 0xFF	; 255
     f6e:	e8 81       	ld	r30, Y
     f70:	f9 81       	ldd	r31, Y+1	; 0x01
     f72:	ce 5b       	subi	r28, 0xBE	; 190
     f74:	d0 40       	sbci	r29, 0x00	; 0
     f76:	00 80       	ld	r0, Z
     f78:	c2 54       	subi	r28, 0x42	; 66
     f7a:	df 4f       	sbci	r29, 0xFF	; 255
     f7c:	88 81       	ld	r24, Y
     f7e:	99 81       	ldd	r25, Y+1	; 0x01
     f80:	ce 5b       	subi	r28, 0xBE	; 190
     f82:	d0 40       	sbci	r29, 0x00	; 0
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	c2 54       	subi	r28, 0x42	; 66
     f88:	df 4f       	sbci	r29, 0xFF	; 255
     f8a:	99 83       	std	Y+1, r25	; 0x01
     f8c:	88 83       	st	Y, r24
     f8e:	ce 5b       	subi	r28, 0xBE	; 190
     f90:	d0 40       	sbci	r29, 0x00	; 0
     f92:	c4 54       	subi	r28, 0x44	; 68
     f94:	df 4f       	sbci	r29, 0xFF	; 255
     f96:	e8 81       	ld	r30, Y
     f98:	f9 81       	ldd	r31, Y+1	; 0x01
     f9a:	cc 5b       	subi	r28, 0xBC	; 188
     f9c:	d0 40       	sbci	r29, 0x00	; 0
     f9e:	00 82       	st	Z, r0
     fa0:	c4 54       	subi	r28, 0x44	; 68
     fa2:	df 4f       	sbci	r29, 0xFF	; 255
     fa4:	88 81       	ld	r24, Y
     fa6:	99 81       	ldd	r25, Y+1	; 0x01
     fa8:	cc 5b       	subi	r28, 0xBC	; 188
     faa:	d0 40       	sbci	r29, 0x00	; 0
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	c4 54       	subi	r28, 0x44	; 68
     fb0:	df 4f       	sbci	r29, 0xFF	; 255
     fb2:	99 83       	std	Y+1, r25	; 0x01
     fb4:	88 83       	st	Y, r24
     fb6:	cc 5b       	subi	r28, 0xBC	; 188
     fb8:	d0 40       	sbci	r29, 0x00	; 0
     fba:	c0 54       	subi	r28, 0x40	; 64
     fbc:	df 4f       	sbci	r29, 0xFF	; 255
     fbe:	98 81       	ld	r25, Y
     fc0:	c0 5c       	subi	r28, 0xC0	; 192
     fc2:	d0 40       	sbci	r29, 0x00	; 0
     fc4:	91 50       	subi	r25, 0x01	; 1
     fc6:	c0 54       	subi	r28, 0x40	; 64
     fc8:	df 4f       	sbci	r29, 0xFF	; 255
     fca:	98 83       	st	Y, r25
     fcc:	c0 5c       	subi	r28, 0xC0	; 192
     fce:	d0 40       	sbci	r29, 0x00	; 0
     fd0:	c0 54       	subi	r28, 0x40	; 64
     fd2:	df 4f       	sbci	r29, 0xFF	; 255
     fd4:	e8 81       	ld	r30, Y
     fd6:	c0 5c       	subi	r28, 0xC0	; 192
     fd8:	d0 40       	sbci	r29, 0x00	; 0
     fda:	ee 23       	and	r30, r30
     fdc:	31 f6       	brne	.-116    	; 0xf6a <main+0x1aa>
     fde:	ce 01       	movw	r24, r28
     fe0:	8c 96       	adiw	r24, 0x2c	; 44
     fe2:	26 e0       	ldi	r18, 0x06	; 6
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	a9 01       	movw	r20, r18
     fec:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <memset>
	volatile u8 arr4[16]="I HATE YOU ";
     ff0:	ce 01       	movw	r24, r28
     ff2:	c2 96       	adiw	r24, 0x32	; 50
     ff4:	cf 53       	subi	r28, 0x3F	; 63
     ff6:	df 4f       	sbci	r29, 0xFF	; 255
     ff8:	99 83       	std	Y+1, r25	; 0x01
     ffa:	88 83       	st	Y, r24
     ffc:	c1 5c       	subi	r28, 0xC1	; 193
     ffe:	d0 40       	sbci	r29, 0x00	; 0
    1000:	e0 e9       	ldi	r30, 0x90	; 144
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	cd 53       	subi	r28, 0x3D	; 61
    1006:	df 4f       	sbci	r29, 0xFF	; 255
    1008:	f9 83       	std	Y+1, r31	; 0x01
    100a:	e8 83       	st	Y, r30
    100c:	c3 5c       	subi	r28, 0xC3	; 195
    100e:	d0 40       	sbci	r29, 0x00	; 0
    1010:	fc e0       	ldi	r31, 0x0C	; 12
    1012:	cb 53       	subi	r28, 0x3B	; 59
    1014:	df 4f       	sbci	r29, 0xFF	; 255
    1016:	f8 83       	st	Y, r31
    1018:	c5 5c       	subi	r28, 0xC5	; 197
    101a:	d0 40       	sbci	r29, 0x00	; 0
    101c:	cd 53       	subi	r28, 0x3D	; 61
    101e:	df 4f       	sbci	r29, 0xFF	; 255
    1020:	e8 81       	ld	r30, Y
    1022:	f9 81       	ldd	r31, Y+1	; 0x01
    1024:	c3 5c       	subi	r28, 0xC3	; 195
    1026:	d0 40       	sbci	r29, 0x00	; 0
    1028:	00 80       	ld	r0, Z
    102a:	cd 53       	subi	r28, 0x3D	; 61
    102c:	df 4f       	sbci	r29, 0xFF	; 255
    102e:	88 81       	ld	r24, Y
    1030:	99 81       	ldd	r25, Y+1	; 0x01
    1032:	c3 5c       	subi	r28, 0xC3	; 195
    1034:	d0 40       	sbci	r29, 0x00	; 0
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	cd 53       	subi	r28, 0x3D	; 61
    103a:	df 4f       	sbci	r29, 0xFF	; 255
    103c:	99 83       	std	Y+1, r25	; 0x01
    103e:	88 83       	st	Y, r24
    1040:	c3 5c       	subi	r28, 0xC3	; 195
    1042:	d0 40       	sbci	r29, 0x00	; 0
    1044:	cf 53       	subi	r28, 0x3F	; 63
    1046:	df 4f       	sbci	r29, 0xFF	; 255
    1048:	e8 81       	ld	r30, Y
    104a:	f9 81       	ldd	r31, Y+1	; 0x01
    104c:	c1 5c       	subi	r28, 0xC1	; 193
    104e:	d0 40       	sbci	r29, 0x00	; 0
    1050:	00 82       	st	Z, r0
    1052:	cf 53       	subi	r28, 0x3F	; 63
    1054:	df 4f       	sbci	r29, 0xFF	; 255
    1056:	88 81       	ld	r24, Y
    1058:	99 81       	ldd	r25, Y+1	; 0x01
    105a:	c1 5c       	subi	r28, 0xC1	; 193
    105c:	d0 40       	sbci	r29, 0x00	; 0
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	cf 53       	subi	r28, 0x3F	; 63
    1062:	df 4f       	sbci	r29, 0xFF	; 255
    1064:	99 83       	std	Y+1, r25	; 0x01
    1066:	88 83       	st	Y, r24
    1068:	c1 5c       	subi	r28, 0xC1	; 193
    106a:	d0 40       	sbci	r29, 0x00	; 0
    106c:	cb 53       	subi	r28, 0x3B	; 59
    106e:	df 4f       	sbci	r29, 0xFF	; 255
    1070:	98 81       	ld	r25, Y
    1072:	c5 5c       	subi	r28, 0xC5	; 197
    1074:	d0 40       	sbci	r29, 0x00	; 0
    1076:	91 50       	subi	r25, 0x01	; 1
    1078:	cb 53       	subi	r28, 0x3B	; 59
    107a:	df 4f       	sbci	r29, 0xFF	; 255
    107c:	98 83       	st	Y, r25
    107e:	c5 5c       	subi	r28, 0xC5	; 197
    1080:	d0 40       	sbci	r29, 0x00	; 0
    1082:	cb 53       	subi	r28, 0x3B	; 59
    1084:	df 4f       	sbci	r29, 0xFF	; 255
    1086:	e8 81       	ld	r30, Y
    1088:	c5 5c       	subi	r28, 0xC5	; 197
    108a:	d0 40       	sbci	r29, 0x00	; 0
    108c:	ee 23       	and	r30, r30
    108e:	31 f6       	brne	.-116    	; 0x101c <main+0x25c>
    1090:	fe 01       	movw	r30, r28
    1092:	fe 96       	adiw	r30, 0x3e	; 62
    1094:	10 82       	st	Z, r1
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	12 82       	std	Z+2, r1	; 0x02
    109a:	13 82       	std	Z+3, r1	; 0x03
	volatile u8 arr5[16]="I'M OK ";
    109c:	ce 01       	movw	r24, r28
    109e:	8e 5b       	subi	r24, 0xBE	; 190
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	ca 53       	subi	r28, 0x3A	; 58
    10a4:	df 4f       	sbci	r29, 0xFF	; 255
    10a6:	99 83       	std	Y+1, r25	; 0x01
    10a8:	88 83       	st	Y, r24
    10aa:	c6 5c       	subi	r28, 0xC6	; 198
    10ac:	d0 40       	sbci	r29, 0x00	; 0
    10ae:	ca 53       	subi	r28, 0x3A	; 58
    10b0:	df 4f       	sbci	r29, 0xFF	; 255
    10b2:	e8 81       	ld	r30, Y
    10b4:	f9 81       	ldd	r31, Y+1	; 0x01
    10b6:	c6 5c       	subi	r28, 0xC6	; 198
    10b8:	d0 40       	sbci	r29, 0x00	; 0
    10ba:	c8 53       	subi	r28, 0x38	; 56
    10bc:	df 4f       	sbci	r29, 0xFF	; 255
    10be:	f9 83       	std	Y+1, r31	; 0x01
    10c0:	e8 83       	st	Y, r30
    10c2:	c8 5c       	subi	r28, 0xC8	; 200
    10c4:	d0 40       	sbci	r29, 0x00	; 0
    10c6:	80 ea       	ldi	r24, 0xA0	; 160
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	c6 53       	subi	r28, 0x36	; 54
    10cc:	df 4f       	sbci	r29, 0xFF	; 255
    10ce:	99 83       	std	Y+1, r25	; 0x01
    10d0:	88 83       	st	Y, r24
    10d2:	ca 5c       	subi	r28, 0xCA	; 202
    10d4:	d0 40       	sbci	r29, 0x00	; 0
    10d6:	98 e0       	ldi	r25, 0x08	; 8
    10d8:	c4 53       	subi	r28, 0x34	; 52
    10da:	df 4f       	sbci	r29, 0xFF	; 255
    10dc:	98 83       	st	Y, r25
    10de:	cc 5c       	subi	r28, 0xCC	; 204
    10e0:	d0 40       	sbci	r29, 0x00	; 0
    10e2:	c6 53       	subi	r28, 0x36	; 54
    10e4:	df 4f       	sbci	r29, 0xFF	; 255
    10e6:	e8 81       	ld	r30, Y
    10e8:	f9 81       	ldd	r31, Y+1	; 0x01
    10ea:	ca 5c       	subi	r28, 0xCA	; 202
    10ec:	d0 40       	sbci	r29, 0x00	; 0
    10ee:	00 80       	ld	r0, Z
    10f0:	c6 53       	subi	r28, 0x36	; 54
    10f2:	df 4f       	sbci	r29, 0xFF	; 255
    10f4:	88 81       	ld	r24, Y
    10f6:	99 81       	ldd	r25, Y+1	; 0x01
    10f8:	ca 5c       	subi	r28, 0xCA	; 202
    10fa:	d0 40       	sbci	r29, 0x00	; 0
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	c6 53       	subi	r28, 0x36	; 54
    1100:	df 4f       	sbci	r29, 0xFF	; 255
    1102:	99 83       	std	Y+1, r25	; 0x01
    1104:	88 83       	st	Y, r24
    1106:	ca 5c       	subi	r28, 0xCA	; 202
    1108:	d0 40       	sbci	r29, 0x00	; 0
    110a:	c8 53       	subi	r28, 0x38	; 56
    110c:	df 4f       	sbci	r29, 0xFF	; 255
    110e:	e8 81       	ld	r30, Y
    1110:	f9 81       	ldd	r31, Y+1	; 0x01
    1112:	c8 5c       	subi	r28, 0xC8	; 200
    1114:	d0 40       	sbci	r29, 0x00	; 0
    1116:	00 82       	st	Z, r0
    1118:	c8 53       	subi	r28, 0x38	; 56
    111a:	df 4f       	sbci	r29, 0xFF	; 255
    111c:	88 81       	ld	r24, Y
    111e:	99 81       	ldd	r25, Y+1	; 0x01
    1120:	c8 5c       	subi	r28, 0xC8	; 200
    1122:	d0 40       	sbci	r29, 0x00	; 0
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	c8 53       	subi	r28, 0x38	; 56
    1128:	df 4f       	sbci	r29, 0xFF	; 255
    112a:	99 83       	std	Y+1, r25	; 0x01
    112c:	88 83       	st	Y, r24
    112e:	c8 5c       	subi	r28, 0xC8	; 200
    1130:	d0 40       	sbci	r29, 0x00	; 0
    1132:	c4 53       	subi	r28, 0x34	; 52
    1134:	df 4f       	sbci	r29, 0xFF	; 255
    1136:	98 81       	ld	r25, Y
    1138:	cc 5c       	subi	r28, 0xCC	; 204
    113a:	d0 40       	sbci	r29, 0x00	; 0
    113c:	91 50       	subi	r25, 0x01	; 1
    113e:	c4 53       	subi	r28, 0x34	; 52
    1140:	df 4f       	sbci	r29, 0xFF	; 255
    1142:	98 83       	st	Y, r25
    1144:	cc 5c       	subi	r28, 0xCC	; 204
    1146:	d0 40       	sbci	r29, 0x00	; 0
    1148:	c4 53       	subi	r28, 0x34	; 52
    114a:	df 4f       	sbci	r29, 0xFF	; 255
    114c:	e8 81       	ld	r30, Y
    114e:	cc 5c       	subi	r28, 0xCC	; 204
    1150:	d0 40       	sbci	r29, 0x00	; 0
    1152:	ee 23       	and	r30, r30
    1154:	31 f6       	brne	.-116    	; 0x10e2 <main+0x322>
    1156:	ca 53       	subi	r28, 0x3A	; 58
    1158:	df 4f       	sbci	r29, 0xFF	; 255
    115a:	88 81       	ld	r24, Y
    115c:	99 81       	ldd	r25, Y+1	; 0x01
    115e:	c6 5c       	subi	r28, 0xC6	; 198
    1160:	d0 40       	sbci	r29, 0x00	; 0
    1162:	08 96       	adiw	r24, 0x08	; 8
    1164:	28 e0       	ldi	r18, 0x08	; 8
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <memset>
	volatile u8 arr6[16]="YOU! ";
    1172:	ce 01       	movw	r24, r28
    1174:	8e 5a       	subi	r24, 0xAE	; 174
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	c3 53       	subi	r28, 0x33	; 51
    117a:	df 4f       	sbci	r29, 0xFF	; 255
    117c:	99 83       	std	Y+1, r25	; 0x01
    117e:	88 83       	st	Y, r24
    1180:	cd 5c       	subi	r28, 0xCD	; 205
    1182:	d0 40       	sbci	r29, 0x00	; 0
    1184:	c3 53       	subi	r28, 0x33	; 51
    1186:	df 4f       	sbci	r29, 0xFF	; 255
    1188:	e8 81       	ld	r30, Y
    118a:	f9 81       	ldd	r31, Y+1	; 0x01
    118c:	cd 5c       	subi	r28, 0xCD	; 205
    118e:	d0 40       	sbci	r29, 0x00	; 0
    1190:	c1 53       	subi	r28, 0x31	; 49
    1192:	df 4f       	sbci	r29, 0xFF	; 255
    1194:	f9 83       	std	Y+1, r31	; 0x01
    1196:	e8 83       	st	Y, r30
    1198:	cf 5c       	subi	r28, 0xCF	; 207
    119a:	d0 40       	sbci	r29, 0x00	; 0
    119c:	80 eb       	ldi	r24, 0xB0	; 176
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	cf 52       	subi	r28, 0x2F	; 47
    11a2:	df 4f       	sbci	r29, 0xFF	; 255
    11a4:	99 83       	std	Y+1, r25	; 0x01
    11a6:	88 83       	st	Y, r24
    11a8:	c1 5d       	subi	r28, 0xD1	; 209
    11aa:	d0 40       	sbci	r29, 0x00	; 0
    11ac:	96 e0       	ldi	r25, 0x06	; 6
    11ae:	cd 52       	subi	r28, 0x2D	; 45
    11b0:	df 4f       	sbci	r29, 0xFF	; 255
    11b2:	98 83       	st	Y, r25
    11b4:	c3 5d       	subi	r28, 0xD3	; 211
    11b6:	d0 40       	sbci	r29, 0x00	; 0
    11b8:	cf 52       	subi	r28, 0x2F	; 47
    11ba:	df 4f       	sbci	r29, 0xFF	; 255
    11bc:	e8 81       	ld	r30, Y
    11be:	f9 81       	ldd	r31, Y+1	; 0x01
    11c0:	c1 5d       	subi	r28, 0xD1	; 209
    11c2:	d0 40       	sbci	r29, 0x00	; 0
    11c4:	00 80       	ld	r0, Z
    11c6:	cf 52       	subi	r28, 0x2F	; 47
    11c8:	df 4f       	sbci	r29, 0xFF	; 255
    11ca:	88 81       	ld	r24, Y
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	c1 5d       	subi	r28, 0xD1	; 209
    11d0:	d0 40       	sbci	r29, 0x00	; 0
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	cf 52       	subi	r28, 0x2F	; 47
    11d6:	df 4f       	sbci	r29, 0xFF	; 255
    11d8:	99 83       	std	Y+1, r25	; 0x01
    11da:	88 83       	st	Y, r24
    11dc:	c1 5d       	subi	r28, 0xD1	; 209
    11de:	d0 40       	sbci	r29, 0x00	; 0
    11e0:	c1 53       	subi	r28, 0x31	; 49
    11e2:	df 4f       	sbci	r29, 0xFF	; 255
    11e4:	e8 81       	ld	r30, Y
    11e6:	f9 81       	ldd	r31, Y+1	; 0x01
    11e8:	cf 5c       	subi	r28, 0xCF	; 207
    11ea:	d0 40       	sbci	r29, 0x00	; 0
    11ec:	00 82       	st	Z, r0
    11ee:	c1 53       	subi	r28, 0x31	; 49
    11f0:	df 4f       	sbci	r29, 0xFF	; 255
    11f2:	88 81       	ld	r24, Y
    11f4:	99 81       	ldd	r25, Y+1	; 0x01
    11f6:	cf 5c       	subi	r28, 0xCF	; 207
    11f8:	d0 40       	sbci	r29, 0x00	; 0
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	c1 53       	subi	r28, 0x31	; 49
    11fe:	df 4f       	sbci	r29, 0xFF	; 255
    1200:	99 83       	std	Y+1, r25	; 0x01
    1202:	88 83       	st	Y, r24
    1204:	cf 5c       	subi	r28, 0xCF	; 207
    1206:	d0 40       	sbci	r29, 0x00	; 0
    1208:	cd 52       	subi	r28, 0x2D	; 45
    120a:	df 4f       	sbci	r29, 0xFF	; 255
    120c:	98 81       	ld	r25, Y
    120e:	c3 5d       	subi	r28, 0xD3	; 211
    1210:	d0 40       	sbci	r29, 0x00	; 0
    1212:	91 50       	subi	r25, 0x01	; 1
    1214:	cd 52       	subi	r28, 0x2D	; 45
    1216:	df 4f       	sbci	r29, 0xFF	; 255
    1218:	98 83       	st	Y, r25
    121a:	c3 5d       	subi	r28, 0xD3	; 211
    121c:	d0 40       	sbci	r29, 0x00	; 0
    121e:	cd 52       	subi	r28, 0x2D	; 45
    1220:	df 4f       	sbci	r29, 0xFF	; 255
    1222:	e8 81       	ld	r30, Y
    1224:	c3 5d       	subi	r28, 0xD3	; 211
    1226:	d0 40       	sbci	r29, 0x00	; 0
    1228:	ee 23       	and	r30, r30
    122a:	31 f6       	brne	.-116    	; 0x11b8 <main+0x3f8>
    122c:	c3 53       	subi	r28, 0x33	; 51
    122e:	df 4f       	sbci	r29, 0xFF	; 255
    1230:	88 81       	ld	r24, Y
    1232:	99 81       	ldd	r25, Y+1	; 0x01
    1234:	cd 5c       	subi	r28, 0xCD	; 205
    1236:	d0 40       	sbci	r29, 0x00	; 0
    1238:	06 96       	adiw	r24, 0x06	; 6
    123a:	2a e0       	ldi	r18, 0x0A	; 10
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <memset>
	volatile u8 arr7[16]="DECOMPRESSION ";
    1248:	ce 01       	movw	r24, r28
    124a:	8e 59       	subi	r24, 0x9E	; 158
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	cc 52       	subi	r28, 0x2C	; 44
    1250:	df 4f       	sbci	r29, 0xFF	; 255
    1252:	99 83       	std	Y+1, r25	; 0x01
    1254:	88 83       	st	Y, r24
    1256:	c4 5d       	subi	r28, 0xD4	; 212
    1258:	d0 40       	sbci	r29, 0x00	; 0
    125a:	cc 52       	subi	r28, 0x2C	; 44
    125c:	df 4f       	sbci	r29, 0xFF	; 255
    125e:	e8 81       	ld	r30, Y
    1260:	f9 81       	ldd	r31, Y+1	; 0x01
    1262:	c4 5d       	subi	r28, 0xD4	; 212
    1264:	d0 40       	sbci	r29, 0x00	; 0
    1266:	ca 52       	subi	r28, 0x2A	; 42
    1268:	df 4f       	sbci	r29, 0xFF	; 255
    126a:	f9 83       	std	Y+1, r31	; 0x01
    126c:	e8 83       	st	Y, r30
    126e:	c6 5d       	subi	r28, 0xD6	; 214
    1270:	d0 40       	sbci	r29, 0x00	; 0
    1272:	80 ec       	ldi	r24, 0xC0	; 192
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	c8 52       	subi	r28, 0x28	; 40
    1278:	df 4f       	sbci	r29, 0xFF	; 255
    127a:	99 83       	std	Y+1, r25	; 0x01
    127c:	88 83       	st	Y, r24
    127e:	c8 5d       	subi	r28, 0xD8	; 216
    1280:	d0 40       	sbci	r29, 0x00	; 0
    1282:	9f e0       	ldi	r25, 0x0F	; 15
    1284:	c6 52       	subi	r28, 0x26	; 38
    1286:	df 4f       	sbci	r29, 0xFF	; 255
    1288:	98 83       	st	Y, r25
    128a:	ca 5d       	subi	r28, 0xDA	; 218
    128c:	d0 40       	sbci	r29, 0x00	; 0
    128e:	c8 52       	subi	r28, 0x28	; 40
    1290:	df 4f       	sbci	r29, 0xFF	; 255
    1292:	e8 81       	ld	r30, Y
    1294:	f9 81       	ldd	r31, Y+1	; 0x01
    1296:	c8 5d       	subi	r28, 0xD8	; 216
    1298:	d0 40       	sbci	r29, 0x00	; 0
    129a:	00 80       	ld	r0, Z
    129c:	c8 52       	subi	r28, 0x28	; 40
    129e:	df 4f       	sbci	r29, 0xFF	; 255
    12a0:	88 81       	ld	r24, Y
    12a2:	99 81       	ldd	r25, Y+1	; 0x01
    12a4:	c8 5d       	subi	r28, 0xD8	; 216
    12a6:	d0 40       	sbci	r29, 0x00	; 0
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	c8 52       	subi	r28, 0x28	; 40
    12ac:	df 4f       	sbci	r29, 0xFF	; 255
    12ae:	99 83       	std	Y+1, r25	; 0x01
    12b0:	88 83       	st	Y, r24
    12b2:	c8 5d       	subi	r28, 0xD8	; 216
    12b4:	d0 40       	sbci	r29, 0x00	; 0
    12b6:	ca 52       	subi	r28, 0x2A	; 42
    12b8:	df 4f       	sbci	r29, 0xFF	; 255
    12ba:	e8 81       	ld	r30, Y
    12bc:	f9 81       	ldd	r31, Y+1	; 0x01
    12be:	c6 5d       	subi	r28, 0xD6	; 214
    12c0:	d0 40       	sbci	r29, 0x00	; 0
    12c2:	00 82       	st	Z, r0
    12c4:	ca 52       	subi	r28, 0x2A	; 42
    12c6:	df 4f       	sbci	r29, 0xFF	; 255
    12c8:	88 81       	ld	r24, Y
    12ca:	99 81       	ldd	r25, Y+1	; 0x01
    12cc:	c6 5d       	subi	r28, 0xD6	; 214
    12ce:	d0 40       	sbci	r29, 0x00	; 0
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	ca 52       	subi	r28, 0x2A	; 42
    12d4:	df 4f       	sbci	r29, 0xFF	; 255
    12d6:	99 83       	std	Y+1, r25	; 0x01
    12d8:	88 83       	st	Y, r24
    12da:	c6 5d       	subi	r28, 0xD6	; 214
    12dc:	d0 40       	sbci	r29, 0x00	; 0
    12de:	c6 52       	subi	r28, 0x26	; 38
    12e0:	df 4f       	sbci	r29, 0xFF	; 255
    12e2:	98 81       	ld	r25, Y
    12e4:	ca 5d       	subi	r28, 0xDA	; 218
    12e6:	d0 40       	sbci	r29, 0x00	; 0
    12e8:	91 50       	subi	r25, 0x01	; 1
    12ea:	c6 52       	subi	r28, 0x26	; 38
    12ec:	df 4f       	sbci	r29, 0xFF	; 255
    12ee:	98 83       	st	Y, r25
    12f0:	ca 5d       	subi	r28, 0xDA	; 218
    12f2:	d0 40       	sbci	r29, 0x00	; 0
    12f4:	c6 52       	subi	r28, 0x26	; 38
    12f6:	df 4f       	sbci	r29, 0xFF	; 255
    12f8:	e8 81       	ld	r30, Y
    12fa:	ca 5d       	subi	r28, 0xDA	; 218
    12fc:	d0 40       	sbci	r29, 0x00	; 0
    12fe:	ee 23       	and	r30, r30
    1300:	31 f6       	brne	.-116    	; 0x128e <main+0x4ce>
    1302:	cc 52       	subi	r28, 0x2C	; 44
    1304:	df 4f       	sbci	r29, 0xFF	; 255
    1306:	e8 81       	ld	r30, Y
    1308:	f9 81       	ldd	r31, Y+1	; 0x01
    130a:	c4 5d       	subi	r28, 0xD4	; 212
    130c:	d0 40       	sbci	r29, 0x00	; 0
    130e:	17 86       	std	Z+15, r1	; 0x0f
	volatile u8 arr8[16]="THAT'S AMAZING! ";
    1310:	ce 01       	movw	r24, r28
    1312:	8e 58       	subi	r24, 0x8E	; 142
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	c5 52       	subi	r28, 0x25	; 37
    1318:	df 4f       	sbci	r29, 0xFF	; 255
    131a:	99 83       	std	Y+1, r25	; 0x01
    131c:	88 83       	st	Y, r24
    131e:	cb 5d       	subi	r28, 0xDB	; 219
    1320:	d0 40       	sbci	r29, 0x00	; 0
    1322:	80 ed       	ldi	r24, 0xD0	; 208
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	c3 52       	subi	r28, 0x23	; 35
    1328:	df 4f       	sbci	r29, 0xFF	; 255
    132a:	99 83       	std	Y+1, r25	; 0x01
    132c:	88 83       	st	Y, r24
    132e:	cd 5d       	subi	r28, 0xDD	; 221
    1330:	d0 40       	sbci	r29, 0x00	; 0
    1332:	90 e1       	ldi	r25, 0x10	; 16
    1334:	c1 52       	subi	r28, 0x21	; 33
    1336:	df 4f       	sbci	r29, 0xFF	; 255
    1338:	98 83       	st	Y, r25
    133a:	cf 5d       	subi	r28, 0xDF	; 223
    133c:	d0 40       	sbci	r29, 0x00	; 0
    133e:	c3 52       	subi	r28, 0x23	; 35
    1340:	df 4f       	sbci	r29, 0xFF	; 255
    1342:	e8 81       	ld	r30, Y
    1344:	f9 81       	ldd	r31, Y+1	; 0x01
    1346:	cd 5d       	subi	r28, 0xDD	; 221
    1348:	d0 40       	sbci	r29, 0x00	; 0
    134a:	00 80       	ld	r0, Z
    134c:	c3 52       	subi	r28, 0x23	; 35
    134e:	df 4f       	sbci	r29, 0xFF	; 255
    1350:	88 81       	ld	r24, Y
    1352:	99 81       	ldd	r25, Y+1	; 0x01
    1354:	cd 5d       	subi	r28, 0xDD	; 221
    1356:	d0 40       	sbci	r29, 0x00	; 0
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	c3 52       	subi	r28, 0x23	; 35
    135c:	df 4f       	sbci	r29, 0xFF	; 255
    135e:	99 83       	std	Y+1, r25	; 0x01
    1360:	88 83       	st	Y, r24
    1362:	cd 5d       	subi	r28, 0xDD	; 221
    1364:	d0 40       	sbci	r29, 0x00	; 0
    1366:	c5 52       	subi	r28, 0x25	; 37
    1368:	df 4f       	sbci	r29, 0xFF	; 255
    136a:	e8 81       	ld	r30, Y
    136c:	f9 81       	ldd	r31, Y+1	; 0x01
    136e:	cb 5d       	subi	r28, 0xDB	; 219
    1370:	d0 40       	sbci	r29, 0x00	; 0
    1372:	00 82       	st	Z, r0
    1374:	c5 52       	subi	r28, 0x25	; 37
    1376:	df 4f       	sbci	r29, 0xFF	; 255
    1378:	88 81       	ld	r24, Y
    137a:	99 81       	ldd	r25, Y+1	; 0x01
    137c:	cb 5d       	subi	r28, 0xDB	; 219
    137e:	d0 40       	sbci	r29, 0x00	; 0
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	c5 52       	subi	r28, 0x25	; 37
    1384:	df 4f       	sbci	r29, 0xFF	; 255
    1386:	99 83       	std	Y+1, r25	; 0x01
    1388:	88 83       	st	Y, r24
    138a:	cb 5d       	subi	r28, 0xDB	; 219
    138c:	d0 40       	sbci	r29, 0x00	; 0
    138e:	c1 52       	subi	r28, 0x21	; 33
    1390:	df 4f       	sbci	r29, 0xFF	; 255
    1392:	98 81       	ld	r25, Y
    1394:	cf 5d       	subi	r28, 0xDF	; 223
    1396:	d0 40       	sbci	r29, 0x00	; 0
    1398:	91 50       	subi	r25, 0x01	; 1
    139a:	c1 52       	subi	r28, 0x21	; 33
    139c:	df 4f       	sbci	r29, 0xFF	; 255
    139e:	98 83       	st	Y, r25
    13a0:	cf 5d       	subi	r28, 0xDF	; 223
    13a2:	d0 40       	sbci	r29, 0x00	; 0
    13a4:	c1 52       	subi	r28, 0x21	; 33
    13a6:	df 4f       	sbci	r29, 0xFF	; 255
    13a8:	e8 81       	ld	r30, Y
    13aa:	cf 5d       	subi	r28, 0xDF	; 223
    13ac:	d0 40       	sbci	r29, 0x00	; 0
    13ae:	ee 23       	and	r30, r30
    13b0:	31 f6       	brne	.-116    	; 0x133e <main+0x57e>
	volatile u8 arr9[16]="I LOVE YOU ";
    13b2:	ce 01       	movw	r24, r28
    13b4:	8e 57       	subi	r24, 0x7E	; 126
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	c0 52       	subi	r28, 0x20	; 32
    13ba:	df 4f       	sbci	r29, 0xFF	; 255
    13bc:	99 83       	std	Y+1, r25	; 0x01
    13be:	88 83       	st	Y, r24
    13c0:	c0 5e       	subi	r28, 0xE0	; 224
    13c2:	d0 40       	sbci	r29, 0x00	; 0
    13c4:	c0 52       	subi	r28, 0x20	; 32
    13c6:	df 4f       	sbci	r29, 0xFF	; 255
    13c8:	e8 81       	ld	r30, Y
    13ca:	f9 81       	ldd	r31, Y+1	; 0x01
    13cc:	c0 5e       	subi	r28, 0xE0	; 224
    13ce:	d0 40       	sbci	r29, 0x00	; 0
    13d0:	ce 51       	subi	r28, 0x1E	; 30
    13d2:	df 4f       	sbci	r29, 0xFF	; 255
    13d4:	f9 83       	std	Y+1, r31	; 0x01
    13d6:	e8 83       	st	Y, r30
    13d8:	c2 5e       	subi	r28, 0xE2	; 226
    13da:	d0 40       	sbci	r29, 0x00	; 0
    13dc:	81 ee       	ldi	r24, 0xE1	; 225
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	cc 51       	subi	r28, 0x1C	; 28
    13e2:	df 4f       	sbci	r29, 0xFF	; 255
    13e4:	99 83       	std	Y+1, r25	; 0x01
    13e6:	88 83       	st	Y, r24
    13e8:	c4 5e       	subi	r28, 0xE4	; 228
    13ea:	d0 40       	sbci	r29, 0x00	; 0
    13ec:	9c e0       	ldi	r25, 0x0C	; 12
    13ee:	ca 51       	subi	r28, 0x1A	; 26
    13f0:	df 4f       	sbci	r29, 0xFF	; 255
    13f2:	98 83       	st	Y, r25
    13f4:	c6 5e       	subi	r28, 0xE6	; 230
    13f6:	d0 40       	sbci	r29, 0x00	; 0
    13f8:	cc 51       	subi	r28, 0x1C	; 28
    13fa:	df 4f       	sbci	r29, 0xFF	; 255
    13fc:	e8 81       	ld	r30, Y
    13fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1400:	c4 5e       	subi	r28, 0xE4	; 228
    1402:	d0 40       	sbci	r29, 0x00	; 0
    1404:	00 80       	ld	r0, Z
    1406:	cc 51       	subi	r28, 0x1C	; 28
    1408:	df 4f       	sbci	r29, 0xFF	; 255
    140a:	88 81       	ld	r24, Y
    140c:	99 81       	ldd	r25, Y+1	; 0x01
    140e:	c4 5e       	subi	r28, 0xE4	; 228
    1410:	d0 40       	sbci	r29, 0x00	; 0
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	cc 51       	subi	r28, 0x1C	; 28
    1416:	df 4f       	sbci	r29, 0xFF	; 255
    1418:	99 83       	std	Y+1, r25	; 0x01
    141a:	88 83       	st	Y, r24
    141c:	c4 5e       	subi	r28, 0xE4	; 228
    141e:	d0 40       	sbci	r29, 0x00	; 0
    1420:	ce 51       	subi	r28, 0x1E	; 30
    1422:	df 4f       	sbci	r29, 0xFF	; 255
    1424:	e8 81       	ld	r30, Y
    1426:	f9 81       	ldd	r31, Y+1	; 0x01
    1428:	c2 5e       	subi	r28, 0xE2	; 226
    142a:	d0 40       	sbci	r29, 0x00	; 0
    142c:	00 82       	st	Z, r0
    142e:	ce 51       	subi	r28, 0x1E	; 30
    1430:	df 4f       	sbci	r29, 0xFF	; 255
    1432:	88 81       	ld	r24, Y
    1434:	99 81       	ldd	r25, Y+1	; 0x01
    1436:	c2 5e       	subi	r28, 0xE2	; 226
    1438:	d0 40       	sbci	r29, 0x00	; 0
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	ce 51       	subi	r28, 0x1E	; 30
    143e:	df 4f       	sbci	r29, 0xFF	; 255
    1440:	99 83       	std	Y+1, r25	; 0x01
    1442:	88 83       	st	Y, r24
    1444:	c2 5e       	subi	r28, 0xE2	; 226
    1446:	d0 40       	sbci	r29, 0x00	; 0
    1448:	ca 51       	subi	r28, 0x1A	; 26
    144a:	df 4f       	sbci	r29, 0xFF	; 255
    144c:	98 81       	ld	r25, Y
    144e:	c6 5e       	subi	r28, 0xE6	; 230
    1450:	d0 40       	sbci	r29, 0x00	; 0
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	ca 51       	subi	r28, 0x1A	; 26
    1456:	df 4f       	sbci	r29, 0xFF	; 255
    1458:	98 83       	st	Y, r25
    145a:	c6 5e       	subi	r28, 0xE6	; 230
    145c:	d0 40       	sbci	r29, 0x00	; 0
    145e:	ca 51       	subi	r28, 0x1A	; 26
    1460:	df 4f       	sbci	r29, 0xFF	; 255
    1462:	e8 81       	ld	r30, Y
    1464:	c6 5e       	subi	r28, 0xE6	; 230
    1466:	d0 40       	sbci	r29, 0x00	; 0
    1468:	ee 23       	and	r30, r30
    146a:	31 f6       	brne	.-116    	; 0x13f8 <main+0x638>
    146c:	c0 52       	subi	r28, 0x20	; 32
    146e:	df 4f       	sbci	r29, 0xFF	; 255
    1470:	e8 81       	ld	r30, Y
    1472:	f9 81       	ldd	r31, Y+1	; 0x01
    1474:	c0 5e       	subi	r28, 0xE0	; 224
    1476:	d0 40       	sbci	r29, 0x00	; 0
    1478:	14 86       	std	Z+12, r1	; 0x0c
    147a:	15 86       	std	Z+13, r1	; 0x0d
    147c:	16 86       	std	Z+14, r1	; 0x0e
    147e:	17 86       	std	Z+15, r1	; 0x0f
	volatile u8 arr10[16]="VICTORY! ";
    1480:	ce 01       	movw	r24, r28
    1482:	8e 56       	subi	r24, 0x6E	; 110
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	c9 51       	subi	r28, 0x19	; 25
    1488:	df 4f       	sbci	r29, 0xFF	; 255
    148a:	99 83       	std	Y+1, r25	; 0x01
    148c:	88 83       	st	Y, r24
    148e:	c7 5e       	subi	r28, 0xE7	; 231
    1490:	d0 40       	sbci	r29, 0x00	; 0
    1492:	c9 51       	subi	r28, 0x19	; 25
    1494:	df 4f       	sbci	r29, 0xFF	; 255
    1496:	e8 81       	ld	r30, Y
    1498:	f9 81       	ldd	r31, Y+1	; 0x01
    149a:	c7 5e       	subi	r28, 0xE7	; 231
    149c:	d0 40       	sbci	r29, 0x00	; 0
    149e:	c7 51       	subi	r28, 0x17	; 23
    14a0:	df 4f       	sbci	r29, 0xFF	; 255
    14a2:	f9 83       	std	Y+1, r31	; 0x01
    14a4:	e8 83       	st	Y, r30
    14a6:	c9 5e       	subi	r28, 0xE9	; 233
    14a8:	d0 40       	sbci	r29, 0x00	; 0
    14aa:	81 ef       	ldi	r24, 0xF1	; 241
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	c5 51       	subi	r28, 0x15	; 21
    14b0:	df 4f       	sbci	r29, 0xFF	; 255
    14b2:	99 83       	std	Y+1, r25	; 0x01
    14b4:	88 83       	st	Y, r24
    14b6:	cb 5e       	subi	r28, 0xEB	; 235
    14b8:	d0 40       	sbci	r29, 0x00	; 0
    14ba:	9a e0       	ldi	r25, 0x0A	; 10
    14bc:	c3 51       	subi	r28, 0x13	; 19
    14be:	df 4f       	sbci	r29, 0xFF	; 255
    14c0:	98 83       	st	Y, r25
    14c2:	cd 5e       	subi	r28, 0xED	; 237
    14c4:	d0 40       	sbci	r29, 0x00	; 0
    14c6:	c5 51       	subi	r28, 0x15	; 21
    14c8:	df 4f       	sbci	r29, 0xFF	; 255
    14ca:	e8 81       	ld	r30, Y
    14cc:	f9 81       	ldd	r31, Y+1	; 0x01
    14ce:	cb 5e       	subi	r28, 0xEB	; 235
    14d0:	d0 40       	sbci	r29, 0x00	; 0
    14d2:	00 80       	ld	r0, Z
    14d4:	c5 51       	subi	r28, 0x15	; 21
    14d6:	df 4f       	sbci	r29, 0xFF	; 255
    14d8:	88 81       	ld	r24, Y
    14da:	99 81       	ldd	r25, Y+1	; 0x01
    14dc:	cb 5e       	subi	r28, 0xEB	; 235
    14de:	d0 40       	sbci	r29, 0x00	; 0
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	c5 51       	subi	r28, 0x15	; 21
    14e4:	df 4f       	sbci	r29, 0xFF	; 255
    14e6:	99 83       	std	Y+1, r25	; 0x01
    14e8:	88 83       	st	Y, r24
    14ea:	cb 5e       	subi	r28, 0xEB	; 235
    14ec:	d0 40       	sbci	r29, 0x00	; 0
    14ee:	c7 51       	subi	r28, 0x17	; 23
    14f0:	df 4f       	sbci	r29, 0xFF	; 255
    14f2:	e8 81       	ld	r30, Y
    14f4:	f9 81       	ldd	r31, Y+1	; 0x01
    14f6:	c9 5e       	subi	r28, 0xE9	; 233
    14f8:	d0 40       	sbci	r29, 0x00	; 0
    14fa:	00 82       	st	Z, r0
    14fc:	c7 51       	subi	r28, 0x17	; 23
    14fe:	df 4f       	sbci	r29, 0xFF	; 255
    1500:	88 81       	ld	r24, Y
    1502:	99 81       	ldd	r25, Y+1	; 0x01
    1504:	c9 5e       	subi	r28, 0xE9	; 233
    1506:	d0 40       	sbci	r29, 0x00	; 0
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	c7 51       	subi	r28, 0x17	; 23
    150c:	df 4f       	sbci	r29, 0xFF	; 255
    150e:	99 83       	std	Y+1, r25	; 0x01
    1510:	88 83       	st	Y, r24
    1512:	c9 5e       	subi	r28, 0xE9	; 233
    1514:	d0 40       	sbci	r29, 0x00	; 0
    1516:	c3 51       	subi	r28, 0x13	; 19
    1518:	df 4f       	sbci	r29, 0xFF	; 255
    151a:	98 81       	ld	r25, Y
    151c:	cd 5e       	subi	r28, 0xED	; 237
    151e:	d0 40       	sbci	r29, 0x00	; 0
    1520:	91 50       	subi	r25, 0x01	; 1
    1522:	c3 51       	subi	r28, 0x13	; 19
    1524:	df 4f       	sbci	r29, 0xFF	; 255
    1526:	98 83       	st	Y, r25
    1528:	cd 5e       	subi	r28, 0xED	; 237
    152a:	d0 40       	sbci	r29, 0x00	; 0
    152c:	c3 51       	subi	r28, 0x13	; 19
    152e:	df 4f       	sbci	r29, 0xFF	; 255
    1530:	e8 81       	ld	r30, Y
    1532:	cd 5e       	subi	r28, 0xED	; 237
    1534:	d0 40       	sbci	r29, 0x00	; 0
    1536:	ee 23       	and	r30, r30
    1538:	31 f6       	brne	.-116    	; 0x14c6 <main+0x706>
    153a:	c9 51       	subi	r28, 0x19	; 25
    153c:	df 4f       	sbci	r29, 0xFF	; 255
    153e:	88 81       	ld	r24, Y
    1540:	99 81       	ldd	r25, Y+1	; 0x01
    1542:	c7 5e       	subi	r28, 0xE7	; 231
    1544:	d0 40       	sbci	r29, 0x00	; 0
    1546:	0a 96       	adiw	r24, 0x0a	; 10
    1548:	26 e0       	ldi	r18, 0x06	; 6
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <memset>

	volatile u8 ptr[16];
	u8 i=0;
    1556:	19 82       	std	Y+1, r1	; 0x01

	//UART_Init(UART_BAUDRATE_9600);
	GINT_Enable();
    1558:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <GINT_Enable>
	Lcd_Init();
    155c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <Lcd_Init>
	Lcd_Goto_Row_Column(0, 0);
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	0e 94 79 14 	call	0x28f2	; 0x28f2 <Lcd_Goto_Row_Column>
	adcInit();
    1568:	0e 94 1a 1c 	call	0x3834	; 0x3834 <adcInit>
	//UART_TransmitStr("SENSOR READINGS....");
	//I2C_MasterInit();
	Eeprom24C16_Init();
    156c:	0e 94 aa 14 	call	0x2954	; 0x2954 <Eeprom24C16_Init>
	while(1)
	{
		adcResultFlagCheck(ADC_CHNL0);
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <adcResultFlagCheck>
		adcResultFlagCheck(ADC_CHNL4);
    1576:	84 e0       	ldi	r24, 0x04	; 4
    1578:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <adcResultFlagCheck>
		adcResultFlagCheck(ADC_CHNL5);
    157c:	85 e0       	ldi	r24, 0x05	; 5
    157e:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <adcResultFlagCheck>
		adcResultFlagCheck(ADC_CHNL6);
    1582:	86 e0       	ldi	r24, 0x06	; 6
    1584:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <adcResultFlagCheck>
		adcResultFlagCheck(ADC_CHNL7);
    1588:	87 e0       	ldi	r24, 0x07	; 7
    158a:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <adcResultFlagCheck>
			little=flat;
		}
		else {little=bent;}*/

		//if(((22<=thumb)||(thumb<=25))&&((24<=index_F)||(index_F<=32))&&((27<=middle)||(middle<=30))&&((30<=ring)||(ring<=32))&&((29<=little)||(little<=32)))
		if((thumb>21)&&(index_F>22)&&(middle>22)&&(ring>22)&&(little>22))
    158e:	80 91 73 01 	lds	r24, 0x0173
    1592:	86 31       	cpi	r24, 0x16	; 22
    1594:	08 f4       	brcc	.+2      	; 0x1598 <main+0x7d8>
    1596:	63 c0       	rjmp	.+198    	; 0x165e <main+0x89e>
    1598:	80 91 71 01 	lds	r24, 0x0171
    159c:	87 31       	cpi	r24, 0x17	; 23
    159e:	08 f4       	brcc	.+2      	; 0x15a2 <main+0x7e2>
    15a0:	5e c0       	rjmp	.+188    	; 0x165e <main+0x89e>
    15a2:	80 91 6f 01 	lds	r24, 0x016F
    15a6:	87 31       	cpi	r24, 0x17	; 23
    15a8:	08 f4       	brcc	.+2      	; 0x15ac <main+0x7ec>
    15aa:	59 c0       	rjmp	.+178    	; 0x165e <main+0x89e>
    15ac:	80 91 72 01 	lds	r24, 0x0172
    15b0:	87 31       	cpi	r24, 0x17	; 23
    15b2:	08 f4       	brcc	.+2      	; 0x15b6 <main+0x7f6>
    15b4:	54 c0       	rjmp	.+168    	; 0x165e <main+0x89e>
    15b6:	80 91 70 01 	lds	r24, 0x0170
    15ba:	87 31       	cpi	r24, 0x17	; 23
    15bc:	08 f4       	brcc	.+2      	; 0x15c0 <main+0x800>
    15be:	4f c0       	rjmp	.+158    	; 0x165e <main+0x89e>
		//if((thumb==flat)&&(index_F==flat)&&(middle==flat)&&(ring==flat)&&(little==flat))
		{
			//arr1[16]="STOP ";
			i=0;
    15c0:	19 82       	std	Y+1, r1	; 0x01
    15c2:	13 c0       	rjmp	.+38     	; 0x15ea <main+0x82a>
			while (arr1[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr1[i]);
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	48 2f       	mov	r20, r24
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	ce 01       	movw	r24, r28
    15d2:	02 96       	adiw	r24, 0x02	; 2
    15d4:	fc 01       	movw	r30, r24
    15d6:	e2 0f       	add	r30, r18
    15d8:	f3 1f       	adc	r31, r19
    15da:	20 81       	ld	r18, Z
    15dc:	ca 01       	movw	r24, r20
    15de:	62 2f       	mov	r22, r18
    15e0:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	8f 5f       	subi	r24, 0xFF	; 255
    15e8:	89 83       	std	Y+1, r24	; 0x01
		if((thumb>21)&&(index_F>22)&&(middle>22)&&(ring>22)&&(little>22))
		//if((thumb==flat)&&(index_F==flat)&&(middle==flat)&&(ring==flat)&&(little==flat))
		{
			//arr1[16]="STOP ";
			i=0;
			while (arr1[i]!='\0'){
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	ce 01       	movw	r24, r28
    15f2:	02 96       	adiw	r24, 0x02	; 2
    15f4:	fc 01       	movw	r30, r24
    15f6:	e2 0f       	add	r30, r18
    15f8:	f3 1f       	adc	r31, r19
    15fa:	80 81       	ld	r24, Z
    15fc:	88 23       	and	r24, r24
    15fe:	11 f7       	brne	.-60     	; 0x15c4 <main+0x804>
				Eeprom24C16_WriteByte(i,arr1[i]);
				i++;
			}
			i=0;
    1600:	19 82       	std	Y+1, r1	; 0x01
    1602:	1f c0       	rjmp	.+62     	; 0x1642 <main+0x882>
			while (arr1[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	08 2f       	mov	r16, r24
    1608:	10 e0       	ldi	r17, 0x00	; 0
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    1614:	28 2f       	mov	r18, r24
    1616:	ce 01       	movw	r24, r28
    1618:	8e 55       	subi	r24, 0x5E	; 94
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	fc 01       	movw	r30, r24
    161e:	e0 0f       	add	r30, r16
    1620:	f1 1f       	adc	r31, r17
    1622:	20 83       	st	Z, r18
				i++;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	ce 01       	movw	r24, r28
    1632:	8e 55       	subi	r24, 0x5E	; 94
    1634:	9f 4f       	sbci	r25, 0xFF	; 255
    1636:	fc 01       	movw	r30, r24
    1638:	e2 0f       	add	r30, r18
    163a:	f3 1f       	adc	r31, r19
    163c:	80 81       	ld	r24, Z
    163e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr1[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr1[i]);
				i++;
			}
			i=0;
			while (arr1[i]!='\0'){
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	ce 01       	movw	r24, r28
    164a:	02 96       	adiw	r24, 0x02	; 2
    164c:	fc 01       	movw	r30, r24
    164e:	e2 0f       	add	r30, r18
    1650:	f3 1f       	adc	r31, r19
    1652:	80 81       	ld	r24, Z
    1654:	88 23       	and	r24, r24
    1656:	b1 f6       	brne	.-84     	; 0x1604 <main+0x844>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("STOP ");
			Lcd_Clear_Display();
    1658:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    165c:	89 cf       	rjmp	.-238    	; 0x1570 <main+0x7b0>
		}

		//else if(((13<=thumb)||(thumb<=17))&&((16<=index_F)||(index_F<=18))&&((28<=middle)||(middle<=30))&&((25<=ring)||(ring<=30))&&((25<=little)||(little<=30)))
		else if((thumb<21)&&(index_F<22)&&(middle>22)&&(ring>22)&&(little>22))
    165e:	80 91 73 01 	lds	r24, 0x0173
    1662:	85 31       	cpi	r24, 0x15	; 21
    1664:	08 f0       	brcs	.+2      	; 0x1668 <main+0x8a8>
    1666:	63 c0       	rjmp	.+198    	; 0x172e <main+0x96e>
    1668:	80 91 71 01 	lds	r24, 0x0171
    166c:	86 31       	cpi	r24, 0x16	; 22
    166e:	08 f0       	brcs	.+2      	; 0x1672 <main+0x8b2>
    1670:	5e c0       	rjmp	.+188    	; 0x172e <main+0x96e>
    1672:	80 91 6f 01 	lds	r24, 0x016F
    1676:	87 31       	cpi	r24, 0x17	; 23
    1678:	08 f4       	brcc	.+2      	; 0x167c <main+0x8bc>
    167a:	59 c0       	rjmp	.+178    	; 0x172e <main+0x96e>
    167c:	80 91 72 01 	lds	r24, 0x0172
    1680:	87 31       	cpi	r24, 0x17	; 23
    1682:	08 f4       	brcc	.+2      	; 0x1686 <main+0x8c6>
    1684:	54 c0       	rjmp	.+168    	; 0x172e <main+0x96e>
    1686:	80 91 70 01 	lds	r24, 0x0170
    168a:	87 31       	cpi	r24, 0x17	; 23
    168c:	08 f4       	brcc	.+2      	; 0x1690 <main+0x8d0>
    168e:	4f c0       	rjmp	.+158    	; 0x172e <main+0x96e>
		//else if((thumb==bent)&&(index_F==bent)&&(middle==flat)&&(ring==flat)&&(little==flat))
		{
			//arr2[16]="PERFECTOO ";
			i=0;
    1690:	19 82       	std	Y+1, r1	; 0x01
    1692:	13 c0       	rjmp	.+38     	; 0x16ba <main+0x8fa>
			while (arr2[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr2[i]);
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	48 2f       	mov	r20, r24
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	ce 01       	movw	r24, r28
    16a2:	42 96       	adiw	r24, 0x12	; 18
    16a4:	fc 01       	movw	r30, r24
    16a6:	e2 0f       	add	r30, r18
    16a8:	f3 1f       	adc	r31, r19
    16aa:	20 81       	ld	r18, Z
    16ac:	ca 01       	movw	r24, r20
    16ae:	62 2f       	mov	r22, r18
    16b0:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	8f 5f       	subi	r24, 0xFF	; 255
    16b8:	89 83       	std	Y+1, r24	; 0x01
		else if((thumb<21)&&(index_F<22)&&(middle>22)&&(ring>22)&&(little>22))
		//else if((thumb==bent)&&(index_F==bent)&&(middle==flat)&&(ring==flat)&&(little==flat))
		{
			//arr2[16]="PERFECTOO ";
			i=0;
			while (arr2[i]!='\0'){
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	ce 01       	movw	r24, r28
    16c2:	42 96       	adiw	r24, 0x12	; 18
    16c4:	fc 01       	movw	r30, r24
    16c6:	e2 0f       	add	r30, r18
    16c8:	f3 1f       	adc	r31, r19
    16ca:	80 81       	ld	r24, Z
    16cc:	88 23       	and	r24, r24
    16ce:	11 f7       	brne	.-60     	; 0x1694 <main+0x8d4>
				Eeprom24C16_WriteByte(i,arr2[i]);
				i++;
			}
			i=0;
    16d0:	19 82       	std	Y+1, r1	; 0x01
    16d2:	1f c0       	rjmp	.+62     	; 0x1712 <main+0x952>
			while (arr2[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	08 2f       	mov	r16, r24
    16d8:	10 e0       	ldi	r17, 0x00	; 0
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    16e4:	28 2f       	mov	r18, r24
    16e6:	ce 01       	movw	r24, r28
    16e8:	8e 55       	subi	r24, 0x5E	; 94
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	fc 01       	movw	r30, r24
    16ee:	e0 0f       	add	r30, r16
    16f0:	f1 1f       	adc	r31, r17
    16f2:	20 83       	st	Z, r18
				i++;
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	8f 5f       	subi	r24, 0xFF	; 255
    16f8:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	ce 01       	movw	r24, r28
    1702:	8e 55       	subi	r24, 0x5E	; 94
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	fc 01       	movw	r30, r24
    1708:	e2 0f       	add	r30, r18
    170a:	f3 1f       	adc	r31, r19
    170c:	80 81       	ld	r24, Z
    170e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr2[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr2[i]);
				i++;
			}
			i=0;
			while (arr2[i]!='\0'){
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	ce 01       	movw	r24, r28
    171a:	42 96       	adiw	r24, 0x12	; 18
    171c:	fc 01       	movw	r30, r24
    171e:	e2 0f       	add	r30, r18
    1720:	f3 1f       	adc	r31, r19
    1722:	80 81       	ld	r24, Z
    1724:	88 23       	and	r24, r24
    1726:	b1 f6       	brne	.-84     	; 0x16d4 <main+0x914>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("PERFECTOO ");
			Lcd_Clear_Display();
    1728:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    172c:	21 cf       	rjmp	.-446    	; 0x1570 <main+0x7b0>
		}

		//else if(((11<=thumb)||(thumb<=13))&&((12<=index_F)||(index_F<=14))&&((14<=middle)||(middle<=16))&&((12<=ring)||(ring<=15))&&((9<=little)||(little<=12)))
		else if((thumb<21)&&(index_F<22)&&(middle<22)&&(ring<22)&&(little<22))
    172e:	80 91 73 01 	lds	r24, 0x0173
    1732:	85 31       	cpi	r24, 0x15	; 21
    1734:	08 f0       	brcs	.+2      	; 0x1738 <main+0x978>
    1736:	63 c0       	rjmp	.+198    	; 0x17fe <main+0xa3e>
    1738:	80 91 71 01 	lds	r24, 0x0171
    173c:	86 31       	cpi	r24, 0x16	; 22
    173e:	08 f0       	brcs	.+2      	; 0x1742 <main+0x982>
    1740:	5e c0       	rjmp	.+188    	; 0x17fe <main+0xa3e>
    1742:	80 91 6f 01 	lds	r24, 0x016F
    1746:	86 31       	cpi	r24, 0x16	; 22
    1748:	08 f0       	brcs	.+2      	; 0x174c <main+0x98c>
    174a:	59 c0       	rjmp	.+178    	; 0x17fe <main+0xa3e>
    174c:	80 91 72 01 	lds	r24, 0x0172
    1750:	86 31       	cpi	r24, 0x16	; 22
    1752:	08 f0       	brcs	.+2      	; 0x1756 <main+0x996>
    1754:	54 c0       	rjmp	.+168    	; 0x17fe <main+0xa3e>
    1756:	80 91 70 01 	lds	r24, 0x0170
    175a:	86 31       	cpi	r24, 0x16	; 22
    175c:	08 f0       	brcs	.+2      	; 0x1760 <main+0x9a0>
    175e:	4f c0       	rjmp	.+158    	; 0x17fe <main+0xa3e>
		//else if((thumb==bent)&&(index_F==bent)&&(middle==bent)&&(ring==bent)&&(little==bent))
		{
			//arr3[16]= "IT HURTS ";
			i=0;
    1760:	19 82       	std	Y+1, r1	; 0x01
    1762:	13 c0       	rjmp	.+38     	; 0x178a <main+0x9ca>
			while (arr3[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr3[i]);
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	48 2f       	mov	r20, r24
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	ce 01       	movw	r24, r28
    1772:	82 96       	adiw	r24, 0x22	; 34
    1774:	fc 01       	movw	r30, r24
    1776:	e2 0f       	add	r30, r18
    1778:	f3 1f       	adc	r31, r19
    177a:	20 81       	ld	r18, Z
    177c:	ca 01       	movw	r24, r20
    177e:	62 2f       	mov	r22, r18
    1780:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	8f 5f       	subi	r24, 0xFF	; 255
    1788:	89 83       	std	Y+1, r24	; 0x01
		else if((thumb<21)&&(index_F<22)&&(middle<22)&&(ring<22)&&(little<22))
		//else if((thumb==bent)&&(index_F==bent)&&(middle==bent)&&(ring==bent)&&(little==bent))
		{
			//arr3[16]= "IT HURTS ";
			i=0;
			while (arr3[i]!='\0'){
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	ce 01       	movw	r24, r28
    1792:	82 96       	adiw	r24, 0x22	; 34
    1794:	fc 01       	movw	r30, r24
    1796:	e2 0f       	add	r30, r18
    1798:	f3 1f       	adc	r31, r19
    179a:	80 81       	ld	r24, Z
    179c:	88 23       	and	r24, r24
    179e:	11 f7       	brne	.-60     	; 0x1764 <main+0x9a4>
				Eeprom24C16_WriteByte(i,arr3[i]);
				i++;
			}
			i=0;
    17a0:	19 82       	std	Y+1, r1	; 0x01
    17a2:	1f c0       	rjmp	.+62     	; 0x17e2 <main+0xa22>
			while (arr3[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	08 2f       	mov	r16, r24
    17a8:	10 e0       	ldi	r17, 0x00	; 0
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    17b4:	28 2f       	mov	r18, r24
    17b6:	ce 01       	movw	r24, r28
    17b8:	8e 55       	subi	r24, 0x5E	; 94
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	fc 01       	movw	r30, r24
    17be:	e0 0f       	add	r30, r16
    17c0:	f1 1f       	adc	r31, r17
    17c2:	20 83       	st	Z, r18
				i++;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	ce 01       	movw	r24, r28
    17d2:	8e 55       	subi	r24, 0x5E	; 94
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	fc 01       	movw	r30, r24
    17d8:	e2 0f       	add	r30, r18
    17da:	f3 1f       	adc	r31, r19
    17dc:	80 81       	ld	r24, Z
    17de:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr3[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr3[i]);
				i++;
			}
			i=0;
			while (arr3[i]!='\0'){
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	ce 01       	movw	r24, r28
    17ea:	82 96       	adiw	r24, 0x22	; 34
    17ec:	fc 01       	movw	r30, r24
    17ee:	e2 0f       	add	r30, r18
    17f0:	f3 1f       	adc	r31, r19
    17f2:	80 81       	ld	r24, Z
    17f4:	88 23       	and	r24, r24
    17f6:	b1 f6       	brne	.-84     	; 0x17a4 <main+0x9e4>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("IT HURTS ");
			Lcd_Clear_Display();
    17f8:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    17fc:	b9 ce       	rjmp	.-654    	; 0x1570 <main+0x7b0>
		}

		//else if(((14<=thumb)||(thumb<=17))&&((26<=index_F)||(index_F<=28))&&((14<=middle)||(middle<=16))&&((13<=little)||(little<=16))&&((13<=ring)||(ring<=16)))
		else if((thumb>21)&&(index_F>22)&&(middle>22)&&(little>22)&&(ring<22))
    17fe:	80 91 73 01 	lds	r24, 0x0173
    1802:	86 31       	cpi	r24, 0x16	; 22
    1804:	08 f4       	brcc	.+2      	; 0x1808 <main+0xa48>
    1806:	63 c0       	rjmp	.+198    	; 0x18ce <main+0xb0e>
    1808:	80 91 71 01 	lds	r24, 0x0171
    180c:	87 31       	cpi	r24, 0x17	; 23
    180e:	08 f4       	brcc	.+2      	; 0x1812 <main+0xa52>
    1810:	5e c0       	rjmp	.+188    	; 0x18ce <main+0xb0e>
    1812:	80 91 6f 01 	lds	r24, 0x016F
    1816:	87 31       	cpi	r24, 0x17	; 23
    1818:	08 f4       	brcc	.+2      	; 0x181c <main+0xa5c>
    181a:	59 c0       	rjmp	.+178    	; 0x18ce <main+0xb0e>
    181c:	80 91 70 01 	lds	r24, 0x0170
    1820:	87 31       	cpi	r24, 0x17	; 23
    1822:	08 f4       	brcc	.+2      	; 0x1826 <main+0xa66>
    1824:	54 c0       	rjmp	.+168    	; 0x18ce <main+0xb0e>
    1826:	80 91 72 01 	lds	r24, 0x0172
    182a:	86 31       	cpi	r24, 0x16	; 22
    182c:	08 f0       	brcs	.+2      	; 0x1830 <main+0xa70>
    182e:	4f c0       	rjmp	.+158    	; 0x18ce <main+0xb0e>
		//else if((thumb==flat)&&(index_F==flat)&&(middle==flat)&&(ring==bent)&&(little==flat))
		{
			//arr4[16]="I HATE YOU ";
			i=0;
    1830:	19 82       	std	Y+1, r1	; 0x01
    1832:	13 c0       	rjmp	.+38     	; 0x185a <main+0xa9a>
			while (arr4[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr4[i]);
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	48 2f       	mov	r20, r24
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	ce 01       	movw	r24, r28
    1842:	c2 96       	adiw	r24, 0x32	; 50
    1844:	fc 01       	movw	r30, r24
    1846:	e2 0f       	add	r30, r18
    1848:	f3 1f       	adc	r31, r19
    184a:	20 81       	ld	r18, Z
    184c:	ca 01       	movw	r24, r20
    184e:	62 2f       	mov	r22, r18
    1850:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	89 83       	std	Y+1, r24	; 0x01
		else if((thumb>21)&&(index_F>22)&&(middle>22)&&(little>22)&&(ring<22))
		//else if((thumb==flat)&&(index_F==flat)&&(middle==flat)&&(ring==bent)&&(little==flat))
		{
			//arr4[16]="I HATE YOU ";
			i=0;
			while (arr4[i]!='\0'){
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	ce 01       	movw	r24, r28
    1862:	c2 96       	adiw	r24, 0x32	; 50
    1864:	fc 01       	movw	r30, r24
    1866:	e2 0f       	add	r30, r18
    1868:	f3 1f       	adc	r31, r19
    186a:	80 81       	ld	r24, Z
    186c:	88 23       	and	r24, r24
    186e:	11 f7       	brne	.-60     	; 0x1834 <main+0xa74>
				Eeprom24C16_WriteByte(i,arr4[i]);
				i++;
			}
			i=0;
    1870:	19 82       	std	Y+1, r1	; 0x01
    1872:	1f c0       	rjmp	.+62     	; 0x18b2 <main+0xaf2>
			while (arr4[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	08 2f       	mov	r16, r24
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    1884:	28 2f       	mov	r18, r24
    1886:	ce 01       	movw	r24, r28
    1888:	8e 55       	subi	r24, 0x5E	; 94
    188a:	9f 4f       	sbci	r25, 0xFF	; 255
    188c:	fc 01       	movw	r30, r24
    188e:	e0 0f       	add	r30, r16
    1890:	f1 1f       	adc	r31, r17
    1892:	20 83       	st	Z, r18
				i++;
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	ce 01       	movw	r24, r28
    18a2:	8e 55       	subi	r24, 0x5E	; 94
    18a4:	9f 4f       	sbci	r25, 0xFF	; 255
    18a6:	fc 01       	movw	r30, r24
    18a8:	e2 0f       	add	r30, r18
    18aa:	f3 1f       	adc	r31, r19
    18ac:	80 81       	ld	r24, Z
    18ae:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr4[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr4[i]);
				i++;
			}
			i=0;
			while (arr4[i]!='\0'){
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	ce 01       	movw	r24, r28
    18ba:	c2 96       	adiw	r24, 0x32	; 50
    18bc:	fc 01       	movw	r30, r24
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	80 81       	ld	r24, Z
    18c4:	88 23       	and	r24, r24
    18c6:	b1 f6       	brne	.-84     	; 0x1874 <main+0xab4>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("I HATE YOU ");
			Lcd_Clear_Display();
    18c8:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    18cc:	51 ce       	rjmp	.-862    	; 0x1570 <main+0x7b0>
		}

		//else if(((11<=index_F)||(index_F<=13))&&((8<=little)||(little<=10))&&((12<=middle)||(middle<=14))&&((12<=ring)||(ring<=14))&&((23<=thumb)||(thumb<=26)))
		else if((index_F<22)&&(little<22)&&(middle<22)&&(ring<22)&&(thumb>21))
    18ce:	80 91 71 01 	lds	r24, 0x0171
    18d2:	86 31       	cpi	r24, 0x16	; 22
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <main+0xb18>
    18d6:	66 c0       	rjmp	.+204    	; 0x19a4 <main+0xbe4>
    18d8:	80 91 70 01 	lds	r24, 0x0170
    18dc:	86 31       	cpi	r24, 0x16	; 22
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <main+0xb22>
    18e0:	61 c0       	rjmp	.+194    	; 0x19a4 <main+0xbe4>
    18e2:	80 91 6f 01 	lds	r24, 0x016F
    18e6:	86 31       	cpi	r24, 0x16	; 22
    18e8:	08 f0       	brcs	.+2      	; 0x18ec <main+0xb2c>
    18ea:	5c c0       	rjmp	.+184    	; 0x19a4 <main+0xbe4>
    18ec:	80 91 72 01 	lds	r24, 0x0172
    18f0:	86 31       	cpi	r24, 0x16	; 22
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <main+0xb36>
    18f4:	57 c0       	rjmp	.+174    	; 0x19a4 <main+0xbe4>
    18f6:	80 91 73 01 	lds	r24, 0x0173
    18fa:	86 31       	cpi	r24, 0x16	; 22
    18fc:	08 f4       	brcc	.+2      	; 0x1900 <main+0xb40>
    18fe:	52 c0       	rjmp	.+164    	; 0x19a4 <main+0xbe4>
		//else if((thumb==flat)&&(index_F==bent)&&(middle==bent)&&(ring==bent)&&(little==bent))
		{
			//arr5[16]="I'M OK ";
			i=0;
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	14 c0       	rjmp	.+40     	; 0x192c <main+0xb6c>
			while (arr5[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr5[i]);
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	48 2f       	mov	r20, r24
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	ce 01       	movw	r24, r28
    1912:	8e 5b       	subi	r24, 0xBE	; 190
    1914:	9f 4f       	sbci	r25, 0xFF	; 255
    1916:	fc 01       	movw	r30, r24
    1918:	e2 0f       	add	r30, r18
    191a:	f3 1f       	adc	r31, r19
    191c:	20 81       	ld	r18, Z
    191e:	ca 01       	movw	r24, r20
    1920:	62 2f       	mov	r22, r18
    1922:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	89 83       	std	Y+1, r24	; 0x01
		else if((index_F<22)&&(little<22)&&(middle<22)&&(ring<22)&&(thumb>21))
		//else if((thumb==flat)&&(index_F==bent)&&(middle==bent)&&(ring==bent)&&(little==bent))
		{
			//arr5[16]="I'M OK ";
			i=0;
			while (arr5[i]!='\0'){
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	ce 01       	movw	r24, r28
    1934:	8e 5b       	subi	r24, 0xBE	; 190
    1936:	9f 4f       	sbci	r25, 0xFF	; 255
    1938:	fc 01       	movw	r30, r24
    193a:	e2 0f       	add	r30, r18
    193c:	f3 1f       	adc	r31, r19
    193e:	80 81       	ld	r24, Z
    1940:	88 23       	and	r24, r24
    1942:	01 f7       	brne	.-64     	; 0x1904 <main+0xb44>
				Eeprom24C16_WriteByte(i,arr5[i]);
				i++;
			}
			i=0;
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	1f c0       	rjmp	.+62     	; 0x1986 <main+0xbc6>
			while (arr5[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	08 2f       	mov	r16, r24
    194c:	10 e0       	ldi	r17, 0x00	; 0
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    1958:	28 2f       	mov	r18, r24
    195a:	ce 01       	movw	r24, r28
    195c:	8e 55       	subi	r24, 0x5E	; 94
    195e:	9f 4f       	sbci	r25, 0xFF	; 255
    1960:	fc 01       	movw	r30, r24
    1962:	e0 0f       	add	r30, r16
    1964:	f1 1f       	adc	r31, r17
    1966:	20 83       	st	Z, r18
				i++;
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	8f 5f       	subi	r24, 0xFF	; 255
    196c:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	ce 01       	movw	r24, r28
    1976:	8e 55       	subi	r24, 0x5E	; 94
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	fc 01       	movw	r30, r24
    197c:	e2 0f       	add	r30, r18
    197e:	f3 1f       	adc	r31, r19
    1980:	80 81       	ld	r24, Z
    1982:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr5[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr5[i]);
				i++;
			}
			i=0;
			while (arr5[i]!='\0'){
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	ce 01       	movw	r24, r28
    198e:	8e 5b       	subi	r24, 0xBE	; 190
    1990:	9f 4f       	sbci	r25, 0xFF	; 255
    1992:	fc 01       	movw	r30, r24
    1994:	e2 0f       	add	r30, r18
    1996:	f3 1f       	adc	r31, r19
    1998:	80 81       	ld	r24, Z
    199a:	88 23       	and	r24, r24
    199c:	a9 f6       	brne	.-86     	; 0x1948 <main+0xb88>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("I'M OK ");
			Lcd_Clear_Display();
    199e:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    19a2:	e6 cd       	rjmp	.-1076   	; 0x1570 <main+0x7b0>
		}

		//else if(((14<=thumb)||(thumb<=17))&&((7<=little)||(little<=10))&&((14<=middle)||(middle<=16))&&((13<=ring)||(ring<=16))&&((26<=index_F)||(index_F<=28)))
		else if((thumb<21)&&(little<22)&&(middle<22)&&(ring<22)&&(index_F>22))
    19a4:	80 91 73 01 	lds	r24, 0x0173
    19a8:	85 31       	cpi	r24, 0x15	; 21
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <main+0xbee>
    19ac:	66 c0       	rjmp	.+204    	; 0x1a7a <main+0xcba>
    19ae:	80 91 70 01 	lds	r24, 0x0170
    19b2:	86 31       	cpi	r24, 0x16	; 22
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <main+0xbf8>
    19b6:	61 c0       	rjmp	.+194    	; 0x1a7a <main+0xcba>
    19b8:	80 91 6f 01 	lds	r24, 0x016F
    19bc:	86 31       	cpi	r24, 0x16	; 22
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <main+0xc02>
    19c0:	5c c0       	rjmp	.+184    	; 0x1a7a <main+0xcba>
    19c2:	80 91 72 01 	lds	r24, 0x0172
    19c6:	86 31       	cpi	r24, 0x16	; 22
    19c8:	08 f0       	brcs	.+2      	; 0x19cc <main+0xc0c>
    19ca:	57 c0       	rjmp	.+174    	; 0x1a7a <main+0xcba>
    19cc:	80 91 71 01 	lds	r24, 0x0171
    19d0:	87 31       	cpi	r24, 0x17	; 23
    19d2:	08 f4       	brcc	.+2      	; 0x19d6 <main+0xc16>
    19d4:	52 c0       	rjmp	.+164    	; 0x1a7a <main+0xcba>
		//else if((thumb==bent)&&(index_F==flat)&&(middle==bent)&&(ring==bent)&&(little==bent))
		{
			//arr6[16]= "YOU! ";
			i=0;
    19d6:	19 82       	std	Y+1, r1	; 0x01
    19d8:	14 c0       	rjmp	.+40     	; 0x1a02 <main+0xc42>
			while (arr6[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr6[i]);
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	48 2f       	mov	r20, r24
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	ce 01       	movw	r24, r28
    19e8:	8e 5a       	subi	r24, 0xAE	; 174
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	fc 01       	movw	r30, r24
    19ee:	e2 0f       	add	r30, r18
    19f0:	f3 1f       	adc	r31, r19
    19f2:	20 81       	ld	r18, Z
    19f4:	ca 01       	movw	r24, r20
    19f6:	62 2f       	mov	r22, r18
    19f8:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	89 83       	std	Y+1, r24	; 0x01
		else if((thumb<21)&&(little<22)&&(middle<22)&&(ring<22)&&(index_F>22))
		//else if((thumb==bent)&&(index_F==flat)&&(middle==bent)&&(ring==bent)&&(little==bent))
		{
			//arr6[16]= "YOU! ";
			i=0;
			while (arr6[i]!='\0'){
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	ce 01       	movw	r24, r28
    1a0a:	8e 5a       	subi	r24, 0xAE	; 174
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	fc 01       	movw	r30, r24
    1a10:	e2 0f       	add	r30, r18
    1a12:	f3 1f       	adc	r31, r19
    1a14:	80 81       	ld	r24, Z
    1a16:	88 23       	and	r24, r24
    1a18:	01 f7       	brne	.-64     	; 0x19da <main+0xc1a>
				Eeprom24C16_WriteByte(i,arr6[i]);
				i++;
			}
			i=0;
    1a1a:	19 82       	std	Y+1, r1	; 0x01
    1a1c:	1f c0       	rjmp	.+62     	; 0x1a5c <main+0xc9c>
			while (arr6[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	08 2f       	mov	r16, r24
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    1a2e:	28 2f       	mov	r18, r24
    1a30:	ce 01       	movw	r24, r28
    1a32:	8e 55       	subi	r24, 0x5E	; 94
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	fc 01       	movw	r30, r24
    1a38:	e0 0f       	add	r30, r16
    1a3a:	f1 1f       	adc	r31, r17
    1a3c:	20 83       	st	Z, r18
				i++;
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	8f 5f       	subi	r24, 0xFF	; 255
    1a42:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	8e 55       	subi	r24, 0x5E	; 94
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	fc 01       	movw	r30, r24
    1a52:	e2 0f       	add	r30, r18
    1a54:	f3 1f       	adc	r31, r19
    1a56:	80 81       	ld	r24, Z
    1a58:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr6[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr6[i]);
				i++;
			}
			i=0;
			while (arr6[i]!='\0'){
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	ce 01       	movw	r24, r28
    1a64:	8e 5a       	subi	r24, 0xAE	; 174
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	fc 01       	movw	r30, r24
    1a6a:	e2 0f       	add	r30, r18
    1a6c:	f3 1f       	adc	r31, r19
    1a6e:	80 81       	ld	r24, Z
    1a70:	88 23       	and	r24, r24
    1a72:	a9 f6       	brne	.-86     	; 0x1a1e <main+0xc5e>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("YOU! ");
			Lcd_Clear_Display();
    1a74:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    1a78:	7b cd       	rjmp	.-1290   	; 0x1570 <main+0x7b0>
		}

		//else if(((13<=thumb)||(thumb<=15))&&((12<=index_F)||(index_F<=14))&&((13<=middle)||(middle<=19))&&((15<=ring)||(ring<=17))&&((30<=little)||(little<=33)))
		else if((thumb<21)&&(index_F<22)&&(middle<22)&&(ring<22)&&(little>22))
    1a7a:	80 91 73 01 	lds	r24, 0x0173
    1a7e:	85 31       	cpi	r24, 0x15	; 21
    1a80:	08 f0       	brcs	.+2      	; 0x1a84 <main+0xcc4>
    1a82:	66 c0       	rjmp	.+204    	; 0x1b50 <main+0xd90>
    1a84:	80 91 71 01 	lds	r24, 0x0171
    1a88:	86 31       	cpi	r24, 0x16	; 22
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <main+0xcce>
    1a8c:	61 c0       	rjmp	.+194    	; 0x1b50 <main+0xd90>
    1a8e:	80 91 6f 01 	lds	r24, 0x016F
    1a92:	86 31       	cpi	r24, 0x16	; 22
    1a94:	08 f0       	brcs	.+2      	; 0x1a98 <main+0xcd8>
    1a96:	5c c0       	rjmp	.+184    	; 0x1b50 <main+0xd90>
    1a98:	80 91 72 01 	lds	r24, 0x0172
    1a9c:	86 31       	cpi	r24, 0x16	; 22
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <main+0xce2>
    1aa0:	57 c0       	rjmp	.+174    	; 0x1b50 <main+0xd90>
    1aa2:	80 91 70 01 	lds	r24, 0x0170
    1aa6:	87 31       	cpi	r24, 0x17	; 23
    1aa8:	08 f4       	brcc	.+2      	; 0x1aac <main+0xcec>
    1aaa:	52 c0       	rjmp	.+164    	; 0x1b50 <main+0xd90>
		//else if((thumb==bent)&&(index_F==bent)&&(middle==bent)&&(ring==bent)&&(little==flat))
		{
			//arr7[16]= "DECOMPRESSION ";
			i=0;
    1aac:	19 82       	std	Y+1, r1	; 0x01
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <main+0xd18>
			while (arr7[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr7[i]);
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	ce 01       	movw	r24, r28
    1abe:	8e 59       	subi	r24, 0x9E	; 158
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	e2 0f       	add	r30, r18
    1ac6:	f3 1f       	adc	r31, r19
    1ac8:	20 81       	ld	r18, Z
    1aca:	ca 01       	movw	r24, r20
    1acc:	62 2f       	mov	r22, r18
    1ace:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	89 83       	std	Y+1, r24	; 0x01
		else if((thumb<21)&&(index_F<22)&&(middle<22)&&(ring<22)&&(little>22))
		//else if((thumb==bent)&&(index_F==bent)&&(middle==bent)&&(ring==bent)&&(little==flat))
		{
			//arr7[16]= "DECOMPRESSION ";
			i=0;
			while (arr7[i]!='\0'){
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	ce 01       	movw	r24, r28
    1ae0:	8e 59       	subi	r24, 0x9E	; 158
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e2 0f       	add	r30, r18
    1ae8:	f3 1f       	adc	r31, r19
    1aea:	80 81       	ld	r24, Z
    1aec:	88 23       	and	r24, r24
    1aee:	01 f7       	brne	.-64     	; 0x1ab0 <main+0xcf0>
				Eeprom24C16_WriteByte(i,arr7[i]);
				i++;
			}
			i=0;
    1af0:	19 82       	std	Y+1, r1	; 0x01
    1af2:	1f c0       	rjmp	.+62     	; 0x1b32 <main+0xd72>
			while (arr7[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	08 2f       	mov	r16, r24
    1af8:	10 e0       	ldi	r17, 0x00	; 0
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    1b04:	28 2f       	mov	r18, r24
    1b06:	ce 01       	movw	r24, r28
    1b08:	8e 55       	subi	r24, 0x5E	; 94
    1b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e0 0f       	add	r30, r16
    1b10:	f1 1f       	adc	r31, r17
    1b12:	20 83       	st	Z, r18
				i++;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	ce 01       	movw	r24, r28
    1b22:	8e 55       	subi	r24, 0x5E	; 94
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	fc 01       	movw	r30, r24
    1b28:	e2 0f       	add	r30, r18
    1b2a:	f3 1f       	adc	r31, r19
    1b2c:	80 81       	ld	r24, Z
    1b2e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr7[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr7[i]);
				i++;
			}
			i=0;
			while (arr7[i]!='\0'){
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	ce 01       	movw	r24, r28
    1b3a:	8e 59       	subi	r24, 0x9E	; 158
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e2 0f       	add	r30, r18
    1b42:	f3 1f       	adc	r31, r19
    1b44:	80 81       	ld	r24, Z
    1b46:	88 23       	and	r24, r24
    1b48:	a9 f6       	brne	.-86     	; 0x1af4 <main+0xd34>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("DECOMPRESSION ");
			Lcd_Clear_Display();
    1b4a:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    1b4e:	10 cd       	rjmp	.-1504   	; 0x1570 <main+0x7b0>
		}

		//else if(((12<=thumb)||(thumb<=14))&&((16<=middle)||(middle<=19))&&((19<=ring)||(ring<=21))&&((29<=index_F)||(index_F<=32))&&((29<=little)||(little<=32)))
		else if((thumb<22)&&(middle<22)&&(ring<22)&&(index_F>22)&&(little>22))
    1b50:	80 91 73 01 	lds	r24, 0x0173
    1b54:	86 31       	cpi	r24, 0x16	; 22
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <main+0xd9a>
    1b58:	66 c0       	rjmp	.+204    	; 0x1c26 <main+0xe66>
    1b5a:	80 91 6f 01 	lds	r24, 0x016F
    1b5e:	86 31       	cpi	r24, 0x16	; 22
    1b60:	08 f0       	brcs	.+2      	; 0x1b64 <main+0xda4>
    1b62:	61 c0       	rjmp	.+194    	; 0x1c26 <main+0xe66>
    1b64:	80 91 72 01 	lds	r24, 0x0172
    1b68:	86 31       	cpi	r24, 0x16	; 22
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <main+0xdae>
    1b6c:	5c c0       	rjmp	.+184    	; 0x1c26 <main+0xe66>
    1b6e:	80 91 71 01 	lds	r24, 0x0171
    1b72:	87 31       	cpi	r24, 0x17	; 23
    1b74:	08 f4       	brcc	.+2      	; 0x1b78 <main+0xdb8>
    1b76:	57 c0       	rjmp	.+174    	; 0x1c26 <main+0xe66>
    1b78:	80 91 70 01 	lds	r24, 0x0170
    1b7c:	87 31       	cpi	r24, 0x17	; 23
    1b7e:	08 f4       	brcc	.+2      	; 0x1b82 <main+0xdc2>
    1b80:	52 c0       	rjmp	.+164    	; 0x1c26 <main+0xe66>
		//else if((thumb==bent)&&(index_F==flat)&&(middle==bent)&&(ring==bent)&&(little==flat))

		{
			//arr8[16]="THAT'S AMAZING! ";
			i=0;
    1b82:	19 82       	std	Y+1, r1	; 0x01
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <main+0xdee>
			while (arr8[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr8[i]);
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	48 2f       	mov	r20, r24
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	ce 01       	movw	r24, r28
    1b94:	8e 58       	subi	r24, 0x8E	; 142
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	fc 01       	movw	r30, r24
    1b9a:	e2 0f       	add	r30, r18
    1b9c:	f3 1f       	adc	r31, r19
    1b9e:	20 81       	ld	r18, Z
    1ba0:	ca 01       	movw	r24, r20
    1ba2:	62 2f       	mov	r22, r18
    1ba4:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	8f 5f       	subi	r24, 0xFF	; 255
    1bac:	89 83       	std	Y+1, r24	; 0x01
		//else if((thumb==bent)&&(index_F==flat)&&(middle==bent)&&(ring==bent)&&(little==flat))

		{
			//arr8[16]="THAT'S AMAZING! ";
			i=0;
			while (arr8[i]!='\0'){
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	8e 58       	subi	r24, 0x8E	; 142
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	fc 01       	movw	r30, r24
    1bbc:	e2 0f       	add	r30, r18
    1bbe:	f3 1f       	adc	r31, r19
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 23       	and	r24, r24
    1bc4:	01 f7       	brne	.-64     	; 0x1b86 <main+0xdc6>
				Eeprom24C16_WriteByte(i,arr8[i]);
				i++;
			}
			i=0;
    1bc6:	19 82       	std	Y+1, r1	; 0x01
    1bc8:	1f c0       	rjmp	.+62     	; 0x1c08 <main+0xe48>
			while (arr8[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	08 2f       	mov	r16, r24
    1bce:	10 e0       	ldi	r17, 0x00	; 0
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	88 2f       	mov	r24, r24
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    1bda:	28 2f       	mov	r18, r24
    1bdc:	ce 01       	movw	r24, r28
    1bde:	8e 55       	subi	r24, 0x5E	; 94
    1be0:	9f 4f       	sbci	r25, 0xFF	; 255
    1be2:	fc 01       	movw	r30, r24
    1be4:	e0 0f       	add	r30, r16
    1be6:	f1 1f       	adc	r31, r17
    1be8:	20 83       	st	Z, r18
				i++;
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	8f 5f       	subi	r24, 0xFF	; 255
    1bee:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	8e 55       	subi	r24, 0x5E	; 94
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	e2 0f       	add	r30, r18
    1c00:	f3 1f       	adc	r31, r19
    1c02:	80 81       	ld	r24, Z
    1c04:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr8[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr8[i]);
				i++;
			}
			i=0;
			while (arr8[i]!='\0'){
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	ce 01       	movw	r24, r28
    1c10:	8e 58       	subi	r24, 0x8E	; 142
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	fc 01       	movw	r30, r24
    1c16:	e2 0f       	add	r30, r18
    1c18:	f3 1f       	adc	r31, r19
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 23       	and	r24, r24
    1c1e:	a9 f6       	brne	.-86     	; 0x1bca <main+0xe0a>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("THAT'S AMAZING! ");
			Lcd_Clear_Display();
    1c20:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    1c24:	a5 cc       	rjmp	.-1718   	; 0x1570 <main+0x7b0>
		}

		//else if(((22<=thumb)||(thumb<=24))&&((29<=index_F)||(index_F<=32))&&((24<=little)||(little<=30))&&((18<=middle)||(middle<=20))&&((18<=ring)||(ring<=22)))
		else if((thumb>22)&&(index_F>22)&&(little>22)&&(middle<22)&&(ring<22))
    1c26:	80 91 73 01 	lds	r24, 0x0173
    1c2a:	87 31       	cpi	r24, 0x17	; 23
    1c2c:	08 f4       	brcc	.+2      	; 0x1c30 <main+0xe70>
    1c2e:	66 c0       	rjmp	.+204    	; 0x1cfc <main+0xf3c>
    1c30:	80 91 71 01 	lds	r24, 0x0171
    1c34:	87 31       	cpi	r24, 0x17	; 23
    1c36:	08 f4       	brcc	.+2      	; 0x1c3a <main+0xe7a>
    1c38:	61 c0       	rjmp	.+194    	; 0x1cfc <main+0xf3c>
    1c3a:	80 91 70 01 	lds	r24, 0x0170
    1c3e:	87 31       	cpi	r24, 0x17	; 23
    1c40:	08 f4       	brcc	.+2      	; 0x1c44 <main+0xe84>
    1c42:	5c c0       	rjmp	.+184    	; 0x1cfc <main+0xf3c>
    1c44:	80 91 6f 01 	lds	r24, 0x016F
    1c48:	86 31       	cpi	r24, 0x16	; 22
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <main+0xe8e>
    1c4c:	57 c0       	rjmp	.+174    	; 0x1cfc <main+0xf3c>
    1c4e:	80 91 72 01 	lds	r24, 0x0172
    1c52:	86 31       	cpi	r24, 0x16	; 22
    1c54:	08 f0       	brcs	.+2      	; 0x1c58 <main+0xe98>
    1c56:	52 c0       	rjmp	.+164    	; 0x1cfc <main+0xf3c>
		//else if((thumb==flat)&&(index_F==flat)&&(middle==bent)&&(ring==bent)&&(little==flat))
		{
			//arr9[16]="I LOVE YOU ";
			i=0;
    1c58:	19 82       	std	Y+1, r1	; 0x01
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <main+0xec4>
			while (arr9[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr9[i]);
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	48 2f       	mov	r20, r24
    1c60:	50 e0       	ldi	r21, 0x00	; 0
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	ce 01       	movw	r24, r28
    1c6a:	8e 57       	subi	r24, 0x7E	; 126
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	fc 01       	movw	r30, r24
    1c70:	e2 0f       	add	r30, r18
    1c72:	f3 1f       	adc	r31, r19
    1c74:	20 81       	ld	r18, Z
    1c76:	ca 01       	movw	r24, r20
    1c78:	62 2f       	mov	r22, r18
    1c7a:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	8f 5f       	subi	r24, 0xFF	; 255
    1c82:	89 83       	std	Y+1, r24	; 0x01
		else if((thumb>22)&&(index_F>22)&&(little>22)&&(middle<22)&&(ring<22))
		//else if((thumb==flat)&&(index_F==flat)&&(middle==bent)&&(ring==bent)&&(little==flat))
		{
			//arr9[16]="I LOVE YOU ";
			i=0;
			while (arr9[i]!='\0'){
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	8e 57       	subi	r24, 0x7E	; 126
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	fc 01       	movw	r30, r24
    1c92:	e2 0f       	add	r30, r18
    1c94:	f3 1f       	adc	r31, r19
    1c96:	80 81       	ld	r24, Z
    1c98:	88 23       	and	r24, r24
    1c9a:	01 f7       	brne	.-64     	; 0x1c5c <main+0xe9c>
				Eeprom24C16_WriteByte(i,arr9[i]);
				i++;
			}
			i=0;
    1c9c:	19 82       	std	Y+1, r1	; 0x01
    1c9e:	1f c0       	rjmp	.+62     	; 0x1cde <main+0xf1e>
			while (arr9[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	08 2f       	mov	r16, r24
    1ca4:	10 e0       	ldi	r17, 0x00	; 0
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	8e 55       	subi	r24, 0x5E	; 94
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	fc 01       	movw	r30, r24
    1cba:	e0 0f       	add	r30, r16
    1cbc:	f1 1f       	adc	r31, r17
    1cbe:	20 83       	st	Z, r18
				i++;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	8f 5f       	subi	r24, 0xFF	; 255
    1cc4:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	ce 01       	movw	r24, r28
    1cce:	8e 55       	subi	r24, 0x5E	; 94
    1cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	80 81       	ld	r24, Z
    1cda:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr9[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr9[i]);
				i++;
			}
			i=0;
			while (arr9[i]!='\0'){
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	8e 57       	subi	r24, 0x7E	; 126
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	fc 01       	movw	r30, r24
    1cec:	e2 0f       	add	r30, r18
    1cee:	f3 1f       	adc	r31, r19
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 23       	and	r24, r24
    1cf4:	a9 f6       	brne	.-86     	; 0x1ca0 <main+0xee0>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("I LOVE YOU ");
			Lcd_Clear_Display();
    1cf6:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    1cfa:	3a cc       	rjmp	.-1932   	; 0x1570 <main+0x7b0>
			Lcd_DisplayStr("I'M WATCHING YOU ");
			Lcd_Clear_Display();
		}*/

		//else if(((12<=thumb)||(thumb<=15))&&((13<=ring)||(ring<=15))&&((10<=little)||(little<=15))&&((29<=index_F)||(index_F<=32))&&((30<=middle)||(middle<=32)))
		else if((thumb<22)&&(ring<22)&&(little<22)&&(index_F>22)&&(middle>22))
    1cfc:	80 91 73 01 	lds	r24, 0x0173
    1d00:	86 31       	cpi	r24, 0x16	; 22
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <main+0xf46>
    1d04:	35 cc       	rjmp	.-1942   	; 0x1570 <main+0x7b0>
    1d06:	80 91 72 01 	lds	r24, 0x0172
    1d0a:	86 31       	cpi	r24, 0x16	; 22
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <main+0xf50>
    1d0e:	30 cc       	rjmp	.-1952   	; 0x1570 <main+0x7b0>
    1d10:	80 91 70 01 	lds	r24, 0x0170
    1d14:	86 31       	cpi	r24, 0x16	; 22
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <main+0xf5a>
    1d18:	2b cc       	rjmp	.-1962   	; 0x1570 <main+0x7b0>
    1d1a:	80 91 71 01 	lds	r24, 0x0171
    1d1e:	87 31       	cpi	r24, 0x17	; 23
    1d20:	08 f4       	brcc	.+2      	; 0x1d24 <main+0xf64>
    1d22:	26 cc       	rjmp	.-1972   	; 0x1570 <main+0x7b0>
    1d24:	80 91 6f 01 	lds	r24, 0x016F
    1d28:	87 31       	cpi	r24, 0x17	; 23
    1d2a:	08 f4       	brcc	.+2      	; 0x1d2e <main+0xf6e>
    1d2c:	21 cc       	rjmp	.-1982   	; 0x1570 <main+0x7b0>
		//else if((thumb==bent)&&(index_F==flat)&&(middle==flat)&&(ring==bent)&&(little==bent))
		{
			//arr10[16]="VICTORY! ";
			i=0;
    1d2e:	19 82       	std	Y+1, r1	; 0x01
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <main+0xf9a>
			while (arr10[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr10[i]);
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	48 2f       	mov	r20, r24
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	ce 01       	movw	r24, r28
    1d40:	8e 56       	subi	r24, 0x6E	; 110
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	fc 01       	movw	r30, r24
    1d46:	e2 0f       	add	r30, r18
    1d48:	f3 1f       	adc	r31, r19
    1d4a:	20 81       	ld	r18, Z
    1d4c:	ca 01       	movw	r24, r20
    1d4e:	62 2f       	mov	r22, r18
    1d50:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
				i++;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	8f 5f       	subi	r24, 0xFF	; 255
    1d58:	89 83       	std	Y+1, r24	; 0x01
		else if((thumb<22)&&(ring<22)&&(little<22)&&(index_F>22)&&(middle>22))
		//else if((thumb==bent)&&(index_F==flat)&&(middle==flat)&&(ring==bent)&&(little==bent))
		{
			//arr10[16]="VICTORY! ";
			i=0;
			while (arr10[i]!='\0'){
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	ce 01       	movw	r24, r28
    1d62:	8e 56       	subi	r24, 0x6E	; 110
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	fc 01       	movw	r30, r24
    1d68:	e2 0f       	add	r30, r18
    1d6a:	f3 1f       	adc	r31, r19
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	01 f7       	brne	.-64     	; 0x1d32 <main+0xf72>
				Eeprom24C16_WriteByte(i,arr10[i]);
				i++;
			}
			i=0;
    1d72:	19 82       	std	Y+1, r1	; 0x01
    1d74:	1f c0       	rjmp	.+62     	; 0x1db4 <main+0xff4>
			while (arr10[i]!='\0'){
				ptr[i]=Eeprom24c16_ReadByte(i);
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	08 2f       	mov	r16, r24
    1d7a:	10 e0       	ldi	r17, 0x00	; 0
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 de 14 	call	0x29bc	; 0x29bc <Eeprom24c16_ReadByte>
    1d86:	28 2f       	mov	r18, r24
    1d88:	ce 01       	movw	r24, r28
    1d8a:	8e 55       	subi	r24, 0x5E	; 94
    1d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e0 0f       	add	r30, r16
    1d92:	f1 1f       	adc	r31, r17
    1d94:	20 83       	st	Z, r18
				i++;
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	89 83       	std	Y+1, r24	; 0x01
				Lcd_DisplayChr(ptr[i]);
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	ce 01       	movw	r24, r28
    1da4:	8e 55       	subi	r24, 0x5E	; 94
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	fc 01       	movw	r30, r24
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	80 81       	ld	r24, Z
    1db0:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
			while (arr10[i]!='\0'){
				Eeprom24C16_WriteByte(i,arr10[i]);
				i++;
			}
			i=0;
			while (arr10[i]!='\0'){
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	ce 01       	movw	r24, r28
    1dbc:	8e 56       	subi	r24, 0x6E	; 110
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e2 0f       	add	r30, r18
    1dc4:	f3 1f       	adc	r31, r19
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 23       	and	r24, r24
    1dca:	a9 f6       	brne	.-86     	; 0x1d76 <main+0xfb6>
				ptr[i]=Eeprom24c16_ReadByte(i);
				i++;
				Lcd_DisplayChr(ptr[i]);
			}
			//Lcd_DisplayStr("VICTORY! ");
			Lcd_Clear_Display();
    1dcc:	0e 94 a0 14 	call	0x2940	; 0x2940 <Lcd_Clear_Display>
    1dd0:	cf cb       	rjmp	.-2146   	; 0x1570 <main+0x7b0>

00001dd2 <LED_Init>:


#include "Led.h"

void LED_Init(void)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT,LED0_PIN,OUTPUT);
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	62 e0       	ldi	r22, 0x02	; 2
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>
	Dio_ConfigChannel(LED1_PORT,LED1_PIN,OUTPUT);
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	67 e0       	ldi	r22, 0x07	; 7
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>
	Dio_ConfigChannel(LED2_PORT,LED2_PIN,OUTPUT);
    1dee:	83 e0       	ldi	r24, 0x03	; 3
    1df0:	63 e0       	ldi	r22, 0x03	; 3
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <LED_ON>:

void LED_ON(Led_Type ledID)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <LED_ON+0x6>
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	3b 83       	std	Y+3, r19	; 0x03
    1e14:	2a 83       	std	Y+2, r18	; 0x02
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	79 f0       	breq	.+30     	; 0x1e3e <LED_ON+0x40>
    1e20:	2a 81       	ldd	r18, Y+2	; 0x02
    1e22:	3b 81       	ldd	r19, Y+3	; 0x03
    1e24:	22 30       	cpi	r18, 0x02	; 2
    1e26:	31 05       	cpc	r19, r1
    1e28:	81 f0       	breq	.+32     	; 0x1e4a <LED_ON+0x4c>
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	89 f4       	brne	.+34     	; 0x1e54 <LED_ON+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_HIGH);
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	62 e0       	ldi	r22, 0x02	; 2
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
    1e3c:	0b c0       	rjmp	.+22     	; 0x1e54 <LED_ON+0x56>
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_HIGH);
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	67 e0       	ldi	r22, 0x07	; 7
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
    1e48:	05 c0       	rjmp	.+10     	; 0x1e54 <LED_ON+0x56>
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_HIGH);
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	63 e0       	ldi	r22, 0x03	; 3
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
		break;

	}
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <LED_OFF>:

void LED_OFF(Led_Type ledID)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <LED_OFF+0x6>
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	3b 83       	std	Y+3, r19	; 0x03
    1e76:	2a 83       	std	Y+2, r18	; 0x02
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	79 f0       	breq	.+30     	; 0x1ea0 <LED_OFF+0x40>
    1e82:	2a 81       	ldd	r18, Y+2	; 0x02
    1e84:	3b 81       	ldd	r19, Y+3	; 0x03
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	31 05       	cpc	r19, r1
    1e8a:	81 f0       	breq	.+32     	; 0x1eac <LED_OFF+0x4c>
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	89 f4       	brne	.+34     	; 0x1eb6 <LED_OFF+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_LOW);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	62 e0       	ldi	r22, 0x02	; 2
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
    1e9e:	0b c0       	rjmp	.+22     	; 0x1eb6 <LED_OFF+0x56>
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_LOW);
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	67 e0       	ldi	r22, 0x07	; 7
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
    1eaa:	05 c0       	rjmp	.+10     	; 0x1eb6 <LED_OFF+0x56>
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_LOW);
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	63 e0       	ldi	r22, 0x03	; 3
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
		break;

	}
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <LED_TOGGLE>:

void LED_TOGGLE(Led_Type ledID)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <LED_TOGGLE+0x6>
    1ec8:	0f 92       	push	r0
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	3b 83       	std	Y+3, r19	; 0x03
    1ed8:	2a 83       	std	Y+2, r18	; 0x02
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	71 f0       	breq	.+28     	; 0x1f00 <LED_TOGGLE+0x3e>
    1ee4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	71 f0       	breq	.+28     	; 0x1f0a <LED_TOGGLE+0x48>
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	71 f4       	brne	.+28     	; 0x1f12 <LED_TOGGLE+0x50>
	{
	case LED0:
		Dio_ToggleChannel(LED0_PORT,LED0_PIN);
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	62 e0       	ldi	r22, 0x02	; 2
    1efa:	0e 94 95 1a 	call	0x352a	; 0x352a <Dio_ToggleChannel>
    1efe:	09 c0       	rjmp	.+18     	; 0x1f12 <LED_TOGGLE+0x50>
		break;

	case LED1:
		Dio_ToggleChannel(LED1_PORT,LED1_PIN);
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	67 e0       	ldi	r22, 0x07	; 7
    1f04:	0e 94 95 1a 	call	0x352a	; 0x352a <Dio_ToggleChannel>
    1f08:	04 c0       	rjmp	.+8      	; 0x1f12 <LED_TOGGLE+0x50>
		break;

	case LED2:
		Dio_ToggleChannel(LED2_PORT,LED2_PIN);
    1f0a:	83 e0       	ldi	r24, 0x03	; 3
    1f0c:	63 e0       	ldi	r22, 0x03	; 3
    1f0e:	0e 94 95 1a 	call	0x352a	; 0x352a <Dio_ToggleChannel>
		break;

	}
}
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <Lcd_WriteCustom>:

#include"LCD.h"
extern u8 customChar[NO_CUSTOM_CHAR][NO_CUSTOM_CHAR_BYTES];

static void Lcd_WriteCustom(void)  //LOADS CUSTOM CHRCTERS IN CGRAM
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <Lcd_WriteCustom+0x6>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    1f28:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndex=0;
    1f2a:	19 82       	std	Y+1, r1	; 0x01
	for(loc_CharIndex=0;loc_CharIndex<NO_CUSTOM_CHAR;loc_CharIndex++)
    1f2c:	19 82       	std	Y+1, r1	; 0x01
    1f2e:	2c c0       	rjmp	.+88     	; 0x1f88 <Lcd_WriteCustom+0x6a>
	{
		Lcd_Cmd( _LCD_CGRAM_START_ADDRESS+(loc_CharIndex*8));
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	88 2f       	mov	r24, r24
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	08 96       	adiw	r24, 0x08	; 8
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0e 94 2d 13 	call	0x265a	; 0x265a <Lcd_Cmd>
		for (loc_ByteIndex=0;loc_ByteIndex<NO_CUSTOM_CHAR_BYTES;loc_ByteIndex++)
    1f48:	1a 82       	std	Y+2, r1	; 0x02
    1f4a:	18 c0       	rjmp	.+48     	; 0x1f7c <Lcd_WriteCustom+0x5e>
		{
			Lcd_DisplayChr(customChar[loc_CharIndex][loc_ByteIndex]);
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	48 2f       	mov	r20, r24
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	ca 01       	movw	r24, r20
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	82 0f       	add	r24, r18
    1f68:	93 1f       	adc	r25, r19
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e7 5f       	subi	r30, 0xF7	; 247
    1f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f70:	80 81       	ld	r24, Z
    1f72:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndex=0;
	for(loc_CharIndex=0;loc_CharIndex<NO_CUSTOM_CHAR;loc_CharIndex++)
	{
		Lcd_Cmd( _LCD_CGRAM_START_ADDRESS+(loc_CharIndex*8));
		for (loc_ByteIndex=0;loc_ByteIndex<NO_CUSTOM_CHAR_BYTES;loc_ByteIndex++)
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	8f 5f       	subi	r24, 0xFF	; 255
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	88 30       	cpi	r24, 0x08	; 8
    1f80:	28 f3       	brcs	.-54     	; 0x1f4c <Lcd_WriteCustom+0x2e>

static void Lcd_WriteCustom(void)  //LOADS CUSTOM CHRCTERS IN CGRAM
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndex=0;
	for(loc_CharIndex=0;loc_CharIndex<NO_CUSTOM_CHAR;loc_CharIndex++)
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	8f 5f       	subi	r24, 0xFF	; 255
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	88 30       	cpi	r24, 0x08	; 8
    1f8c:	88 f2       	brcs	.-94     	; 0x1f30 <Lcd_WriteCustom+0x12>
			// WILL NOT DiSPLAY THE CHARACTER SINCE IT IS NOT YET SAVED IN THE DDRAM BUT SVED IN THE CGRAM
			//AND WE COULD HAVE USED Lcd_Data instead
			// WORKS AS Lcd_Data BECAUSE IT CALLS IT IMPLICITLY
		}
	}
}// WILL DiSPLAY THE CHARACTER SINCE IT IS NOW YET SAVED IN THE CGRAM WHEN THE Lcd_DisplayChr IS CLLED ON THE MAIN
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <Lcd_Init>:

void Lcd_Init(void)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	e4 97       	sbiw	r28, 0x34	; 52
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
	// Configure data lines as output
	Dio_ConfigChannel(LCD_PORT_Dataln,LCD_PIN_Dataln0,OUTPUT);
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>
	Dio_ConfigChannel(LCD_PORT_Dataln,LCD_PIN_Dataln1,OUTPUT);
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>
	Dio_ConfigChannel(LCD_PORT_Dataln,LCD_PIN_Dataln2,OUTPUT);
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	62 e0       	ldi	r22, 0x02	; 2
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>
	Dio_ConfigChannel(LCD_PORT_Dataln,LCD_PIN_Dataln3,OUTPUT);
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	63 e0       	ldi	r22, 0x03	; 3
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>

	//Configure control lines as output
	Dio_ConfigChannel(LCD_PORT_Controlln,LCD_PIN_RS,OUTPUT);
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	61 e0       	ldi	r22, 0x01	; 1
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>
	Dio_ConfigChannel(LCD_PORT_Controlln,LCD_PIN_RW,OUTPUT);
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	62 e0       	ldi	r22, 0x02	; 2
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>
	Dio_ConfigChannel(LCD_PORT_Controlln,LCD_PIN_EN,OUTPUT);
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	63 e0       	ldi	r22, 0x03	; 3
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>

	Dio_WriteChannel (LCD_PORT_Controlln,LCD_PIN_RW,STD_LOW); //Write on LCD
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	62 e0       	ldi	r22, 0x02	; 2
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 e7       	ldi	r26, 0x70	; 112
    2002:	b1 e4       	ldi	r27, 0x41	; 65
    2004:	89 ab       	std	Y+49, r24	; 0x31
    2006:	9a ab       	std	Y+50, r25	; 0x32
    2008:	ab ab       	std	Y+51, r26	; 0x33
    200a:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	69 a9       	ldd	r22, Y+49	; 0x31
    200e:	7a a9       	ldd	r23, Y+50	; 0x32
    2010:	8b a9       	ldd	r24, Y+51	; 0x33
    2012:	9c a9       	ldd	r25, Y+52	; 0x34
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a e7       	ldi	r20, 0x7A	; 122
    201a:	55 e4       	ldi	r21, 0x45	; 69
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8d a7       	std	Y+45, r24	; 0x2d
    2026:	9e a7       	std	Y+46, r25	; 0x2e
    2028:	af a7       	std	Y+47, r26	; 0x2f
    202a:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    202c:	6d a5       	ldd	r22, Y+45	; 0x2d
    202e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2030:	8f a5       	ldd	r24, Y+47	; 0x2f
    2032:	98 a9       	ldd	r25, Y+48	; 0x30
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <Lcd_Init+0xb6>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9c a7       	std	Y+44, r25	; 0x2c
    204a:	8b a7       	std	Y+43, r24	; 0x2b
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <Lcd_Init+0x134>
	else if (__tmp > 65535)
    204e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2050:	7e a5       	ldd	r23, Y+46	; 0x2e
    2052:	8f a5       	ldd	r24, Y+47	; 0x2f
    2054:	98 a9       	ldd	r25, Y+48	; 0x30
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <Lcd_Init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	69 a9       	ldd	r22, Y+49	; 0x31
    2068:	7a a9       	ldd	r23, Y+50	; 0x32
    206a:	8b a9       	ldd	r24, Y+51	; 0x33
    206c:	9c a9       	ldd	r25, Y+52	; 0x34
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9c a7       	std	Y+44, r25	; 0x2c
    208c:	8b a7       	std	Y+43, r24	; 0x2b
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <Lcd_Init+0x116>
    2090:	80 e9       	ldi	r24, 0x90	; 144
    2092:	91 e0       	ldi	r25, 0x01	; 1
    2094:	9a a7       	std	Y+42, r25	; 0x2a
    2096:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2098:	89 a5       	ldd	r24, Y+41	; 0x29
    209a:	9a a5       	ldd	r25, Y+42	; 0x2a
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <Lcd_Init+0x104>
    20a0:	9a a7       	std	Y+42, r25	; 0x2a
    20a2:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9c a7       	std	Y+44, r25	; 0x2c
    20ac:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <Lcd_Init+0xf8>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <Lcd_Init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    20ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    20bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20be:	98 a9       	ldd	r25, Y+48	; 0x30
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9c a7       	std	Y+44, r25	; 0x2c
    20ca:	8b a7       	std	Y+43, r24	; 0x2b
    20cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    20d0:	98 a7       	std	Y+40, r25	; 0x28
    20d2:	8f a3       	std	Y+39, r24	; 0x27
    20d4:	8f a1       	ldd	r24, Y+39	; 0x27
    20d6:	98 a5       	ldd	r25, Y+40	; 0x28
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <Lcd_Init+0x140>
    20dc:	98 a7       	std	Y+40, r25	; 0x28
    20de:	8f a3       	std	Y+39, r24	; 0x27

	//From Datasheet initialization function
	_delay_ms(15);
	Lcd_Cmd(3);//set interface to 8 bits
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	0e 94 2d 13 	call	0x265a	; 0x265a <Lcd_Cmd>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 ea       	ldi	r26, 0xA0	; 160
    20ec:	b0 e4       	ldi	r27, 0x40	; 64
    20ee:	8b a3       	std	Y+35, r24	; 0x23
    20f0:	9c a3       	std	Y+36, r25	; 0x24
    20f2:	ad a3       	std	Y+37, r26	; 0x25
    20f4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f6:	6b a1       	ldd	r22, Y+35	; 0x23
    20f8:	7c a1       	ldd	r23, Y+36	; 0x24
    20fa:	8d a1       	ldd	r24, Y+37	; 0x25
    20fc:	9e a1       	ldd	r25, Y+38	; 0x26
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a e7       	ldi	r20, 0x7A	; 122
    2104:	55 e4       	ldi	r21, 0x45	; 69
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	8f 8f       	std	Y+31, r24	; 0x1f
    2110:	98 a3       	std	Y+32, r25	; 0x20
    2112:	a9 a3       	std	Y+33, r26	; 0x21
    2114:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2116:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2118:	78 a1       	ldd	r23, Y+32	; 0x20
    211a:	89 a1       	ldd	r24, Y+33	; 0x21
    211c:	9a a1       	ldd	r25, Y+34	; 0x22
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	2c f4       	brge	.+10     	; 0x2138 <Lcd_Init+0x1a0>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9e 8f       	std	Y+30, r25	; 0x1e
    2134:	8d 8f       	std	Y+29, r24	; 0x1d
    2136:	3f c0       	rjmp	.+126    	; 0x21b6 <Lcd_Init+0x21e>
	else if (__tmp > 65535)
    2138:	6f 8d       	ldd	r22, Y+31	; 0x1f
    213a:	78 a1       	ldd	r23, Y+32	; 0x20
    213c:	89 a1       	ldd	r24, Y+33	; 0x21
    213e:	9a a1       	ldd	r25, Y+34	; 0x22
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    214c:	18 16       	cp	r1, r24
    214e:	4c f5       	brge	.+82     	; 0x21a2 <Lcd_Init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2150:	6b a1       	ldd	r22, Y+35	; 0x23
    2152:	7c a1       	ldd	r23, Y+36	; 0x24
    2154:	8d a1       	ldd	r24, Y+37	; 0x25
    2156:	9e a1       	ldd	r25, Y+38	; 0x26
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9e 8f       	std	Y+30, r25	; 0x1e
    2176:	8d 8f       	std	Y+29, r24	; 0x1d
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <Lcd_Init+0x200>
    217a:	80 e9       	ldi	r24, 0x90	; 144
    217c:	91 e0       	ldi	r25, 0x01	; 1
    217e:	9c 8f       	std	Y+28, r25	; 0x1c
    2180:	8b 8f       	std	Y+27, r24	; 0x1b
    2182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <Lcd_Init+0x1ee>
    218a:	9c 8f       	std	Y+28, r25	; 0x1c
    218c:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2190:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	9e 8f       	std	Y+30, r25	; 0x1e
    2196:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2198:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	69 f7       	brne	.-38     	; 0x217a <Lcd_Init+0x1e2>
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <Lcd_Init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21a4:	78 a1       	ldd	r23, Y+32	; 0x20
    21a6:	89 a1       	ldd	r24, Y+33	; 0x21
    21a8:	9a a1       	ldd	r25, Y+34	; 0x22
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9e 8f       	std	Y+30, r25	; 0x1e
    21b4:	8d 8f       	std	Y+29, r24	; 0x1d
    21b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ba:	9a 8f       	std	Y+26, r25	; 0x1a
    21bc:	89 8f       	std	Y+25, r24	; 0x19
    21be:	89 8d       	ldd	r24, Y+25	; 0x19
    21c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <Lcd_Init+0x22a>
    21c6:	9a 8f       	std	Y+26, r25	; 0x1a
    21c8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_Cmd(3);
    21ca:	83 e0       	ldi	r24, 0x03	; 3
    21cc:	0e 94 2d 13 	call	0x265a	; 0x265a <Lcd_Cmd>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a8 ec       	ldi	r26, 0xC8	; 200
    21d6:	b2 e4       	ldi	r27, 0x42	; 66
    21d8:	8d 8b       	std	Y+21, r24	; 0x15
    21da:	9e 8b       	std	Y+22, r25	; 0x16
    21dc:	af 8b       	std	Y+23, r26	; 0x17
    21de:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21e0:	6d 89       	ldd	r22, Y+21	; 0x15
    21e2:	7e 89       	ldd	r23, Y+22	; 0x16
    21e4:	8f 89       	ldd	r24, Y+23	; 0x17
    21e6:	98 8d       	ldd	r25, Y+24	; 0x18
    21e8:	2b ea       	ldi	r18, 0xAB	; 171
    21ea:	3a ea       	ldi	r19, 0xAA	; 170
    21ec:	4a ea       	ldi	r20, 0xAA	; 170
    21ee:	50 e4       	ldi	r21, 0x40	; 64
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	89 8b       	std	Y+17, r24	; 0x11
    21fa:	9a 8b       	std	Y+18, r25	; 0x12
    21fc:	ab 8b       	std	Y+19, r26	; 0x13
    21fe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2200:	69 89       	ldd	r22, Y+17	; 0x11
    2202:	7a 89       	ldd	r23, Y+18	; 0x12
    2204:	8b 89       	ldd	r24, Y+19	; 0x13
    2206:	9c 89       	ldd	r25, Y+20	; 0x14
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	1c f4       	brge	.+6      	; 0x221e <Lcd_Init+0x286>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	88 8b       	std	Y+16, r24	; 0x10
    221c:	91 c0       	rjmp	.+290    	; 0x2340 <Lcd_Init+0x3a8>
	else if (__tmp > 255)
    221e:	69 89       	ldd	r22, Y+17	; 0x11
    2220:	7a 89       	ldd	r23, Y+18	; 0x12
    2222:	8b 89       	ldd	r24, Y+19	; 0x13
    2224:	9c 89       	ldd	r25, Y+20	; 0x14
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	53 e4       	ldi	r21, 0x43	; 67
    222e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	0c f0       	brlt	.+2      	; 0x2238 <Lcd_Init+0x2a0>
    2236:	7b c0       	rjmp	.+246    	; 0x232e <Lcd_Init+0x396>
	{
		_delay_ms(__us / 1000.0);
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a e7       	ldi	r20, 0x7A	; 122
    2246:	54 e4       	ldi	r21, 0x44	; 68
    2248:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8c 87       	std	Y+12, r24	; 0x0c
    2252:	9d 87       	std	Y+13, r25	; 0x0d
    2254:	ae 87       	std	Y+14, r26	; 0x0e
    2256:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2258:	6c 85       	ldd	r22, Y+12	; 0x0c
    225a:	7d 85       	ldd	r23, Y+13	; 0x0d
    225c:	8e 85       	ldd	r24, Y+14	; 0x0e
    225e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	4a e7       	ldi	r20, 0x7A	; 122
    2266:	55 e4       	ldi	r21, 0x45	; 69
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	88 87       	std	Y+8, r24	; 0x08
    2272:	99 87       	std	Y+9, r25	; 0x09
    2274:	aa 87       	std	Y+10, r26	; 0x0a
    2276:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2278:	68 85       	ldd	r22, Y+8	; 0x08
    227a:	79 85       	ldd	r23, Y+9	; 0x09
    227c:	8a 85       	ldd	r24, Y+10	; 0x0a
    227e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e8       	ldi	r20, 0x80	; 128
    2286:	5f e3       	ldi	r21, 0x3F	; 63
    2288:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    228c:	88 23       	and	r24, r24
    228e:	2c f4       	brge	.+10     	; 0x229a <Lcd_Init+0x302>
		__ticks = 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9f 83       	std	Y+7, r25	; 0x07
    2296:	8e 83       	std	Y+6, r24	; 0x06
    2298:	3f c0       	rjmp	.+126    	; 0x2318 <Lcd_Init+0x380>
	else if (__tmp > 65535)
    229a:	68 85       	ldd	r22, Y+8	; 0x08
    229c:	79 85       	ldd	r23, Y+9	; 0x09
    229e:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	3f ef       	ldi	r19, 0xFF	; 255
    22a6:	4f e7       	ldi	r20, 0x7F	; 127
    22a8:	57 e4       	ldi	r21, 0x47	; 71
    22aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ae:	18 16       	cp	r1, r24
    22b0:	4c f5       	brge	.+82     	; 0x2304 <Lcd_Init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    22b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    22b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e2       	ldi	r20, 0x20	; 32
    22c0:	51 e4       	ldi	r21, 0x41	; 65
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9f 83       	std	Y+7, r25	; 0x07
    22d8:	8e 83       	std	Y+6, r24	; 0x06
    22da:	0f c0       	rjmp	.+30     	; 0x22fa <Lcd_Init+0x362>
    22dc:	80 e9       	ldi	r24, 0x90	; 144
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	9d 83       	std	Y+5, r25	; 0x05
    22e2:	8c 83       	std	Y+4, r24	; 0x04
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <Lcd_Init+0x350>
    22ec:	9d 83       	std	Y+5, r25	; 0x05
    22ee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	8e 81       	ldd	r24, Y+6	; 0x06
    22f2:	9f 81       	ldd	r25, Y+7	; 0x07
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	9f 83       	std	Y+7, r25	; 0x07
    22f8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	8e 81       	ldd	r24, Y+6	; 0x06
    22fc:	9f 81       	ldd	r25, Y+7	; 0x07
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	69 f7       	brne	.-38     	; 0x22dc <Lcd_Init+0x344>
    2302:	24 c0       	rjmp	.+72     	; 0x234c <Lcd_Init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2304:	68 85       	ldd	r22, Y+8	; 0x08
    2306:	79 85       	ldd	r23, Y+9	; 0x09
    2308:	8a 85       	ldd	r24, Y+10	; 0x0a
    230a:	9b 85       	ldd	r25, Y+11	; 0x0b
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9f 83       	std	Y+7, r25	; 0x07
    2316:	8e 83       	std	Y+6, r24	; 0x06
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	9b 83       	std	Y+3, r25	; 0x03
    231e:	8a 83       	std	Y+2, r24	; 0x02
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <Lcd_Init+0x38c>
    2328:	9b 83       	std	Y+3, r25	; 0x03
    232a:	8a 83       	std	Y+2, r24	; 0x02
    232c:	0f c0       	rjmp	.+30     	; 0x234c <Lcd_Init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    232e:	69 89       	ldd	r22, Y+17	; 0x11
    2330:	7a 89       	ldd	r23, Y+18	; 0x12
    2332:	8b 89       	ldd	r24, Y+19	; 0x13
    2334:	9c 89       	ldd	r25, Y+20	; 0x14
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	88 8b       	std	Y+16, r24	; 0x10
    2340:	88 89       	ldd	r24, Y+16	; 0x10
    2342:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	8a 95       	dec	r24
    2348:	f1 f7       	brne	.-4      	; 0x2346 <Lcd_Init+0x3ae>
    234a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_Cmd(3);
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	0e 94 2d 13 	call	0x265a	; 0x265a <Lcd_Cmd>
	Lcd_Cmd(2);//set interface to 4 bits enabled
    2352:	82 e0       	ldi	r24, 0x02	; 2
    2354:	0e 94 2d 13 	call	0x265a	; 0x265a <Lcd_Cmd>

	Lcd_Cmd(_LCD_4BIT_MODE);
    2358:	88 e2       	ldi	r24, 0x28	; 40
    235a:	0e 94 2d 13 	call	0x265a	; 0x265a <Lcd_Cmd>
	Lcd_WriteCustom();
    235e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Lcd_WriteCustom>

}
    2362:	e4 96       	adiw	r28, 0x34	; 52
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <Enable_Pulse>:

//void Enable_Pulse(void); not general function but private function (static) not written in .h file
static void Enable_Pulse(void)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	a6 97       	sbiw	r28, 0x26	; 38
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel (LCD_PORT_Controlln,LCD_PIN_EN,STD_HIGH);
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	63 e0       	ldi	r22, 0x03	; 3
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e8       	ldi	r26, 0x80	; 128
    2398:	bf e3       	ldi	r27, 0x3F	; 63
    239a:	8b a3       	std	Y+35, r24	; 0x23
    239c:	9c a3       	std	Y+36, r25	; 0x24
    239e:	ad a3       	std	Y+37, r26	; 0x25
    23a0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23a2:	6b a1       	ldd	r22, Y+35	; 0x23
    23a4:	7c a1       	ldd	r23, Y+36	; 0x24
    23a6:	8d a1       	ldd	r24, Y+37	; 0x25
    23a8:	9e a1       	ldd	r25, Y+38	; 0x26
    23aa:	2b ea       	ldi	r18, 0xAB	; 171
    23ac:	3a ea       	ldi	r19, 0xAA	; 170
    23ae:	4a ea       	ldi	r20, 0xAA	; 170
    23b0:	50 e4       	ldi	r21, 0x40	; 64
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8f 8f       	std	Y+31, r24	; 0x1f
    23bc:	98 a3       	std	Y+32, r25	; 0x20
    23be:	a9 a3       	std	Y+33, r26	; 0x21
    23c0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    23c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23c4:	78 a1       	ldd	r23, Y+32	; 0x20
    23c6:	89 a1       	ldd	r24, Y+33	; 0x21
    23c8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	1c f4       	brge	.+6      	; 0x23e0 <Enable_Pulse+0x6c>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	8e 8f       	std	Y+30, r24	; 0x1e
    23de:	91 c0       	rjmp	.+290    	; 0x2502 <Enable_Pulse+0x18e>
	else if (__tmp > 255)
    23e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23e2:	78 a1       	ldd	r23, Y+32	; 0x20
    23e4:	89 a1       	ldd	r24, Y+33	; 0x21
    23e6:	9a a1       	ldd	r25, Y+34	; 0x22
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	53 e4       	ldi	r21, 0x43	; 67
    23f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	0c f0       	brlt	.+2      	; 0x23fa <Enable_Pulse+0x86>
    23f8:	7b c0       	rjmp	.+246    	; 0x24f0 <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    23fa:	6b a1       	ldd	r22, Y+35	; 0x23
    23fc:	7c a1       	ldd	r23, Y+36	; 0x24
    23fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2400:	9e a1       	ldd	r25, Y+38	; 0x26
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a e7       	ldi	r20, 0x7A	; 122
    2408:	54 e4       	ldi	r21, 0x44	; 68
    240a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8a 8f       	std	Y+26, r24	; 0x1a
    2414:	9b 8f       	std	Y+27, r25	; 0x1b
    2416:	ac 8f       	std	Y+28, r26	; 0x1c
    2418:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    241c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    241e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2420:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a e7       	ldi	r20, 0x7A	; 122
    2428:	55 e4       	ldi	r21, 0x45	; 69
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	8e 8b       	std	Y+22, r24	; 0x16
    2434:	9f 8b       	std	Y+23, r25	; 0x17
    2436:	a8 8f       	std	Y+24, r26	; 0x18
    2438:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    243a:	6e 89       	ldd	r22, Y+22	; 0x16
    243c:	7f 89       	ldd	r23, Y+23	; 0x17
    243e:	88 8d       	ldd	r24, Y+24	; 0x18
    2440:	99 8d       	ldd	r25, Y+25	; 0x19
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	5f e3       	ldi	r21, 0x3F	; 63
    244a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244e:	88 23       	and	r24, r24
    2450:	2c f4       	brge	.+10     	; 0x245c <Enable_Pulse+0xe8>
		__ticks = 1;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9d 8b       	std	Y+21, r25	; 0x15
    2458:	8c 8b       	std	Y+20, r24	; 0x14
    245a:	3f c0       	rjmp	.+126    	; 0x24da <Enable_Pulse+0x166>
	else if (__tmp > 65535)
    245c:	6e 89       	ldd	r22, Y+22	; 0x16
    245e:	7f 89       	ldd	r23, Y+23	; 0x17
    2460:	88 8d       	ldd	r24, Y+24	; 0x18
    2462:	99 8d       	ldd	r25, Y+25	; 0x19
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	4c f5       	brge	.+82     	; 0x24c6 <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2476:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2478:	8c 8d       	ldd	r24, Y+28	; 0x1c
    247a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9d 8b       	std	Y+21, r25	; 0x15
    249a:	8c 8b       	std	Y+20, r24	; 0x14
    249c:	0f c0       	rjmp	.+30     	; 0x24bc <Enable_Pulse+0x148>
    249e:	80 e9       	ldi	r24, 0x90	; 144
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	9b 8b       	std	Y+19, r25	; 0x13
    24a4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24a6:	8a 89       	ldd	r24, Y+18	; 0x12
    24a8:	9b 89       	ldd	r25, Y+19	; 0x13
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <Enable_Pulse+0x136>
    24ae:	9b 8b       	std	Y+19, r25	; 0x13
    24b0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b2:	8c 89       	ldd	r24, Y+20	; 0x14
    24b4:	9d 89       	ldd	r25, Y+21	; 0x15
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	9d 8b       	std	Y+21, r25	; 0x15
    24ba:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	8c 89       	ldd	r24, Y+20	; 0x14
    24be:	9d 89       	ldd	r25, Y+21	; 0x15
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	69 f7       	brne	.-38     	; 0x249e <Enable_Pulse+0x12a>
    24c4:	24 c0       	rjmp	.+72     	; 0x250e <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	6e 89       	ldd	r22, Y+22	; 0x16
    24c8:	7f 89       	ldd	r23, Y+23	; 0x17
    24ca:	88 8d       	ldd	r24, Y+24	; 0x18
    24cc:	99 8d       	ldd	r25, Y+25	; 0x19
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9d 8b       	std	Y+21, r25	; 0x15
    24d8:	8c 8b       	std	Y+20, r24	; 0x14
    24da:	8c 89       	ldd	r24, Y+20	; 0x14
    24dc:	9d 89       	ldd	r25, Y+21	; 0x15
    24de:	99 8b       	std	Y+17, r25	; 0x11
    24e0:	88 8b       	std	Y+16, r24	; 0x10
    24e2:	88 89       	ldd	r24, Y+16	; 0x10
    24e4:	99 89       	ldd	r25, Y+17	; 0x11
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <Enable_Pulse+0x172>
    24ea:	99 8b       	std	Y+17, r25	; 0x11
    24ec:	88 8b       	std	Y+16, r24	; 0x10
    24ee:	0f c0       	rjmp	.+30     	; 0x250e <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24f2:	78 a1       	ldd	r23, Y+32	; 0x20
    24f4:	89 a1       	ldd	r24, Y+33	; 0x21
    24f6:	9a a1       	ldd	r25, Y+34	; 0x22
    24f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	8e 8f       	std	Y+30, r24	; 0x1e
    2502:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2504:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2506:	8f 85       	ldd	r24, Y+15	; 0x0f
    2508:	8a 95       	dec	r24
    250a:	f1 f7       	brne	.-4      	; 0x2508 <Enable_Pulse+0x194>
    250c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel (LCD_PORT_Controlln,LCD_PIN_EN,STD_LOW);
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	63 e0       	ldi	r22, 0x03	; 3
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e4       	ldi	r27, 0x40	; 64
    2520:	8b 87       	std	Y+11, r24	; 0x0b
    2522:	9c 87       	std	Y+12, r25	; 0x0c
    2524:	ad 87       	std	Y+13, r26	; 0x0d
    2526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2528:	6b 85       	ldd	r22, Y+11	; 0x0b
    252a:	7c 85       	ldd	r23, Y+12	; 0x0c
    252c:	8d 85       	ldd	r24, Y+13	; 0x0d
    252e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	4a e7       	ldi	r20, 0x7A	; 122
    2536:	55 e4       	ldi	r21, 0x45	; 69
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8f 83       	std	Y+7, r24	; 0x07
    2542:	98 87       	std	Y+8, r25	; 0x08
    2544:	a9 87       	std	Y+9, r26	; 0x09
    2546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	2c f4       	brge	.+10     	; 0x256a <Enable_Pulse+0x1f6>
		__ticks = 1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	3f c0       	rjmp	.+126    	; 0x25e8 <Enable_Pulse+0x274>
	else if (__tmp > 65535)
    256a:	6f 81       	ldd	r22, Y+7	; 0x07
    256c:	78 85       	ldd	r23, Y+8	; 0x08
    256e:	89 85       	ldd	r24, Y+9	; 0x09
    2570:	9a 85       	ldd	r25, Y+10	; 0x0a
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	4c f5       	brge	.+82     	; 0x25d4 <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	6b 85       	ldd	r22, Y+11	; 0x0b
    2584:	7c 85       	ldd	r23, Y+12	; 0x0c
    2586:	8d 85       	ldd	r24, Y+13	; 0x0d
    2588:	9e 85       	ldd	r25, Y+14	; 0x0e
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e2       	ldi	r20, 0x20	; 32
    2590:	51 e4       	ldi	r21, 0x41	; 65
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <Enable_Pulse+0x256>
    25ac:	80 e9       	ldi	r24, 0x90	; 144
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <Enable_Pulse+0x244>
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	69 f7       	brne	.-38     	; 0x25ac <Enable_Pulse+0x238>
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d4:	6f 81       	ldd	r22, Y+7	; 0x07
    25d6:	78 85       	ldd	r23, Y+8	; 0x08
    25d8:	89 85       	ldd	r24, Y+9	; 0x09
    25da:	9a 85       	ldd	r25, Y+10	; 0x0a
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9e 83       	std	Y+6, r25	; 0x06
    25e6:	8d 83       	std	Y+5, r24	; 0x05
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <Enable_Pulse+0x280>
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2); //wait enough time between each character to be sent then received
}
    25fc:	a6 96       	adiw	r28, 0x26	; 38
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <Lcd_Data>:

static void Lcd_Data(u8 data) //Saved in CGROM
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <Lcd_Data+0x6>
    2614:	0f 92       	push	r0
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = data>>4; //MSB
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	82 95       	swap	r24
    2620:	8f 70       	andi	r24, 0x0F	; 15
    2622:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = data;     //LSB
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel (LCD_PORT_Controlln,LCD_PIN_RS,STD_HIGH); // Data Mode
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	61 e0       	ldi	r22, 0x01	; 1
    262c:	41 e0       	ldi	r20, 0x01	; 1
    262e:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
	Dio_WriteGroup(LCD_PORT_Dataln,LCD_Mask,High_Nibble);
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	6f e0       	ldi	r22, 0x0F	; 15
    2636:	4a 81       	ldd	r20, Y+2	; 0x02
    2638:	0e 94 12 1b 	call	0x3624	; 0x3624 <Dio_WriteGroup>
	Enable_Pulse();
    263c:	0e 94 ba 11 	call	0x2374	; 0x2374 <Enable_Pulse>

	Dio_WriteGroup(LCD_PORT_Dataln,LCD_Mask,Low_Nibble);
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	6f e0       	ldi	r22, 0x0F	; 15
    2644:	49 81       	ldd	r20, Y+1	; 0x01
    2646:	0e 94 12 1b 	call	0x3624	; 0x3624 <Dio_WriteGroup>
	Enable_Pulse();
    264a:	0e 94 ba 11 	call	0x2374	; 0x2374 <Enable_Pulse>
}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <Lcd_Cmd>:


void Lcd_Cmd(Lcd_Cmd_types cmd)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	00 d0       	rcall	.+0      	; 0x2660 <Lcd_Cmd+0x6>
    2660:	0f 92       	push	r0
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = cmd>>4; //MSB
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	82 95       	swap	r24
    266c:	8f 70       	andi	r24, 0x0F	; 15
    266e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = cmd;     //LSB
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel (LCD_PORT_Controlln,LCD_PIN_RS,STD_LOW); // Command Mode
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	61 e0       	ldi	r22, 0x01	; 1
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
	Dio_WriteGroup(LCD_PORT_Dataln,LCD_Mask,High_Nibble);
    267e:	82 e0       	ldi	r24, 0x02	; 2
    2680:	6f e0       	ldi	r22, 0x0F	; 15
    2682:	4a 81       	ldd	r20, Y+2	; 0x02
    2684:	0e 94 12 1b 	call	0x3624	; 0x3624 <Dio_WriteGroup>
	Enable_Pulse();
    2688:	0e 94 ba 11 	call	0x2374	; 0x2374 <Enable_Pulse>

	Dio_WriteGroup(LCD_PORT_Dataln,LCD_Mask,Low_Nibble);
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	6f e0       	ldi	r22, 0x0F	; 15
    2690:	49 81       	ldd	r20, Y+1	; 0x01
    2692:	0e 94 12 1b 	call	0x3624	; 0x3624 <Dio_WriteGroup>
	Enable_Pulse();
    2696:	0e 94 ba 11 	call	0x2374	; 0x2374 <Enable_Pulse>
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <Lcd_DisplayNUM>:

void Lcd_DisplayNUM(u16 num)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <Lcd_DisplayNUM+0x6>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
	if(num<1000)
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	23 e0       	ldi	r18, 0x03	; 3
    26ba:	88 3e       	cpi	r24, 0xE8	; 232
    26bc:	92 07       	cpc	r25, r18
    26be:	e8 f5       	brcc	.+122    	; 0x273a <Lcd_DisplayNUM+0x94>
	{
		Lcd_DisplayChr(' ');
    26c0:	80 e2       	ldi	r24, 0x20	; 32
    26c2:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000/100 + '0');
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ca:	28 ee       	ldi	r18, 0xE8	; 232
    26cc:	33 e0       	ldi	r19, 0x03	; 3
    26ce:	b9 01       	movw	r22, r18
    26d0:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    26d4:	24 e6       	ldi	r18, 0x64	; 100
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	b9 01       	movw	r22, r18
    26da:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    26de:	cb 01       	movw	r24, r22
    26e0:	80 5d       	subi	r24, 0xD0	; 208
    26e2:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000%100/10 + '0');
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	28 ee       	ldi	r18, 0xE8	; 232
    26ec:	33 e0       	ldi	r19, 0x03	; 3
    26ee:	b9 01       	movw	r22, r18
    26f0:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    26f4:	24 e6       	ldi	r18, 0x64	; 100
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	b9 01       	movw	r22, r18
    26fa:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    26fe:	2a e0       	ldi	r18, 0x0A	; 10
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	b9 01       	movw	r22, r18
    2704:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2708:	cb 01       	movw	r24, r22
    270a:	80 5d       	subi	r24, 0xD0	; 208
    270c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000%100%10 + '0');
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	28 ee       	ldi	r18, 0xE8	; 232
    2716:	33 e0       	ldi	r19, 0x03	; 3
    2718:	b9 01       	movw	r22, r18
    271a:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    271e:	24 e6       	ldi	r18, 0x64	; 100
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	b9 01       	movw	r22, r18
    2724:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2728:	2a e0       	ldi	r18, 0x0A	; 10
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	b9 01       	movw	r22, r18
    272e:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2732:	80 5d       	subi	r24, 0xD0	; 208
    2734:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
    2738:	ae c0       	rjmp	.+348    	; 0x2896 <Lcd_DisplayNUM+0x1f0>
	}

	else if(num<100)
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	9a 81       	ldd	r25, Y+2	; 0x02
    273e:	84 36       	cpi	r24, 0x64	; 100
    2740:	91 05       	cpc	r25, r1
    2742:	80 f5       	brcc	.+96     	; 0x27a4 <Lcd_DisplayNUM+0xfe>
	{
		Lcd_DisplayChr(' ');
    2744:	80 e2       	ldi	r24, 0x20	; 32
    2746:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(' ');
    274a:	80 e2       	ldi	r24, 0x20	; 32
    274c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000%100/10 + '0');
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	28 ee       	ldi	r18, 0xE8	; 232
    2756:	33 e0       	ldi	r19, 0x03	; 3
    2758:	b9 01       	movw	r22, r18
    275a:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    275e:	24 e6       	ldi	r18, 0x64	; 100
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	b9 01       	movw	r22, r18
    2764:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2768:	2a e0       	ldi	r18, 0x0A	; 10
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	b9 01       	movw	r22, r18
    276e:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2772:	cb 01       	movw	r24, r22
    2774:	80 5d       	subi	r24, 0xD0	; 208
    2776:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000%100%10 + '0');
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	28 ee       	ldi	r18, 0xE8	; 232
    2780:	33 e0       	ldi	r19, 0x03	; 3
    2782:	b9 01       	movw	r22, r18
    2784:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2788:	24 e6       	ldi	r18, 0x64	; 100
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	b9 01       	movw	r22, r18
    278e:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2792:	2a e0       	ldi	r18, 0x0A	; 10
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	b9 01       	movw	r22, r18
    2798:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    279c:	80 5d       	subi	r24, 0xD0	; 208
    279e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
    27a2:	79 c0       	rjmp	.+242    	; 0x2896 <Lcd_DisplayNUM+0x1f0>
	}

	else if(num<100)
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	84 36       	cpi	r24, 0x64	; 100
    27aa:	91 05       	cpc	r25, r1
    27ac:	80 f5       	brcc	.+96     	; 0x280e <Lcd_DisplayNUM+0x168>
	{
		Lcd_DisplayChr(' ');
    27ae:	80 e2       	ldi	r24, 0x20	; 32
    27b0:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(' ');
    27b4:	80 e2       	ldi	r24, 0x20	; 32
    27b6:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000%100/10 + '0');
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	28 ee       	ldi	r18, 0xE8	; 232
    27c0:	33 e0       	ldi	r19, 0x03	; 3
    27c2:	b9 01       	movw	r22, r18
    27c4:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    27c8:	24 e6       	ldi	r18, 0x64	; 100
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	b9 01       	movw	r22, r18
    27ce:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    27d2:	2a e0       	ldi	r18, 0x0A	; 10
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	b9 01       	movw	r22, r18
    27d8:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    27dc:	cb 01       	movw	r24, r22
    27de:	80 5d       	subi	r24, 0xD0	; 208
    27e0:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000%100%10 + '0');
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	28 ee       	ldi	r18, 0xE8	; 232
    27ea:	33 e0       	ldi	r19, 0x03	; 3
    27ec:	b9 01       	movw	r22, r18
    27ee:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    27f2:	24 e6       	ldi	r18, 0x64	; 100
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	b9 01       	movw	r22, r18
    27f8:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    27fc:	2a e0       	ldi	r18, 0x0A	; 10
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	b9 01       	movw	r22, r18
    2802:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2806:	80 5d       	subi	r24, 0xD0	; 208
    2808:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
    280c:	44 c0       	rjmp	.+136    	; 0x2896 <Lcd_DisplayNUM+0x1f0>
	}

	else
	{
		Lcd_DisplayChr(num/1000 + '0');
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	9a 81       	ldd	r25, Y+2	; 0x02
    2812:	28 ee       	ldi	r18, 0xE8	; 232
    2814:	33 e0       	ldi	r19, 0x03	; 3
    2816:	b9 01       	movw	r22, r18
    2818:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    281c:	cb 01       	movw	r24, r22
    281e:	80 5d       	subi	r24, 0xD0	; 208
    2820:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000/100 + '0');
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	28 ee       	ldi	r18, 0xE8	; 232
    282a:	33 e0       	ldi	r19, 0x03	; 3
    282c:	b9 01       	movw	r22, r18
    282e:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2832:	24 e6       	ldi	r18, 0x64	; 100
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	b9 01       	movw	r22, r18
    2838:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    283c:	cb 01       	movw	r24, r22
    283e:	80 5d       	subi	r24, 0xD0	; 208
    2840:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000%100/10 + '0');
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	28 ee       	ldi	r18, 0xE8	; 232
    284a:	33 e0       	ldi	r19, 0x03	; 3
    284c:	b9 01       	movw	r22, r18
    284e:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2852:	24 e6       	ldi	r18, 0x64	; 100
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	b9 01       	movw	r22, r18
    2858:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    285c:	2a e0       	ldi	r18, 0x0A	; 10
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	b9 01       	movw	r22, r18
    2862:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2866:	cb 01       	movw	r24, r22
    2868:	80 5d       	subi	r24, 0xD0	; 208
    286a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
		Lcd_DisplayChr(num%1000%100%10 + '0');
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	28 ee       	ldi	r18, 0xE8	; 232
    2874:	33 e0       	ldi	r19, 0x03	; 3
    2876:	b9 01       	movw	r22, r18
    2878:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    287c:	24 e6       	ldi	r18, 0x64	; 100
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	b9 01       	movw	r22, r18
    2882:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2886:	2a e0       	ldi	r18, 0x0A	; 10
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	b9 01       	movw	r22, r18
    288c:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2890:	80 5d       	subi	r24, 0xD0	; 208
    2892:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Lcd_DisplayChr>
	}
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	0f 92       	push	r0
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	0e 94 07 13 	call	0x260e	; 0x260e <Lcd_Data>
}
    28b2:	0f 90       	pop	r0
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	08 95       	ret

000028ba <Lcd_DisplayStr>:


void Lcd_DisplayStr(u8* str)
{
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <Lcd_DisplayStr+0x6>
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01
    28c8:	0a c0       	rjmp	.+20     	; 0x28de <Lcd_DisplayStr+0x24>
	while(*str !='\0')
	{
		Lcd_Data(*str);
    28ca:	e9 81       	ldd	r30, Y+1	; 0x01
    28cc:	fa 81       	ldd	r31, Y+2	; 0x02
    28ce:	80 81       	ld	r24, Z
    28d0:	0e 94 07 13 	call	0x260e	; 0x260e <Lcd_Data>
		str++;
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	9a 83       	std	Y+2, r25	; 0x02
    28dc:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_DisplayStr(u8* str)
{
	while(*str !='\0')
    28de:	e9 81       	ldd	r30, Y+1	; 0x01
    28e0:	fa 81       	ldd	r31, Y+2	; 0x02
    28e2:	80 81       	ld	r24, Z
    28e4:	88 23       	and	r24, r24
    28e6:	89 f7       	brne	.-30     	; 0x28ca <Lcd_DisplayStr+0x10>
	{
		Lcd_Data(*str);
		str++;
	}
}
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <Lcd_Goto_Row_Column>:


void Lcd_Goto_Row_Column(u8 row, u8 col)
{
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <Lcd_Goto_Row_Column+0x6>
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <Lcd_Goto_Row_Column+0x8>
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	3c 83       	std	Y+4, r19	; 0x04
    290a:	2b 83       	std	Y+3, r18	; 0x03
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	31 f0       	breq	.+12     	; 0x2920 <Lcd_Goto_Row_Column+0x2e>
    2914:	2b 81       	ldd	r18, Y+3	; 0x03
    2916:	3c 81       	ldd	r19, Y+4	; 0x04
    2918:	21 30       	cpi	r18, 0x01	; 1
    291a:	31 05       	cpc	r19, r1
    291c:	31 f0       	breq	.+12     	; 0x292a <Lcd_Goto_Row_Column+0x38>
    291e:	09 c0       	rjmp	.+18     	; 0x2932 <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+col); //DDRAM address
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	80 58       	subi	r24, 0x80	; 128
    2924:	0e 94 2d 13 	call	0x265a	; 0x265a <Lcd_Cmd>
    2928:	04 c0       	rjmp	.+8      	; 0x2932 <Lcd_Goto_Row_Column+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	80 54       	subi	r24, 0x40	; 64
    292e:	0e 94 2d 13 	call	0x265a	; 0x265a <Lcd_Cmd>
		break;
	}
}
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <Lcd_Clear_Display>:

void Lcd_Clear_Display(void)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
	Lcd_Cmd(_LCD_CLEAR);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	0e 94 2d 13 	call	0x265a	; 0x265a <Lcd_Cmd>
}
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <Eeprom24C16_Init>:
 */

#include "Eeprom24C16.h"

void Eeprom24C16_Init(void)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
	I2C_MasterInit();
    295c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <I2C_MasterInit>
}
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <Eeprom24C16_WriteByte>:

/*addr =0 to 2047*/
void Eeprom24C16_WriteByte(u16 addr , u8 data)
{
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	00 d0       	rcall	.+0      	; 0x296c <Eeprom24C16_WriteByte+0x6>
    296c:	00 d0       	rcall	.+0      	; 0x296e <Eeprom24C16_WriteByte+0x8>
    296e:	0f 92       	push	r0
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	9c 83       	std	Y+4, r25	; 0x04
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	6d 83       	std	Y+5, r22	; 0x05
	u8 loc_pageNo = addr/256;
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	89 2f       	mov	r24, r25
    2980:	99 27       	eor	r25, r25
    2982:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_byteNo = addr%256;
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	89 83       	std	Y+1, r24	; 0x01
	I2C_StartCondition();
    2988:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation((0xA0)|(loc_pageNo<<1));
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	88 2f       	mov	r24, r24
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	80 6a       	ori	r24, 0xA0	; 160
    2998:	0e 94 0d 18 	call	0x301a	; 0x301a <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <I2C_WriteByte>
	I2C_WriteByte(data);
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <I2C_WriteByte>
	I2C_StopCondition();
    29a8:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <I2C_StopCondition>

}
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <Eeprom24c16_ReadByte>:
u8 Eeprom24c16_ReadByte(u16 addr)
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <Eeprom24c16_ReadByte+0x6>
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <Eeprom24c16_ReadByte+0x8>
    29c4:	0f 92       	push	r0
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	9d 83       	std	Y+5, r25	; 0x05
    29cc:	8c 83       	std	Y+4, r24	; 0x04
	u8 loc_pageNo = addr/256;
    29ce:	8c 81       	ldd	r24, Y+4	; 0x04
    29d0:	9d 81       	ldd	r25, Y+5	; 0x05
    29d2:	89 2f       	mov	r24, r25
    29d4:	99 27       	eor	r25, r25
    29d6:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_byteNo = addr%256;
    29d8:	8c 81       	ldd	r24, Y+4	; 0x04
    29da:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_dataRead=0;
    29dc:	19 82       	std	Y+1, r1	; 0x01
	I2C_StartCondition();
    29de:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation((0xA0)|(loc_pageNo<<1));
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	80 6a       	ori	r24, 0xA0	; 160
    29ee:	0e 94 0d 18 	call	0x301a	; 0x301a <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <I2C_WriteByte>
	I2C_RepeatedStartCondition();
    29f8:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <I2C_RepeatedStartCondition>
	I2C_Send_SlaveAddressReadOperation((0xA0)|(loc_pageNo<<1));
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	88 2f       	mov	r24, r24
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	80 6a       	ori	r24, 0xA0	; 160
    2a08:	0e 94 2a 18 	call	0x3054	; 0x3054 <I2C_Send_SlaveAddressReadOperation>
	loc_dataRead =I2C_ReadByte();
    2a0c:	0e 94 4b 18 	call	0x3096	; 0x3096 <I2C_ReadByte>
    2a10:	89 83       	std	Y+1, r24	; 0x01
	I2C_StopCondition();
    2a12:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <I2C_StopCondition>
	return loc_dataRead;
    2a16:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <Eeprom24C16_WriteStr>:

void Eeprom24C16_WriteStr(u8* str)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <Eeprom24C16_WriteStr+0x6>
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	9a 83       	std	Y+2, r25	; 0x02
    2a34:	89 83       	std	Y+1, r24	; 0x01
    2a36:	1d c0       	rjmp	.+58     	; 0x2a72 <Eeprom24C16_WriteStr+0x4a>
	static int i = 0;
	while(str [i] !='\0')
	{
		Eeprom24C16_WriteByte(i,str [i]);
    2a38:	80 91 4a 01 	lds	r24, 0x014A
    2a3c:	90 91 4b 01 	lds	r25, 0x014B
    2a40:	ac 01       	movw	r20, r24
    2a42:	80 91 4a 01 	lds	r24, 0x014A
    2a46:	90 91 4b 01 	lds	r25, 0x014B
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	fc 01       	movw	r30, r24
    2a52:	e2 0f       	add	r30, r18
    2a54:	f3 1f       	adc	r31, r19
    2a56:	20 81       	ld	r18, Z
    2a58:	ca 01       	movw	r24, r20
    2a5a:	62 2f       	mov	r22, r18
    2a5c:	0e 94 b3 14 	call	0x2966	; 0x2966 <Eeprom24C16_WriteByte>
		//str++;
		i++;
    2a60:	80 91 4a 01 	lds	r24, 0x014A
    2a64:	90 91 4b 01 	lds	r25, 0x014B
    2a68:	01 96       	adiw	r24, 0x01	; 1
    2a6a:	90 93 4b 01 	sts	0x014B, r25
    2a6e:	80 93 4a 01 	sts	0x014A, r24
}

void Eeprom24C16_WriteStr(u8* str)
{
	static int i = 0;
	while(str [i] !='\0')
    2a72:	80 91 4a 01 	lds	r24, 0x014A
    2a76:	90 91 4b 01 	lds	r25, 0x014B
    2a7a:	9c 01       	movw	r18, r24
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a80:	fc 01       	movw	r30, r24
    2a82:	e2 0f       	add	r30, r18
    2a84:	f3 1f       	adc	r31, r19
    2a86:	80 81       	ld	r24, Z
    2a88:	88 23       	and	r24, r24
    2a8a:	b1 f6       	brne	.-84     	; 0x2a38 <Eeprom24C16_WriteStr+0x10>
	{
		Eeprom24C16_WriteByte(i,str [i]);
		//str++;
		i++;
	}
}
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <BUZZER_Init>:
 */

#include"buzzer.h"

void BUZZER_Init(void)
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	63 e0       	ldi	r22, 0x03	; 3
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	0e 94 cf 18 	call	0x319e	; 0x319e <Dio_ConfigChannel>
}
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <BUZZER_ON>:

void BUZZER_ON(void)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	63 e0       	ldi	r22, 0x03	; 3
    2aba:	41 e0       	ldi	r20, 0x01	; 1
    2abc:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
}
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <BUZZER_OFF>:

void BUZZER_OFF(void)
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	63 e0       	ldi	r22, 0x03	; 3
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 b2 19 	call	0x3364	; 0x3364 <Dio_WriteChannel>
}
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <BUZZER_TOGGLE>:

void BUZZER_TOGGLE(void)
{
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
	Dio_ToggleChannel(BUZZER_PORT,BUZZER_PIN);
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	63 e0       	ldi	r22, 0x03	; 3
    2aea:	0e 94 95 1a 	call	0x352a	; 0x352a <Dio_ToggleChannel>
}
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <UART_Init>:
volatile u8 uartResult = 0;
volatile u8 UART_RxBuffer[RX_BUFFER_SIZE];
volatile u8 UART_RxBuffer_Index = 0;
volatile boolean Rx_Buffer_Ready = FALSE;
void UART_Init(u16 baudRate)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <UART_Init+0x6>
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UART_UBRRH_REG = (u8)(baudRate>>8); //LSB is always (0) when baud rate is shifted right 8 Ex:for(9600)-> (0110 0111)>>8=(1100 1110)---> always zeroo
    2b02:	e0 e4       	ldi	r30, 0x40	; 64
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	89 2f       	mov	r24, r25
    2b0c:	99 27       	eor	r25, r25
    2b0e:	80 83       	st	Z, r24
	UART_UBRRL_REG = (u8)baudRate;
    2b10:	e9 e2       	ldi	r30, 0x29	; 41
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	SET_BIT(UART_UCSRB_REG,RXEN_BIT_NO);  /* Enable Receiver*/
    2b18:	aa e2       	ldi	r26, 0x2A	; 42
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	ea e2       	ldi	r30, 0x2A	; 42
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	80 61       	ori	r24, 0x10	; 16
    2b24:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG,TXEN_BIT_NO);  /* Enable Transmitter */
    2b26:	aa e2       	ldi	r26, 0x2A	; 42
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	ea e2       	ldi	r30, 0x2A	; 42
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	88 60       	ori	r24, 0x08	; 8
    2b32:	8c 93       	st	X, r24
	/* Set frame format: 8data, 1stop bit, Even Parity */
	UART_UCSRC_REG |= (1 << URSEL_BIT_NO)|UART_8_BIT_DATA | UART_EVEN_PARITY;
    2b34:	a0 e4       	ldi	r26, 0x40	; 64
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e0 e4       	ldi	r30, 0x40	; 64
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	86 6a       	ori	r24, 0xA6	; 166
    2b40:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG,7); /*	Enable Rx Complete Interrupt	*/
    2b42:	aa e2       	ldi	r26, 0x2A	; 42
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	ea e2       	ldi	r30, 0x2A	; 42
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	80 68       	ori	r24, 0x80	; 128
    2b4e:	8c 93       	st	X, r24
}
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <UART_TransmitChr>:

void UART_TransmitChr(u8 data)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	0f 92       	push	r0
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (!(CHK_BIT(UART_UCSRA_REG,UDRE_BIT_NO)))
    2b66:	eb e2       	ldi	r30, 0x2B	; 43
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	82 95       	swap	r24
    2b6e:	86 95       	lsr	r24
    2b70:	87 70       	andi	r24, 0x07	; 7
    2b72:	88 2f       	mov	r24, r24
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	81 70       	andi	r24, 0x01	; 1
    2b78:	90 70       	andi	r25, 0x00	; 0
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	a1 f3       	breq	.-24     	; 0x2b66 <UART_TransmitChr+0xc>
			;
	/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    2b7e:	ec e2       	ldi	r30, 0x2C	; 44
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	80 83       	st	Z, r24
}
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <UART_TransmitStr>:

void UART_TransmitStr(u8 *str)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <UART_TransmitStr+0x6>
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	0a c0       	rjmp	.+20     	; 0x2bb2 <UART_TransmitStr+0x24>
	/* Wait for empty transmit buffer */
	while (*str != '\0')
	{
		UART_TransmitChr(*str);
    2b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba2:	80 81       	ld	r24, Z
    2ba4:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <UART_TransmitChr>
		str++;
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bac:	01 96       	adiw	r24, 0x01	; 1
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01
}

void UART_TransmitStr(u8 *str)
{
	/* Wait for empty transmit buffer */
	while (*str != '\0')
    2bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb6:	80 81       	ld	r24, Z
    2bb8:	88 23       	and	r24, r24
    2bba:	89 f7       	brne	.-30     	; 0x2b9e <UART_TransmitStr+0x10>
	{
		UART_TransmitChr(*str);
		str++;
	}
}
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <UART_TransmitNum>:

void UART_TransmitNum(u16 num)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <UART_TransmitNum+0x6>
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
	UART_TransmitChr(num/1000 + '0');
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	28 ee       	ldi	r18, 0xE8	; 232
    2bda:	33 e0       	ldi	r19, 0x03	; 3
    2bdc:	b9 01       	movw	r22, r18
    2bde:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2be2:	cb 01       	movw	r24, r22
    2be4:	80 5d       	subi	r24, 0xD0	; 208
    2be6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <UART_TransmitChr>
	UART_TransmitChr(num%1000/100 + '0');
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	28 ee       	ldi	r18, 0xE8	; 232
    2bf0:	33 e0       	ldi	r19, 0x03	; 3
    2bf2:	b9 01       	movw	r22, r18
    2bf4:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2bf8:	24 e6       	ldi	r18, 0x64	; 100
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	b9 01       	movw	r22, r18
    2bfe:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2c02:	cb 01       	movw	r24, r22
    2c04:	80 5d       	subi	r24, 0xD0	; 208
    2c06:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <UART_TransmitChr>
	UART_TransmitChr(num%1000%100/10 + '0');
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	28 ee       	ldi	r18, 0xE8	; 232
    2c10:	33 e0       	ldi	r19, 0x03	; 3
    2c12:	b9 01       	movw	r22, r18
    2c14:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2c18:	24 e6       	ldi	r18, 0x64	; 100
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	b9 01       	movw	r22, r18
    2c1e:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2c22:	2a e0       	ldi	r18, 0x0A	; 10
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	b9 01       	movw	r22, r18
    2c28:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	80 5d       	subi	r24, 0xD0	; 208
    2c30:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <UART_TransmitChr>
	UART_TransmitChr(num%1000%100%10 + '0');
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	28 ee       	ldi	r18, 0xE8	; 232
    2c3a:	33 e0       	ldi	r19, 0x03	; 3
    2c3c:	b9 01       	movw	r22, r18
    2c3e:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2c42:	24 e6       	ldi	r18, 0x64	; 100
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	b9 01       	movw	r22, r18
    2c48:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2c4c:	2a e0       	ldi	r18, 0x0A	; 10
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	b9 01       	movw	r22, r18
    2c52:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__udivmodhi4>
    2c56:	80 5d       	subi	r24, 0xD0	; 208
    2c58:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <UART_TransmitChr>
}
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <UART_ReceiveChr>:
//	/* Get and return received data from buffer */
//	return UART_UDR_REG;
//}

u8 UART_ReceiveChr(void)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	0f 92       	push	r0
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	if ((CHK_BIT(UART_UCSRA_REG,RXC_BIT_NO)))
    2c70:	eb e2       	ldi	r30, 0x2B	; 43
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	88 23       	and	r24, r24
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <UART_ReceiveChr+0x1e>
	{
		return UART_UDR_REG;
    2c7a:	ec e2       	ldi	r30, 0x2C	; 44
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	01 c0       	rjmp	.+2      	; 0x2c86 <UART_ReceiveChr+0x20>
	}
	else
	{
		return 0;
    2c84:	19 82       	std	Y+1, r1	; 0x01
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
	}
	/* Get and return received data from buffer */

}
    2c88:	0f 90       	pop	r0
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <__vector_13>:
ISR(USART_RXC_vect)
{
    2c90:	1f 92       	push	r1
    2c92:	0f 92       	push	r0
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	0f 92       	push	r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	ef 93       	push	r30
    2cb0:	ff 93       	push	r31
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	UART_RxBuffer[UART_RxBuffer_Index] = UART_UDR_REG;
    2cba:	80 91 4d 01 	lds	r24, 0x014D
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	ec e2       	ldi	r30, 0x2C	; 44
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	20 81       	ld	r18, Z
    2cc8:	fc 01       	movw	r30, r24
    2cca:	ec 58       	subi	r30, 0x8C	; 140
    2ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cce:	20 83       	st	Z, r18
	if (UART_RxBuffer[UART_RxBuffer_Index] == '\r') // \r -> enter
    2cd0:	80 91 4d 01 	lds	r24, 0x014D
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	fc 01       	movw	r30, r24
    2cda:	ec 58       	subi	r30, 0x8C	; 140
    2cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cde:	80 81       	ld	r24, Z
    2ce0:	8d 30       	cpi	r24, 0x0D	; 13
    2ce2:	49 f4       	brne	.+18     	; 0x2cf6 <__vector_13+0x66>
	{
		UART_RxBuffer_Index = 0;
    2ce4:	10 92 4d 01 	sts	0x014D, r1
		Rx_Buffer_Ready = TRUE;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	80 93 4e 01 	sts	0x014E, r24
		LED_TOGGLE(LED1);
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LED_TOGGLE>
    2cf4:	08 c0       	rjmp	.+16     	; 0x2d06 <__vector_13+0x76>
	}
	else
	{
		UART_RxBuffer_Index++;
    2cf6:	80 91 4d 01 	lds	r24, 0x014D
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	80 93 4d 01 	sts	0x014D, r24
		LED_TOGGLE(LED0);
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LED_TOGGLE>
	}
}
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	ff 91       	pop	r31
    2d0c:	ef 91       	pop	r30
    2d0e:	bf 91       	pop	r27
    2d10:	af 91       	pop	r26
    2d12:	9f 91       	pop	r25
    2d14:	8f 91       	pop	r24
    2d16:	7f 91       	pop	r23
    2d18:	6f 91       	pop	r22
    2d1a:	5f 91       	pop	r21
    2d1c:	4f 91       	pop	r20
    2d1e:	3f 91       	pop	r19
    2d20:	2f 91       	pop	r18
    2d22:	0f 90       	pop	r0
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	0f 90       	pop	r0
    2d28:	1f 90       	pop	r1
    2d2a:	18 95       	reti

00002d2c <GINT_Enable>:


#include "GINT.h"

void GINT_Enable(void)
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG,7);
    2d34:	af e5       	ldi	r26, 0x5F	; 95
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	ef e5       	ldi	r30, 0x5F	; 95
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	80 68       	ori	r24, 0x80	; 128
    2d40:	8c 93       	st	X, r24
}
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <GINT_Disable>:

void GINT_Disable(void)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GINT_SREG,7);
    2d50:	af e5       	ldi	r26, 0x5F	; 95
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	ef e5       	ldi	r30, 0x5F	; 95
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	8f 77       	andi	r24, 0x7F	; 127
    2d5c:	8c 93       	st	X, r24
}
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <Ext_Interrupt_Enable>:
 */

#include "Ext_Int.h"

void Ext_Interrupt_Enable(ext_int_type intID)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <Ext_Interrupt_Enable+0x6>
    2d6a:	0f 92       	push	r0
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	89 83       	std	Y+1, r24	; 0x01
	switch(intID)
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	3b 83       	std	Y+3, r19	; 0x03
    2d7a:	2a 83       	std	Y+2, r18	; 0x02
    2d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	91 05       	cpc	r25, r1
    2d84:	89 f0       	breq	.+34     	; 0x2da8 <Ext_Interrupt_Enable+0x44>
    2d86:	2a 81       	ldd	r18, Y+2	; 0x02
    2d88:	3b 81       	ldd	r19, Y+3	; 0x03
    2d8a:	22 30       	cpi	r18, 0x02	; 2
    2d8c:	31 05       	cpc	r19, r1
    2d8e:	a1 f0       	breq	.+40     	; 0x2db8 <Ext_Interrupt_Enable+0x54>
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	9b 81       	ldd	r25, Y+3	; 0x03
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	b9 f4       	brne	.+46     	; 0x2dc6 <Ext_Interrupt_Enable+0x62>
	{
	case EXT_INT0:
		SET_BIT(GICR_REG,6);
    2d98:	ab e5       	ldi	r26, 0x5B	; 91
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	eb e5       	ldi	r30, 0x5B	; 91
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	80 64       	ori	r24, 0x40	; 64
    2da4:	8c 93       	st	X, r24
    2da6:	0f c0       	rjmp	.+30     	; 0x2dc6 <Ext_Interrupt_Enable+0x62>
		break;

	case EXT_INT1:
		SET_BIT(GICR_REG,7);
    2da8:	ab e5       	ldi	r26, 0x5B	; 91
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	eb e5       	ldi	r30, 0x5B	; 91
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	80 68       	ori	r24, 0x80	; 128
    2db4:	8c 93       	st	X, r24
    2db6:	07 c0       	rjmp	.+14     	; 0x2dc6 <Ext_Interrupt_Enable+0x62>
		break;

	case EXT_INT2:
		SET_BIT(GICR_REG,5);
    2db8:	ab e5       	ldi	r26, 0x5B	; 91
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	eb e5       	ldi	r30, 0x5B	; 91
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	80 62       	ori	r24, 0x20	; 32
    2dc4:	8c 93       	st	X, r24
		break;
	}
}
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <Ext_Interrupt_Disable>:

void Ext_Interrupt_Disable(ext_int_type intID)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <Ext_Interrupt_Disable+0x6>
    2dd8:	0f 92       	push	r0
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	89 83       	std	Y+1, r24	; 0x01
	switch(intID)
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	3b 83       	std	Y+3, r19	; 0x03
    2de8:	2a 83       	std	Y+2, r18	; 0x02
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	9b 81       	ldd	r25, Y+3	; 0x03
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	91 05       	cpc	r25, r1
    2df2:	89 f0       	breq	.+34     	; 0x2e16 <Ext_Interrupt_Disable+0x44>
    2df4:	2a 81       	ldd	r18, Y+2	; 0x02
    2df6:	3b 81       	ldd	r19, Y+3	; 0x03
    2df8:	22 30       	cpi	r18, 0x02	; 2
    2dfa:	31 05       	cpc	r19, r1
    2dfc:	a1 f0       	breq	.+40     	; 0x2e26 <Ext_Interrupt_Disable+0x54>
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	9b 81       	ldd	r25, Y+3	; 0x03
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	b9 f4       	brne	.+46     	; 0x2e34 <Ext_Interrupt_Disable+0x62>
	{
	case EXT_INT0:
		CLR_BIT(GICR_REG,6);
    2e06:	ab e5       	ldi	r26, 0x5B	; 91
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	eb e5       	ldi	r30, 0x5B	; 91
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8f 7b       	andi	r24, 0xBF	; 191
    2e12:	8c 93       	st	X, r24
    2e14:	0f c0       	rjmp	.+30     	; 0x2e34 <Ext_Interrupt_Disable+0x62>
		break;

	case EXT_INT1:
		CLR_BIT(GICR_REG,7);
    2e16:	ab e5       	ldi	r26, 0x5B	; 91
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	eb e5       	ldi	r30, 0x5B	; 91
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	8f 77       	andi	r24, 0x7F	; 127
    2e22:	8c 93       	st	X, r24
    2e24:	07 c0       	rjmp	.+14     	; 0x2e34 <Ext_Interrupt_Disable+0x62>
		break;

	case EXT_INT2:
		CLR_BIT(GICR_REG,5);
    2e26:	ab e5       	ldi	r26, 0x5B	; 91
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	eb e5       	ldi	r30, 0x5B	; 91
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	8f 7d       	andi	r24, 0xDF	; 223
    2e32:	8c 93       	st	X, r24
		break;
	}
}
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <Ext_Interrupt_Sense_Control>:

void Ext_Interrupt_Sense_Control(ext_int_type intID, sense_mode mode)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	00 d0       	rcall	.+0      	; 0x2e46 <Ext_Interrupt_Sense_Control+0x6>
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <Ext_Interrupt_Sense_Control+0x8>
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	6a 83       	std	Y+2, r22	; 0x02
	switch(intID)
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	3c 83       	std	Y+4, r19	; 0x04
    2e58:	2b 83       	std	Y+3, r18	; 0x03
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5e:	81 30       	cpi	r24, 0x01	; 1
    2e60:	91 05       	cpc	r25, r1
    2e62:	91 f0       	breq	.+36     	; 0x2e88 <Ext_Interrupt_Sense_Control+0x48>
    2e64:	2b 81       	ldd	r18, Y+3	; 0x03
    2e66:	3c 81       	ldd	r19, Y+4	; 0x04
    2e68:	22 30       	cpi	r18, 0x02	; 2
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	e9 f0       	breq	.+58     	; 0x2ea8 <Ext_Interrupt_Sense_Control+0x68>
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	71 f5       	brne	.+92     	; 0x2ed2 <Ext_Interrupt_Sense_Control+0x92>
	{
	case EXT_INT0:
		MCUCR_REG |=(mode<<0);
    2e76:	a5 e5       	ldi	r26, 0x55	; 85
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e5 e5       	ldi	r30, 0x55	; 85
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	90 81       	ld	r25, Z
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	89 2b       	or	r24, r25
    2e84:	8c 93       	st	X, r24
    2e86:	25 c0       	rjmp	.+74     	; 0x2ed2 <Ext_Interrupt_Sense_Control+0x92>
		break;

	case EXT_INT1:
		MCUCR_REG |=(mode<<2);
    2e88:	a5 e5       	ldi	r26, 0x55	; 85
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e5 e5       	ldi	r30, 0x55	; 85
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	28 2f       	mov	r18, r24
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	88 2f       	mov	r24, r24
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	88 0f       	add	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	88 0f       	add	r24, r24
    2ea0:	99 1f       	adc	r25, r25
    2ea2:	82 2b       	or	r24, r18
    2ea4:	8c 93       	st	X, r24
    2ea6:	15 c0       	rjmp	.+42     	; 0x2ed2 <Ext_Interrupt_Sense_Control+0x92>
		break;

	case EXT_INT2:
		if(mode == FALLING_EDGE)
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	82 30       	cpi	r24, 0x02	; 2
    2eac:	41 f4       	brne	.+16     	; 0x2ebe <Ext_Interrupt_Sense_Control+0x7e>
		{
			CLR_BIT(MCUCSR_REG,6);
    2eae:	a4 e5       	ldi	r26, 0x54	; 84
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	e4 e5       	ldi	r30, 0x54	; 84
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	8f 7b       	andi	r24, 0xBF	; 191
    2eba:	8c 93       	st	X, r24
    2ebc:	0a c0       	rjmp	.+20     	; 0x2ed2 <Ext_Interrupt_Sense_Control+0x92>
		}
		else if(mode == RISING_EDGE)
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	83 30       	cpi	r24, 0x03	; 3
    2ec2:	39 f4       	brne	.+14     	; 0x2ed2 <Ext_Interrupt_Sense_Control+0x92>
		{
			SET_BIT(MCUCSR_REG,6);
    2ec4:	a4 e5       	ldi	r26, 0x54	; 84
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e4 e5       	ldi	r30, 0x54	; 84
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	80 64       	ori	r24, 0x40	; 64
    2ed0:	8c 93       	st	X, r24
		{
			// do nothing
		}
		break;
	}
}
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	cf 91       	pop	r28
    2edc:	df 91       	pop	r29
    2ede:	08 95       	ret

00002ee0 <I2C_MasterInit>:


#include "I2c.h"

void I2C_MasterInit(void)
{
    2ee0:	df 93       	push	r29
    2ee2:	cf 93       	push	r28
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400 KHZ */
	I2C_TWBR_REG=0x0C;
    2ee8:	e0 e2       	ldi	r30, 0x20	; 32
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	8c e0       	ldi	r24, 0x0C	; 12
    2eee:	80 83       	st	Z, r24
	/* enable I2C Module	*/
	/* enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    2ef0:	a6 e5       	ldi	r26, 0x56	; 86
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	e6 e5       	ldi	r30, 0x56	; 86
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	84 64       	ori	r24, 0x44	; 68
    2efc:	8c 93       	st	X, r24

}
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <I2C_SlaveInit>:
void I2C_SlaveInit(u8 addr)
{
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	0f 92       	push	r0
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	89 83       	std	Y+1, r24	; 0x01
	/*	enable general call response in slave mode	*/
	SET_BIT(I2C_TWAR_REG,I2C_SLAVE_RESPONSE_BIT_NO);
    2f10:	a2 e2       	ldi	r26, 0x22	; 34
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e2 e2       	ldi	r30, 0x22	; 34
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	81 60       	ori	r24, 0x01	; 1
    2f1c:	8c 93       	st	X, r24
	/* I2C Bus Slave Address	*/
	I2C_TWAR_REG |= (addr<<1);
    2f1e:	a2 e2       	ldi	r26, 0x22	; 34
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e2 e2       	ldi	r30, 0x22	; 34
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	28 2f       	mov	r18, r24
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	88 2f       	mov	r24, r24
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	82 2b       	or	r24, r18
    2f36:	8c 93       	st	X, r24
	/* enable I2C Module	*/
	/*	enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    2f38:	a6 e5       	ldi	r26, 0x56	; 86
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e6 e5       	ldi	r30, 0x56	; 86
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	84 64       	ori	r24, 0x44	; 68
    2f44:	8c 93       	st	X, r24
}
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <I2C_StartCondition>:

boolean I2C_StartCondition(void)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	0f 92       	push	r0
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG = I2C_INTERRUPT_FLAG|I2C_START_COND;
    2f58:	e6 e5       	ldi	r30, 0x56	; 86
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 ea       	ldi	r24, 0xA0	; 160
    2f5e:	80 83       	st	Z, r24
	/*	Wait until start condition sent successfully	*/
	while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    2f60:	e6 e5       	ldi	r30, 0x56	; 86
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	88 23       	and	r24, r24
    2f68:	dc f7       	brge	.-10     	; 0x2f60 <I2C_StartCondition+0x12>
	{
		/*Do Nothing */
		;
	}
	if (I2C_ReadStatus() != I2C_START_ACK)
    2f6a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <I2C_ReadStatus>
    2f6e:	88 30       	cpi	r24, 0x08	; 8
    2f70:	11 f0       	breq	.+4      	; 0x2f76 <I2C_StartCondition+0x28>
	{
		return FALSE;
    2f72:	19 82       	std	Y+1, r1	; 0x01
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <I2C_StartCondition+0x2c>
	}
	else
	{
		/*	Do Nothing	*/
	}
	return TRUE;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f7c:	0f 90       	pop	r0
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <I2C_RepeatedStartCondition>:
boolean I2C_RepeatedStartCondition(void)
{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	0f 92       	push	r0
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG|I2C_START_COND;
    2f8e:	a6 e5       	ldi	r26, 0x56	; 86
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e6 e5       	ldi	r30, 0x56	; 86
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	80 6a       	ori	r24, 0xA0	; 160
    2f9a:	8c 93       	st	X, r24
	/*	Wait until start condition sent successfully	*/
	while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    2f9c:	e6 e5       	ldi	r30, 0x56	; 86
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	88 23       	and	r24, r24
    2fa4:	dc f7       	brge	.-10     	; 0x2f9c <I2C_RepeatedStartCondition+0x18>
	{
		/*Do Nothing */
		;
	}
	if (I2C_ReadStatus() != I2C_REP_START_ACK)
    2fa6:	0e 94 61 18 	call	0x30c2	; 0x30c2 <I2C_ReadStatus>
    2faa:	80 31       	cpi	r24, 0x10	; 16
    2fac:	11 f0       	breq	.+4      	; 0x2fb2 <I2C_RepeatedStartCondition+0x2e>
	{
		return FALSE;
    2fae:	19 82       	std	Y+1, r1	; 0x01
    2fb0:	02 c0       	rjmp	.+4      	; 0x2fb6 <I2C_RepeatedStartCondition+0x32>
	}
	else
	{
		/*	Do Nothing	*/
	}
	return TRUE;
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fb8:	0f 90       	pop	r0
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <I2C_StopCondition>:
void I2C_StopCondition(void)
{
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
	/*	send stop condition	*/
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG|I2C_STOP_COND;
    2fc8:	a6 e5       	ldi	r26, 0x56	; 86
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	e6 e5       	ldi	r30, 0x56	; 86
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	80 69       	ori	r24, 0x90	; 144
    2fd4:	8c 93       	st	X, r24
	/*	Wait until start condition sent successfully	*/
	while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    2fd6:	e6 e5       	ldi	r30, 0x56	; 86
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	88 23       	and	r24, r24
    2fde:	dc f7       	brge	.-10     	; 0x2fd6 <I2C_StopCondition+0x16>
	{
		/*Do Nothing */
		;
	}

}
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <I2C_WriteByte>:
void I2C_WriteByte(u8 data)
{
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	0f 92       	push	r0
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	89 83       	std	Y+1, r24	; 0x01
	/*	Put data On I2C data Register	*/
	I2C_TWDR_REG = data;
    2ff2:	e3 e2       	ldi	r30, 0x23	; 35
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	80 83       	st	Z, r24
	/*	Send Data	*/
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG;
    2ffa:	a6 e5       	ldi	r26, 0x56	; 86
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e6 e5       	ldi	r30, 0x56	; 86
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	80 68       	ori	r24, 0x80	; 128
    3006:	8c 93       	st	X, r24
	/*	Wait until data sent successfully	*/
	while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    3008:	e6 e5       	ldi	r30, 0x56	; 86
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	88 23       	and	r24, r24
    3010:	dc f7       	brge	.-10     	; 0x3008 <I2C_WriteByte+0x22>
	{
		/*Do Nothing */
		;
	}
}
    3012:	0f 90       	pop	r0
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <I2C_Send_SlaveAddressWriteOperation>:
boolean I2C_Send_SlaveAddressWriteOperation(u8 addr)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	00 d0       	rcall	.+0      	; 0x3020 <I2C_Send_SlaveAddressWriteOperation+0x6>
    3020:	0f 92       	push	r0
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    3028:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1);
    302a:	8a 81       	ldd	r24, Y+2	; 0x02
    302c:	88 0f       	add	r24, r24
    302e:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <I2C_WriteByte>
	if (I2C_ReadStatus() != I2C_SLA_W_ACK)
    3036:	0e 94 61 18 	call	0x30c2	; 0x30c2 <I2C_ReadStatus>
    303a:	88 31       	cpi	r24, 0x18	; 24
    303c:	11 f0       	breq	.+4      	; 0x3042 <I2C_Send_SlaveAddressWriteOperation+0x28>
	{
		return FALSE;
    303e:	1b 82       	std	Y+3, r1	; 0x03
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <I2C_Send_SlaveAddressWriteOperation+0x2c>
	}
	else
	{
		/*	Do Nothing	*/
	}
	return TRUE;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	8b 83       	std	Y+3, r24	; 0x03
    3046:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	08 95       	ret

00003054 <I2C_Send_SlaveAddressReadOperation>:
boolean I2C_Send_SlaveAddressReadOperation(u8 addr)
{
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	00 d0       	rcall	.+0      	; 0x305a <I2C_Send_SlaveAddressReadOperation+0x6>
    305a:	0f 92       	push	r0
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    3062:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1)|(0x01);
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	88 2f       	mov	r24, r24
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	81 60       	ori	r24, 0x01	; 1
    3070:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <I2C_WriteByte>
	if (I2C_ReadStatus() != I2C_SLA_R_ACK)
    3078:	0e 94 61 18 	call	0x30c2	; 0x30c2 <I2C_ReadStatus>
    307c:	80 34       	cpi	r24, 0x40	; 64
    307e:	11 f0       	breq	.+4      	; 0x3084 <I2C_Send_SlaveAddressReadOperation+0x30>
	{
		return FALSE;
    3080:	1b 82       	std	Y+3, r1	; 0x03
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <I2C_Send_SlaveAddressReadOperation+0x34>
	}
	else
	{
		/*	Do Nothing	*/
	}
	return TRUE;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	8b 83       	std	Y+3, r24	; 0x03
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
}
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	cf 91       	pop	r28
    3092:	df 91       	pop	r29
    3094:	08 95       	ret

00003096 <I2C_ReadByte>:
u8 I2C_ReadByte(void)
{
    3096:	df 93       	push	r29
    3098:	cf 93       	push	r28
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG;
    309e:	a6 e5       	ldi	r26, 0x56	; 86
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e6 e5       	ldi	r30, 0x56	; 86
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	80 68       	ori	r24, 0x80	; 128
    30aa:	8c 93       	st	X, r24
	/*	Wait until data sent successfully	*/
	while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    30ac:	e6 e5       	ldi	r30, 0x56	; 86
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	88 23       	and	r24, r24
    30b4:	dc f7       	brge	.-10     	; 0x30ac <I2C_ReadByte+0x16>
	{
		/*Do Nothing */
		;
	}
	return I2C_TWDR_REG;
    30b6:	e3 e2       	ldi	r30, 0x23	; 35
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
}
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <I2C_ReadStatus>:
u8 I2C_ReadStatus(void)
{
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	0f 92       	push	r0
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
	u8 status;
	status = I2C_TWSR_REG & 0xF8;
    30cc:	e1 e2       	ldi	r30, 0x21	; 33
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	88 7f       	andi	r24, 0xF8	; 248
    30d4:	89 83       	std	Y+1, r24	; 0x01
	return status;
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30d8:	0f 90       	pop	r0
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <EEPROM_Write>:


#include "Eeprom.h"

void EEPROM_Write(u16 address,u8 data)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <EEPROM_Write+0x6>
    30e6:	0f 92       	push	r0
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	9a 83       	std	Y+2, r25	; 0x02
    30ee:	89 83       	std	Y+1, r24	; 0x01
    30f0:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(EEPROM_CR_REG & (1<<EEWE))
    30f2:	ec e3       	ldi	r30, 0x3C	; 60
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	88 2f       	mov	r24, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	82 70       	andi	r24, 0x02	; 2
    30fe:	90 70       	andi	r25, 0x00	; 0
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	b9 f7       	brne	.-18     	; 0x30f2 <EEPROM_Write+0x12>
		/*	Do Nothing	*/		;
	/* Set up address and data registers */
	EEPROM_ARL_REG = address;
    3104:	ee e3       	ldi	r30, 0x3E	; 62
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	80 83       	st	Z, r24
	EEPROM_ARH_REG = address>>8;
    310c:	ef e3       	ldi	r30, 0x3F	; 63
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	89 2f       	mov	r24, r25
    3116:	99 27       	eor	r25, r25
    3118:	80 83       	st	Z, r24
	EEPROM_DR_REG = data;
    311a:	ed e3       	ldi	r30, 0x3D	; 61
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	EEPROM_CR_REG |= (1<<EEMWE);
    3122:	ac e3       	ldi	r26, 0x3C	; 60
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	ec e3       	ldi	r30, 0x3C	; 60
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	84 60       	ori	r24, 0x04	; 4
    312e:	8c 93       	st	X, r24
	/* Start eeprom write by setting EEWE */
	EEPROM_CR_REG |= (1<<EEWE);
    3130:	ac e3       	ldi	r26, 0x3C	; 60
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	ec e3       	ldi	r30, 0x3C	; 60
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	82 60       	ori	r24, 0x02	; 2
    313c:	8c 93       	st	X, r24
}
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <EEPROM_Read>:

u8 EEPROM_Read(u16 address)
{
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	00 d0       	rcall	.+0      	; 0x3150 <EEPROM_Read+0x6>
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	9a 83       	std	Y+2, r25	; 0x02
    3156:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(EEPROM_CR_REG & (1<<EEWE))
    3158:	ec e3       	ldi	r30, 0x3C	; 60
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	88 2f       	mov	r24, r24
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	82 70       	andi	r24, 0x02	; 2
    3164:	90 70       	andi	r25, 0x00	; 0
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	b9 f7       	brne	.-18     	; 0x3158 <EEPROM_Read+0xe>
			;
	/* Set up address register */
	EEPROM_ARL_REG = address;
    316a:	ee e3       	ldi	r30, 0x3E	; 62
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	80 83       	st	Z, r24
	EEPROM_ARH_REG = address>>8;
    3172:	ef e3       	ldi	r30, 0x3F	; 63
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	9a 81       	ldd	r25, Y+2	; 0x02
    317a:	89 2f       	mov	r24, r25
    317c:	99 27       	eor	r25, r25
    317e:	80 83       	st	Z, r24
	/* Start eeprom read by writing EERE */
	EEPROM_CR_REG |= (1<<EERE);
    3180:	ac e3       	ldi	r26, 0x3C	; 60
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	ec e3       	ldi	r30, 0x3C	; 60
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	81 60       	ori	r24, 0x01	; 1
    318c:	8c 93       	st	X, r24
//	/* Return data from data register */
	return EEPROM_DR_REG;
    318e:	ed e3       	ldi	r30, 0x3D	; 61
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
}
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	08 95       	ret

0000319e <Dio_ConfigChannel>:
 */
#include "Dio.h"


void Dio_ConfigChannel (port_type port,pin_type pin,direction_type direction)
{
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	00 d0       	rcall	.+0      	; 0x31a4 <Dio_ConfigChannel+0x6>
    31a4:	00 d0       	rcall	.+0      	; 0x31a6 <Dio_ConfigChannel+0x8>
    31a6:	0f 92       	push	r0
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	6a 83       	std	Y+2, r22	; 0x02
    31b0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	28 2f       	mov	r18, r24
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	3d 83       	std	Y+5, r19	; 0x05
    31ba:	2c 83       	std	Y+4, r18	; 0x04
    31bc:	8c 81       	ldd	r24, Y+4	; 0x04
    31be:	9d 81       	ldd	r25, Y+5	; 0x05
    31c0:	81 30       	cpi	r24, 0x01	; 1
    31c2:	91 05       	cpc	r25, r1
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <Dio_ConfigChannel+0x2a>
    31c6:	43 c0       	rjmp	.+134    	; 0x324e <Dio_ConfigChannel+0xb0>
    31c8:	2c 81       	ldd	r18, Y+4	; 0x04
    31ca:	3d 81       	ldd	r19, Y+5	; 0x05
    31cc:	22 30       	cpi	r18, 0x02	; 2
    31ce:	31 05       	cpc	r19, r1
    31d0:	2c f4       	brge	.+10     	; 0x31dc <Dio_ConfigChannel+0x3e>
    31d2:	8c 81       	ldd	r24, Y+4	; 0x04
    31d4:	9d 81       	ldd	r25, Y+5	; 0x05
    31d6:	00 97       	sbiw	r24, 0x00	; 0
    31d8:	71 f0       	breq	.+28     	; 0x31f6 <Dio_ConfigChannel+0x58>
    31da:	bc c0       	rjmp	.+376    	; 0x3354 <Dio_ConfigChannel+0x1b6>
    31dc:	2c 81       	ldd	r18, Y+4	; 0x04
    31de:	3d 81       	ldd	r19, Y+5	; 0x05
    31e0:	22 30       	cpi	r18, 0x02	; 2
    31e2:	31 05       	cpc	r19, r1
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <Dio_ConfigChannel+0x4a>
    31e6:	5f c0       	rjmp	.+190    	; 0x32a6 <Dio_ConfigChannel+0x108>
    31e8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ea:	9d 81       	ldd	r25, Y+5	; 0x05
    31ec:	83 30       	cpi	r24, 0x03	; 3
    31ee:	91 05       	cpc	r25, r1
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <Dio_ConfigChannel+0x56>
    31f2:	85 c0       	rjmp	.+266    	; 0x32fe <Dio_ConfigChannel+0x160>
    31f4:	af c0       	rjmp	.+350    	; 0x3354 <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if(direction==INPUT)
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	88 23       	and	r24, r24
    31fa:	a9 f4       	brne	.+42     	; 0x3226 <Dio_ConfigChannel+0x88>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    31fc:	aa e3       	ldi	r26, 0x3A	; 58
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	ea e3       	ldi	r30, 0x3A	; 58
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	48 2f       	mov	r20, r24
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	28 2f       	mov	r18, r24
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	02 2e       	mov	r0, r18
    3214:	02 c0       	rjmp	.+4      	; 0x321a <Dio_ConfigChannel+0x7c>
    3216:	88 0f       	add	r24, r24
    3218:	99 1f       	adc	r25, r25
    321a:	0a 94       	dec	r0
    321c:	e2 f7       	brpl	.-8      	; 0x3216 <Dio_ConfigChannel+0x78>
    321e:	80 95       	com	r24
    3220:	84 23       	and	r24, r20
    3222:	8c 93       	st	X, r24
    3224:	97 c0       	rjmp	.+302    	; 0x3354 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin); // output
    3226:	aa e3       	ldi	r26, 0x3A	; 58
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	ea e3       	ldi	r30, 0x3A	; 58
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	48 2f       	mov	r20, r24
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	02 2e       	mov	r0, r18
    323e:	02 c0       	rjmp	.+4      	; 0x3244 <Dio_ConfigChannel+0xa6>
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	0a 94       	dec	r0
    3246:	e2 f7       	brpl	.-8      	; 0x3240 <Dio_ConfigChannel+0xa2>
    3248:	84 2b       	or	r24, r20
    324a:	8c 93       	st	X, r24
    324c:	83 c0       	rjmp	.+262    	; 0x3354 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(direction==INPUT)
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	88 23       	and	r24, r24
    3252:	a9 f4       	brne	.+42     	; 0x327e <Dio_ConfigChannel+0xe0>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    3254:	a7 e3       	ldi	r26, 0x37	; 55
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e7 e3       	ldi	r30, 0x37	; 55
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	48 2f       	mov	r20, r24
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	02 2e       	mov	r0, r18
    326c:	02 c0       	rjmp	.+4      	; 0x3272 <Dio_ConfigChannel+0xd4>
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	0a 94       	dec	r0
    3274:	e2 f7       	brpl	.-8      	; 0x326e <Dio_ConfigChannel+0xd0>
    3276:	80 95       	com	r24
    3278:	84 23       	and	r24, r20
    327a:	8c 93       	st	X, r24
    327c:	6b c0       	rjmp	.+214    	; 0x3354 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin); // output
    327e:	a7 e3       	ldi	r26, 0x37	; 55
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e7 e3       	ldi	r30, 0x37	; 55
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	48 2f       	mov	r20, r24
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	02 2e       	mov	r0, r18
    3296:	02 c0       	rjmp	.+4      	; 0x329c <Dio_ConfigChannel+0xfe>
    3298:	88 0f       	add	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	0a 94       	dec	r0
    329e:	e2 f7       	brpl	.-8      	; 0x3298 <Dio_ConfigChannel+0xfa>
    32a0:	84 2b       	or	r24, r20
    32a2:	8c 93       	st	X, r24
    32a4:	57 c0       	rjmp	.+174    	; 0x3354 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if(direction==INPUT)
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	88 23       	and	r24, r24
    32aa:	a9 f4       	brne	.+42     	; 0x32d6 <Dio_ConfigChannel+0x138>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    32ac:	a4 e3       	ldi	r26, 0x34	; 52
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e4 e3       	ldi	r30, 0x34	; 52
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	48 2f       	mov	r20, r24
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	02 2e       	mov	r0, r18
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <Dio_ConfigChannel+0x12c>
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	0a 94       	dec	r0
    32cc:	e2 f7       	brpl	.-8      	; 0x32c6 <Dio_ConfigChannel+0x128>
    32ce:	80 95       	com	r24
    32d0:	84 23       	and	r24, r20
    32d2:	8c 93       	st	X, r24
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin); // output
    32d6:	a4 e3       	ldi	r26, 0x34	; 52
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	e4 e3       	ldi	r30, 0x34	; 52
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	48 2f       	mov	r20, r24
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	28 2f       	mov	r18, r24
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	02 2e       	mov	r0, r18
    32ee:	02 c0       	rjmp	.+4      	; 0x32f4 <Dio_ConfigChannel+0x156>
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	0a 94       	dec	r0
    32f6:	e2 f7       	brpl	.-8      	; 0x32f0 <Dio_ConfigChannel+0x152>
    32f8:	84 2b       	or	r24, r20
    32fa:	8c 93       	st	X, r24
    32fc:	2b c0       	rjmp	.+86     	; 0x3354 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if(direction==INPUT)
    32fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3300:	88 23       	and	r24, r24
    3302:	a9 f4       	brne	.+42     	; 0x332e <Dio_ConfigChannel+0x190>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    3304:	a1 e3       	ldi	r26, 0x31	; 49
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	e1 e3       	ldi	r30, 0x31	; 49
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	48 2f       	mov	r20, r24
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	28 2f       	mov	r18, r24
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	02 2e       	mov	r0, r18
    331c:	02 c0       	rjmp	.+4      	; 0x3322 <Dio_ConfigChannel+0x184>
    331e:	88 0f       	add	r24, r24
    3320:	99 1f       	adc	r25, r25
    3322:	0a 94       	dec	r0
    3324:	e2 f7       	brpl	.-8      	; 0x331e <Dio_ConfigChannel+0x180>
    3326:	80 95       	com	r24
    3328:	84 23       	and	r24, r20
    332a:	8c 93       	st	X, r24
    332c:	13 c0       	rjmp	.+38     	; 0x3354 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin); // output
    332e:	a1 e3       	ldi	r26, 0x31	; 49
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e1 e3       	ldi	r30, 0x31	; 49
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	48 2f       	mov	r20, r24
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	02 2e       	mov	r0, r18
    3346:	02 c0       	rjmp	.+4      	; 0x334c <Dio_ConfigChannel+0x1ae>
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	0a 94       	dec	r0
    334e:	e2 f7       	brpl	.-8      	; 0x3348 <Dio_ConfigChannel+0x1aa>
    3350:	84 2b       	or	r24, r20
    3352:	8c 93       	st	X, r24
		}
		break;
	}
}
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	08 95       	ret

00003364 <Dio_WriteChannel>:

void Dio_WriteChannel (port_type port,pin_type pin,level_type level)
{
    3364:	df 93       	push	r29
    3366:	cf 93       	push	r28
    3368:	00 d0       	rcall	.+0      	; 0x336a <Dio_WriteChannel+0x6>
    336a:	00 d0       	rcall	.+0      	; 0x336c <Dio_WriteChannel+0x8>
    336c:	0f 92       	push	r0
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	6a 83       	std	Y+2, r22	; 0x02
    3376:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	28 2f       	mov	r18, r24
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	3d 83       	std	Y+5, r19	; 0x05
    3380:	2c 83       	std	Y+4, r18	; 0x04
    3382:	8c 81       	ldd	r24, Y+4	; 0x04
    3384:	9d 81       	ldd	r25, Y+5	; 0x05
    3386:	81 30       	cpi	r24, 0x01	; 1
    3388:	91 05       	cpc	r25, r1
    338a:	09 f4       	brne	.+2      	; 0x338e <Dio_WriteChannel+0x2a>
    338c:	43 c0       	rjmp	.+134    	; 0x3414 <Dio_WriteChannel+0xb0>
    338e:	2c 81       	ldd	r18, Y+4	; 0x04
    3390:	3d 81       	ldd	r19, Y+5	; 0x05
    3392:	22 30       	cpi	r18, 0x02	; 2
    3394:	31 05       	cpc	r19, r1
    3396:	2c f4       	brge	.+10     	; 0x33a2 <Dio_WriteChannel+0x3e>
    3398:	8c 81       	ldd	r24, Y+4	; 0x04
    339a:	9d 81       	ldd	r25, Y+5	; 0x05
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	71 f0       	breq	.+28     	; 0x33bc <Dio_WriteChannel+0x58>
    33a0:	bc c0       	rjmp	.+376    	; 0x351a <Dio_WriteChannel+0x1b6>
    33a2:	2c 81       	ldd	r18, Y+4	; 0x04
    33a4:	3d 81       	ldd	r19, Y+5	; 0x05
    33a6:	22 30       	cpi	r18, 0x02	; 2
    33a8:	31 05       	cpc	r19, r1
    33aa:	09 f4       	brne	.+2      	; 0x33ae <Dio_WriteChannel+0x4a>
    33ac:	5f c0       	rjmp	.+190    	; 0x346c <Dio_WriteChannel+0x108>
    33ae:	8c 81       	ldd	r24, Y+4	; 0x04
    33b0:	9d 81       	ldd	r25, Y+5	; 0x05
    33b2:	83 30       	cpi	r24, 0x03	; 3
    33b4:	91 05       	cpc	r25, r1
    33b6:	09 f4       	brne	.+2      	; 0x33ba <Dio_WriteChannel+0x56>
    33b8:	85 c0       	rjmp	.+266    	; 0x34c4 <Dio_WriteChannel+0x160>
    33ba:	af c0       	rjmp	.+350    	; 0x351a <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if(level==STD_HIGH)
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	81 30       	cpi	r24, 0x01	; 1
    33c0:	a1 f4       	brne	.+40     	; 0x33ea <Dio_WriteChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    33c2:	ab e3       	ldi	r26, 0x3B	; 59
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	eb e3       	ldi	r30, 0x3B	; 59
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	48 2f       	mov	r20, r24
    33ce:	8a 81       	ldd	r24, Y+2	; 0x02
    33d0:	28 2f       	mov	r18, r24
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	02 2e       	mov	r0, r18
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <Dio_WriteChannel+0x7c>
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	0a 94       	dec	r0
    33e2:	e2 f7       	brpl	.-8      	; 0x33dc <Dio_WriteChannel+0x78>
    33e4:	84 2b       	or	r24, r20
    33e6:	8c 93       	st	X, r24
    33e8:	98 c0       	rjmp	.+304    	; 0x351a <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    33ea:	ab e3       	ldi	r26, 0x3B	; 59
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	eb e3       	ldi	r30, 0x3B	; 59
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	48 2f       	mov	r20, r24
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	28 2f       	mov	r18, r24
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	02 2e       	mov	r0, r18
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <Dio_WriteChannel+0xa4>
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	0a 94       	dec	r0
    340a:	e2 f7       	brpl	.-8      	; 0x3404 <Dio_WriteChannel+0xa0>
    340c:	80 95       	com	r24
    340e:	84 23       	and	r24, r20
    3410:	8c 93       	st	X, r24
    3412:	83 c0       	rjmp	.+262    	; 0x351a <Dio_WriteChannel+0x1b6>
		}
		break;
	case DIO_PORTB:
		if(level==STD_HIGH)
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	81 30       	cpi	r24, 0x01	; 1
    3418:	a1 f4       	brne	.+40     	; 0x3442 <Dio_WriteChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    341a:	a8 e3       	ldi	r26, 0x38	; 56
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	e8 e3       	ldi	r30, 0x38	; 56
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	48 2f       	mov	r20, r24
    3426:	8a 81       	ldd	r24, Y+2	; 0x02
    3428:	28 2f       	mov	r18, r24
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	02 2e       	mov	r0, r18
    3432:	02 c0       	rjmp	.+4      	; 0x3438 <Dio_WriteChannel+0xd4>
    3434:	88 0f       	add	r24, r24
    3436:	99 1f       	adc	r25, r25
    3438:	0a 94       	dec	r0
    343a:	e2 f7       	brpl	.-8      	; 0x3434 <Dio_WriteChannel+0xd0>
    343c:	84 2b       	or	r24, r20
    343e:	8c 93       	st	X, r24
    3440:	6c c0       	rjmp	.+216    	; 0x351a <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    3442:	a8 e3       	ldi	r26, 0x38	; 56
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	e8 e3       	ldi	r30, 0x38	; 56
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	48 2f       	mov	r20, r24
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	28 2f       	mov	r18, r24
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	02 2e       	mov	r0, r18
    345a:	02 c0       	rjmp	.+4      	; 0x3460 <Dio_WriteChannel+0xfc>
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	0a 94       	dec	r0
    3462:	e2 f7       	brpl	.-8      	; 0x345c <Dio_WriteChannel+0xf8>
    3464:	80 95       	com	r24
    3466:	84 23       	and	r24, r20
    3468:	8c 93       	st	X, r24
    346a:	57 c0       	rjmp	.+174    	; 0x351a <Dio_WriteChannel+0x1b6>
		}
		break;
	case DIO_PORTC:
		if(level==STD_HIGH)
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
    346e:	81 30       	cpi	r24, 0x01	; 1
    3470:	a1 f4       	brne	.+40     	; 0x349a <Dio_WriteChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    3472:	a5 e3       	ldi	r26, 0x35	; 53
    3474:	b0 e0       	ldi	r27, 0x00	; 0
    3476:	e5 e3       	ldi	r30, 0x35	; 53
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	80 81       	ld	r24, Z
    347c:	48 2f       	mov	r20, r24
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	28 2f       	mov	r18, r24
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	02 2e       	mov	r0, r18
    348a:	02 c0       	rjmp	.+4      	; 0x3490 <Dio_WriteChannel+0x12c>
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	0a 94       	dec	r0
    3492:	e2 f7       	brpl	.-8      	; 0x348c <Dio_WriteChannel+0x128>
    3494:	84 2b       	or	r24, r20
    3496:	8c 93       	st	X, r24
    3498:	40 c0       	rjmp	.+128    	; 0x351a <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    349a:	a5 e3       	ldi	r26, 0x35	; 53
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	e5 e3       	ldi	r30, 0x35	; 53
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	80 81       	ld	r24, Z
    34a4:	48 2f       	mov	r20, r24
    34a6:	8a 81       	ldd	r24, Y+2	; 0x02
    34a8:	28 2f       	mov	r18, r24
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	02 2e       	mov	r0, r18
    34b2:	02 c0       	rjmp	.+4      	; 0x34b8 <Dio_WriteChannel+0x154>
    34b4:	88 0f       	add	r24, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	0a 94       	dec	r0
    34ba:	e2 f7       	brpl	.-8      	; 0x34b4 <Dio_WriteChannel+0x150>
    34bc:	80 95       	com	r24
    34be:	84 23       	and	r24, r20
    34c0:	8c 93       	st	X, r24
    34c2:	2b c0       	rjmp	.+86     	; 0x351a <Dio_WriteChannel+0x1b6>
		}
		break;
	case DIO_PORTD:
		if(level==STD_HIGH)
    34c4:	8b 81       	ldd	r24, Y+3	; 0x03
    34c6:	81 30       	cpi	r24, 0x01	; 1
    34c8:	a1 f4       	brne	.+40     	; 0x34f2 <Dio_WriteChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    34ca:	a2 e3       	ldi	r26, 0x32	; 50
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	e2 e3       	ldi	r30, 0x32	; 50
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	48 2f       	mov	r20, r24
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	02 2e       	mov	r0, r18
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <Dio_WriteChannel+0x184>
    34e4:	88 0f       	add	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	0a 94       	dec	r0
    34ea:	e2 f7       	brpl	.-8      	; 0x34e4 <Dio_WriteChannel+0x180>
    34ec:	84 2b       	or	r24, r20
    34ee:	8c 93       	st	X, r24
    34f0:	14 c0       	rjmp	.+40     	; 0x351a <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    34f2:	a2 e3       	ldi	r26, 0x32	; 50
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	e2 e3       	ldi	r30, 0x32	; 50
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	48 2f       	mov	r20, r24
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	28 2f       	mov	r18, r24
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	02 2e       	mov	r0, r18
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <Dio_WriteChannel+0x1ac>
    350c:	88 0f       	add	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	0a 94       	dec	r0
    3512:	e2 f7       	brpl	.-8      	; 0x350c <Dio_WriteChannel+0x1a8>
    3514:	80 95       	com	r24
    3516:	84 23       	and	r24, r20
    3518:	8c 93       	st	X, r24
		}
		break;
	}
}
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <Dio_ToggleChannel>:

void Dio_ToggleChannel(port_type port,pin_type pin)
{
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	00 d0       	rcall	.+0      	; 0x3530 <Dio_ToggleChannel+0x6>
    3530:	00 d0       	rcall	.+0      	; 0x3532 <Dio_ToggleChannel+0x8>
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	89 83       	std	Y+1, r24	; 0x01
    3538:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	3c 83       	std	Y+4, r19	; 0x04
    3542:	2b 83       	std	Y+3, r18	; 0x03
    3544:	8b 81       	ldd	r24, Y+3	; 0x03
    3546:	9c 81       	ldd	r25, Y+4	; 0x04
    3548:	81 30       	cpi	r24, 0x01	; 1
    354a:	91 05       	cpc	r25, r1
    354c:	49 f1       	breq	.+82     	; 0x35a0 <Dio_ToggleChannel+0x76>
    354e:	2b 81       	ldd	r18, Y+3	; 0x03
    3550:	3c 81       	ldd	r19, Y+4	; 0x04
    3552:	22 30       	cpi	r18, 0x02	; 2
    3554:	31 05       	cpc	r19, r1
    3556:	2c f4       	brge	.+10     	; 0x3562 <Dio_ToggleChannel+0x38>
    3558:	8b 81       	ldd	r24, Y+3	; 0x03
    355a:	9c 81       	ldd	r25, Y+4	; 0x04
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	61 f0       	breq	.+24     	; 0x3578 <Dio_ToggleChannel+0x4e>
    3560:	5a c0       	rjmp	.+180    	; 0x3616 <Dio_ToggleChannel+0xec>
    3562:	2b 81       	ldd	r18, Y+3	; 0x03
    3564:	3c 81       	ldd	r19, Y+4	; 0x04
    3566:	22 30       	cpi	r18, 0x02	; 2
    3568:	31 05       	cpc	r19, r1
    356a:	71 f1       	breq	.+92     	; 0x35c8 <Dio_ToggleChannel+0x9e>
    356c:	8b 81       	ldd	r24, Y+3	; 0x03
    356e:	9c 81       	ldd	r25, Y+4	; 0x04
    3570:	83 30       	cpi	r24, 0x03	; 3
    3572:	91 05       	cpc	r25, r1
    3574:	e9 f1       	breq	.+122    	; 0x35f0 <Dio_ToggleChannel+0xc6>
    3576:	4f c0       	rjmp	.+158    	; 0x3616 <Dio_ToggleChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    3578:	ab e3       	ldi	r26, 0x3B	; 59
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	eb e3       	ldi	r30, 0x3B	; 59
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	80 81       	ld	r24, Z
    3582:	48 2f       	mov	r20, r24
    3584:	8a 81       	ldd	r24, Y+2	; 0x02
    3586:	28 2f       	mov	r18, r24
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	02 2e       	mov	r0, r18
    3590:	02 c0       	rjmp	.+4      	; 0x3596 <Dio_ToggleChannel+0x6c>
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	0a 94       	dec	r0
    3598:	e2 f7       	brpl	.-8      	; 0x3592 <Dio_ToggleChannel+0x68>
    359a:	84 27       	eor	r24, r20
    359c:	8c 93       	st	X, r24
    359e:	3b c0       	rjmp	.+118    	; 0x3616 <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    35a0:	a8 e3       	ldi	r26, 0x38	; 56
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e8 e3       	ldi	r30, 0x38	; 56
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	48 2f       	mov	r20, r24
    35ac:	8a 81       	ldd	r24, Y+2	; 0x02
    35ae:	28 2f       	mov	r18, r24
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	02 2e       	mov	r0, r18
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <Dio_ToggleChannel+0x94>
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	0a 94       	dec	r0
    35c0:	e2 f7       	brpl	.-8      	; 0x35ba <Dio_ToggleChannel+0x90>
    35c2:	84 27       	eor	r24, r20
    35c4:	8c 93       	st	X, r24
    35c6:	27 c0       	rjmp	.+78     	; 0x3616 <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    35c8:	a5 e3       	ldi	r26, 0x35	; 53
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	e5 e3       	ldi	r30, 0x35	; 53
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	48 2f       	mov	r20, r24
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	28 2f       	mov	r18, r24
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	02 2e       	mov	r0, r18
    35e0:	02 c0       	rjmp	.+4      	; 0x35e6 <Dio_ToggleChannel+0xbc>
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	0a 94       	dec	r0
    35e8:	e2 f7       	brpl	.-8      	; 0x35e2 <Dio_ToggleChannel+0xb8>
    35ea:	84 27       	eor	r24, r20
    35ec:	8c 93       	st	X, r24
    35ee:	13 c0       	rjmp	.+38     	; 0x3616 <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    35f0:	a2 e3       	ldi	r26, 0x32	; 50
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	e2 e3       	ldi	r30, 0x32	; 50
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	48 2f       	mov	r20, r24
    35fc:	8a 81       	ldd	r24, Y+2	; 0x02
    35fe:	28 2f       	mov	r18, r24
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	02 2e       	mov	r0, r18
    3608:	02 c0       	rjmp	.+4      	; 0x360e <Dio_ToggleChannel+0xe4>
    360a:	88 0f       	add	r24, r24
    360c:	99 1f       	adc	r25, r25
    360e:	0a 94       	dec	r0
    3610:	e2 f7       	brpl	.-8      	; 0x360a <Dio_ToggleChannel+0xe0>
    3612:	84 27       	eor	r24, r20
    3614:	8c 93       	st	X, r24
		break;
	}
}
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	cf 91       	pop	r28
    3620:	df 91       	pop	r29
    3622:	08 95       	ret

00003624 <Dio_WriteGroup>:

void Dio_WriteGroup(port_type port,u8 mask,u8 data)
{
    3624:	df 93       	push	r29
    3626:	cf 93       	push	r28
    3628:	00 d0       	rcall	.+0      	; 0x362a <Dio_WriteGroup+0x6>
    362a:	00 d0       	rcall	.+0      	; 0x362c <Dio_WriteGroup+0x8>
    362c:	0f 92       	push	r0
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	89 83       	std	Y+1, r24	; 0x01
    3634:	6a 83       	std	Y+2, r22	; 0x02
    3636:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    3638:	89 81       	ldd	r24, Y+1	; 0x01
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	3d 83       	std	Y+5, r19	; 0x05
    3640:	2c 83       	std	Y+4, r18	; 0x04
    3642:	8c 81       	ldd	r24, Y+4	; 0x04
    3644:	9d 81       	ldd	r25, Y+5	; 0x05
    3646:	81 30       	cpi	r24, 0x01	; 1
    3648:	91 05       	cpc	r25, r1
    364a:	51 f1       	breq	.+84     	; 0x36a0 <Dio_WriteGroup+0x7c>
    364c:	2c 81       	ldd	r18, Y+4	; 0x04
    364e:	3d 81       	ldd	r19, Y+5	; 0x05
    3650:	22 30       	cpi	r18, 0x02	; 2
    3652:	31 05       	cpc	r19, r1
    3654:	2c f4       	brge	.+10     	; 0x3660 <Dio_WriteGroup+0x3c>
    3656:	8c 81       	ldd	r24, Y+4	; 0x04
    3658:	9d 81       	ldd	r25, Y+5	; 0x05
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	61 f0       	breq	.+24     	; 0x3676 <Dio_WriteGroup+0x52>
    365e:	4f c0       	rjmp	.+158    	; 0x36fe <Dio_WriteGroup+0xda>
    3660:	2c 81       	ldd	r18, Y+4	; 0x04
    3662:	3d 81       	ldd	r19, Y+5	; 0x05
    3664:	22 30       	cpi	r18, 0x02	; 2
    3666:	31 05       	cpc	r19, r1
    3668:	59 f1       	breq	.+86     	; 0x36c0 <Dio_WriteGroup+0x9c>
    366a:	8c 81       	ldd	r24, Y+4	; 0x04
    366c:	9d 81       	ldd	r25, Y+5	; 0x05
    366e:	83 30       	cpi	r24, 0x03	; 3
    3670:	91 05       	cpc	r25, r1
    3672:	b1 f1       	breq	.+108    	; 0x36e0 <Dio_WriteGroup+0xbc>
    3674:	44 c0       	rjmp	.+136    	; 0x36fe <Dio_WriteGroup+0xda>
	{
	case DIO_PORTA:
		DIO_PORTA_REG &= ~ (mask);
    3676:	ab e3       	ldi	r26, 0x3B	; 59
    3678:	b0 e0       	ldi	r27, 0x00	; 0
    367a:	eb e3       	ldi	r30, 0x3B	; 59
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	80 81       	ld	r24, Z
    3680:	98 2f       	mov	r25, r24
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	80 95       	com	r24
    3686:	89 23       	and	r24, r25
    3688:	8c 93       	st	X, r24
		DIO_PORTA_REG |= (data & mask);
    368a:	ab e3       	ldi	r26, 0x3B	; 59
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	eb e3       	ldi	r30, 0x3B	; 59
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	20 81       	ld	r18, Z
    3694:	9b 81       	ldd	r25, Y+3	; 0x03
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	89 23       	and	r24, r25
    369a:	82 2b       	or	r24, r18
    369c:	8c 93       	st	X, r24
    369e:	2f c0       	rjmp	.+94     	; 0x36fe <Dio_WriteGroup+0xda>
		// OR DIO_PORTA_REG = (DIO_PORTA_REG & ~(mask))|(data & mask);
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & ~(mask))|(data & mask);
    36a0:	a8 e3       	ldi	r26, 0x38	; 56
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	e8 e3       	ldi	r30, 0x38	; 56
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	98 2f       	mov	r25, r24
    36ac:	8a 81       	ldd	r24, Y+2	; 0x02
    36ae:	80 95       	com	r24
    36b0:	29 2f       	mov	r18, r25
    36b2:	28 23       	and	r18, r24
    36b4:	9b 81       	ldd	r25, Y+3	; 0x03
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
    36b8:	89 23       	and	r24, r25
    36ba:	82 2b       	or	r24, r18
    36bc:	8c 93       	st	X, r24
    36be:	1f c0       	rjmp	.+62     	; 0x36fe <Dio_WriteGroup+0xda>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & ~(mask))|(data & mask);
    36c0:	a5 e3       	ldi	r26, 0x35	; 53
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	e5 e3       	ldi	r30, 0x35	; 53
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	80 81       	ld	r24, Z
    36ca:	98 2f       	mov	r25, r24
    36cc:	8a 81       	ldd	r24, Y+2	; 0x02
    36ce:	80 95       	com	r24
    36d0:	29 2f       	mov	r18, r25
    36d2:	28 23       	and	r18, r24
    36d4:	9b 81       	ldd	r25, Y+3	; 0x03
    36d6:	8a 81       	ldd	r24, Y+2	; 0x02
    36d8:	89 23       	and	r24, r25
    36da:	82 2b       	or	r24, r18
    36dc:	8c 93       	st	X, r24
    36de:	0f c0       	rjmp	.+30     	; 0x36fe <Dio_WriteGroup+0xda>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & ~(mask))|(data & mask);
    36e0:	a2 e3       	ldi	r26, 0x32	; 50
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e2 e3       	ldi	r30, 0x32	; 50
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	98 2f       	mov	r25, r24
    36ec:	8a 81       	ldd	r24, Y+2	; 0x02
    36ee:	80 95       	com	r24
    36f0:	29 2f       	mov	r18, r25
    36f2:	28 23       	and	r18, r24
    36f4:	9b 81       	ldd	r25, Y+3	; 0x03
    36f6:	8a 81       	ldd	r24, Y+2	; 0x02
    36f8:	89 23       	and	r24, r25
    36fa:	82 2b       	or	r24, r18
    36fc:	8c 93       	st	X, r24
		break;
	}
}
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <Dio_ReadChannel>:

level_type Dio_ReadChannel (port_type port,pin_type pin)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <Dio_ReadChannel+0x6>
    3714:	00 d0       	rcall	.+0      	; 0x3716 <Dio_ReadChannel+0x8>
    3716:	0f 92       	push	r0
    3718:	cd b7       	in	r28, 0x3d	; 61
    371a:	de b7       	in	r29, 0x3e	; 62
    371c:	8a 83       	std	Y+2, r24	; 0x02
    371e:	6b 83       	std	Y+3, r22	; 0x03
	level_type result = STD_LOW; // to avoid warning
    3720:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    3722:	8a 81       	ldd	r24, Y+2	; 0x02
    3724:	28 2f       	mov	r18, r24
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	3d 83       	std	Y+5, r19	; 0x05
    372a:	2c 83       	std	Y+4, r18	; 0x04
    372c:	4c 81       	ldd	r20, Y+4	; 0x04
    372e:	5d 81       	ldd	r21, Y+5	; 0x05
    3730:	41 30       	cpi	r20, 0x01	; 1
    3732:	51 05       	cpc	r21, r1
    3734:	79 f1       	breq	.+94     	; 0x3794 <Dio_ReadChannel+0x86>
    3736:	8c 81       	ldd	r24, Y+4	; 0x04
    3738:	9d 81       	ldd	r25, Y+5	; 0x05
    373a:	82 30       	cpi	r24, 0x02	; 2
    373c:	91 05       	cpc	r25, r1
    373e:	34 f4       	brge	.+12     	; 0x374c <Dio_ReadChannel+0x3e>
    3740:	2c 81       	ldd	r18, Y+4	; 0x04
    3742:	3d 81       	ldd	r19, Y+5	; 0x05
    3744:	21 15       	cp	r18, r1
    3746:	31 05       	cpc	r19, r1
    3748:	69 f0       	breq	.+26     	; 0x3764 <Dio_ReadChannel+0x56>
    374a:	6b c0       	rjmp	.+214    	; 0x3822 <Dio_ReadChannel+0x114>
    374c:	4c 81       	ldd	r20, Y+4	; 0x04
    374e:	5d 81       	ldd	r21, Y+5	; 0x05
    3750:	42 30       	cpi	r20, 0x02	; 2
    3752:	51 05       	cpc	r21, r1
    3754:	b9 f1       	breq	.+110    	; 0x37c4 <Dio_ReadChannel+0xb6>
    3756:	8c 81       	ldd	r24, Y+4	; 0x04
    3758:	9d 81       	ldd	r25, Y+5	; 0x05
    375a:	83 30       	cpi	r24, 0x03	; 3
    375c:	91 05       	cpc	r25, r1
    375e:	09 f4       	brne	.+2      	; 0x3762 <Dio_ReadChannel+0x54>
    3760:	49 c0       	rjmp	.+146    	; 0x37f4 <Dio_ReadChannel+0xe6>
    3762:	5f c0       	rjmp	.+190    	; 0x3822 <Dio_ReadChannel+0x114>
	{
	case DIO_PORTA:
		if(CHK_BIT(DIO_PINA_REG,pin))
    3764:	e9 e3       	ldi	r30, 0x39	; 57
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	88 2f       	mov	r24, r24
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	a9 01       	movw	r20, r18
    3776:	02 c0       	rjmp	.+4      	; 0x377c <Dio_ReadChannel+0x6e>
    3778:	55 95       	asr	r21
    377a:	47 95       	ror	r20
    377c:	8a 95       	dec	r24
    377e:	e2 f7       	brpl	.-8      	; 0x3778 <Dio_ReadChannel+0x6a>
    3780:	ca 01       	movw	r24, r20
    3782:	81 70       	andi	r24, 0x01	; 1
    3784:	90 70       	andi	r25, 0x00	; 0
    3786:	88 23       	and	r24, r24
    3788:	19 f0       	breq	.+6      	; 0x3790 <Dio_ReadChannel+0x82>
		{
			result = STD_HIGH;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	89 83       	std	Y+1, r24	; 0x01
    378e:	49 c0       	rjmp	.+146    	; 0x3822 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;;
    3790:	19 82       	std	Y+1, r1	; 0x01
    3792:	47 c0       	rjmp	.+142    	; 0x3822 <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTB:
		if(CHK_BIT(DIO_PINB_REG,pin))
    3794:	e6 e3       	ldi	r30, 0x36	; 54
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	80 81       	ld	r24, Z
    379a:	28 2f       	mov	r18, r24
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	8b 81       	ldd	r24, Y+3	; 0x03
    37a0:	88 2f       	mov	r24, r24
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	a9 01       	movw	r20, r18
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <Dio_ReadChannel+0x9e>
    37a8:	55 95       	asr	r21
    37aa:	47 95       	ror	r20
    37ac:	8a 95       	dec	r24
    37ae:	e2 f7       	brpl	.-8      	; 0x37a8 <Dio_ReadChannel+0x9a>
    37b0:	ca 01       	movw	r24, r20
    37b2:	81 70       	andi	r24, 0x01	; 1
    37b4:	90 70       	andi	r25, 0x00	; 0
    37b6:	88 23       	and	r24, r24
    37b8:	19 f0       	breq	.+6      	; 0x37c0 <Dio_ReadChannel+0xb2>
		{
			result = STD_HIGH;
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	89 83       	std	Y+1, r24	; 0x01
    37be:	31 c0       	rjmp	.+98     	; 0x3822 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;;
    37c0:	19 82       	std	Y+1, r1	; 0x01
    37c2:	2f c0       	rjmp	.+94     	; 0x3822 <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTC:
		if(CHK_BIT(DIO_PINC_REG,pin))
    37c4:	e3 e3       	ldi	r30, 0x33	; 51
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	28 2f       	mov	r18, r24
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	8b 81       	ldd	r24, Y+3	; 0x03
    37d0:	88 2f       	mov	r24, r24
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	a9 01       	movw	r20, r18
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <Dio_ReadChannel+0xce>
    37d8:	55 95       	asr	r21
    37da:	47 95       	ror	r20
    37dc:	8a 95       	dec	r24
    37de:	e2 f7       	brpl	.-8      	; 0x37d8 <Dio_ReadChannel+0xca>
    37e0:	ca 01       	movw	r24, r20
    37e2:	81 70       	andi	r24, 0x01	; 1
    37e4:	90 70       	andi	r25, 0x00	; 0
    37e6:	88 23       	and	r24, r24
    37e8:	19 f0       	breq	.+6      	; 0x37f0 <Dio_ReadChannel+0xe2>
		{
			result = STD_HIGH;
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	89 83       	std	Y+1, r24	; 0x01
    37ee:	19 c0       	rjmp	.+50     	; 0x3822 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;;
    37f0:	19 82       	std	Y+1, r1	; 0x01
    37f2:	17 c0       	rjmp	.+46     	; 0x3822 <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTD:
		if(CHK_BIT(DIO_PIND_REG,pin))
    37f4:	e0 e3       	ldi	r30, 0x30	; 48
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	28 2f       	mov	r18, r24
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3800:	88 2f       	mov	r24, r24
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	a9 01       	movw	r20, r18
    3806:	02 c0       	rjmp	.+4      	; 0x380c <Dio_ReadChannel+0xfe>
    3808:	55 95       	asr	r21
    380a:	47 95       	ror	r20
    380c:	8a 95       	dec	r24
    380e:	e2 f7       	brpl	.-8      	; 0x3808 <Dio_ReadChannel+0xfa>
    3810:	ca 01       	movw	r24, r20
    3812:	81 70       	andi	r24, 0x01	; 1
    3814:	90 70       	andi	r25, 0x00	; 0
    3816:	88 23       	and	r24, r24
    3818:	19 f0       	breq	.+6      	; 0x3820 <Dio_ReadChannel+0x112>
		{
			result = STD_HIGH;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	89 83       	std	Y+1, r24	; 0x01
    381e:	01 c0       	rjmp	.+2      	; 0x3822 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;;
    3820:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return result;
    3822:	89 81       	ldd	r24, Y+1	; 0x01
}
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	cf 91       	pop	r28
    3830:	df 91       	pop	r29
    3832:	08 95       	ret

00003834 <adcInit>:
volatile boolean ResultADCReadyFlag5 = FALSE;
volatile boolean ResultADCReadyFlag6 = FALSE;
volatile boolean ResultADCReadyFlag7 = FALSE;

void adcInit(void)
{
    3834:	df 93       	push	r29
    3836:	cf 93       	push	r28
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
	ADC_ADMUX_REG|=(AVCC5V_REF<<6);  /*	AVCC as Vref	*/
    383c:	a7 e2       	ldi	r26, 0x27	; 39
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	e7 e2       	ldi	r30, 0x27	; 39
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	80 64       	ori	r24, 0x40	; 64
    3848:	8c 93       	st	X, r24
	ADC_ADCSRA_REG=(ADC_ENABLE)|(ADCPS_128);
    384a:	e6 e2       	ldi	r30, 0x26	; 38
    384c:	f0 e0       	ldi	r31, 0x00	; 0
    384e:	87 e8       	ldi	r24, 0x87	; 135
    3850:	80 83       	st	Z, r24
	ADC_ADCSRA_REG=(ADC_ADCSRA_REG)|(ADC_INTERRUPT_ENABLE);
    3852:	a6 e2       	ldi	r26, 0x26	; 38
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	e6 e2       	ldi	r30, 0x26	; 38
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	80 81       	ld	r24, Z
    385c:	88 60       	ori	r24, 0x08	; 8
    385e:	8c 93       	st	X, r24
}
    3860:	cf 91       	pop	r28
    3862:	df 91       	pop	r29
    3864:	08 95       	ret

00003866 <adcStartConversion>:

void adcStartConversion(u8 chnlNo)
{
    3866:	df 93       	push	r29
    3868:	cf 93       	push	r28
    386a:	00 d0       	rcall	.+0      	; 0x386c <adcStartConversion+0x6>
    386c:	0f 92       	push	r0
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	89 83       	std	Y+1, r24	; 0x01
	switch(chnlNo)
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	28 2f       	mov	r18, r24
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	3b 83       	std	Y+3, r19	; 0x03
    387c:	2a 83       	std	Y+2, r18	; 0x02
    387e:	8a 81       	ldd	r24, Y+2	; 0x02
    3880:	9b 81       	ldd	r25, Y+3	; 0x03
    3882:	83 30       	cpi	r24, 0x03	; 3
    3884:	91 05       	cpc	r25, r1
    3886:	09 f4       	brne	.+2      	; 0x388a <adcStartConversion+0x24>
    3888:	66 c0       	rjmp	.+204    	; 0x3956 <adcStartConversion+0xf0>
    388a:	2a 81       	ldd	r18, Y+2	; 0x02
    388c:	3b 81       	ldd	r19, Y+3	; 0x03
    388e:	24 30       	cpi	r18, 0x04	; 4
    3890:	31 05       	cpc	r19, r1
    3892:	84 f4       	brge	.+32     	; 0x38b4 <adcStartConversion+0x4e>
    3894:	8a 81       	ldd	r24, Y+2	; 0x02
    3896:	9b 81       	ldd	r25, Y+3	; 0x03
    3898:	81 30       	cpi	r24, 0x01	; 1
    389a:	91 05       	cpc	r25, r1
    389c:	b1 f1       	breq	.+108    	; 0x390a <adcStartConversion+0xa4>
    389e:	2a 81       	ldd	r18, Y+2	; 0x02
    38a0:	3b 81       	ldd	r19, Y+3	; 0x03
    38a2:	22 30       	cpi	r18, 0x02	; 2
    38a4:	31 05       	cpc	r19, r1
    38a6:	0c f0       	brlt	.+2      	; 0x38aa <adcStartConversion+0x44>
    38a8:	43 c0       	rjmp	.+134    	; 0x3930 <adcStartConversion+0xca>
    38aa:	8a 81       	ldd	r24, Y+2	; 0x02
    38ac:	9b 81       	ldd	r25, Y+3	; 0x03
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	d1 f0       	breq	.+52     	; 0x38e6 <adcStartConversion+0x80>
    38b2:	ae c0       	rjmp	.+348    	; 0x3a10 <adcStartConversion+0x1aa>
    38b4:	2a 81       	ldd	r18, Y+2	; 0x02
    38b6:	3b 81       	ldd	r19, Y+3	; 0x03
    38b8:	25 30       	cpi	r18, 0x05	; 5
    38ba:	31 05       	cpc	r19, r1
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <adcStartConversion+0x5a>
    38be:	71 c0       	rjmp	.+226    	; 0x39a2 <adcStartConversion+0x13c>
    38c0:	8a 81       	ldd	r24, Y+2	; 0x02
    38c2:	9b 81       	ldd	r25, Y+3	; 0x03
    38c4:	85 30       	cpi	r24, 0x05	; 5
    38c6:	91 05       	cpc	r25, r1
    38c8:	0c f4       	brge	.+2      	; 0x38cc <adcStartConversion+0x66>
    38ca:	58 c0       	rjmp	.+176    	; 0x397c <adcStartConversion+0x116>
    38cc:	2a 81       	ldd	r18, Y+2	; 0x02
    38ce:	3b 81       	ldd	r19, Y+3	; 0x03
    38d0:	26 30       	cpi	r18, 0x06	; 6
    38d2:	31 05       	cpc	r19, r1
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <adcStartConversion+0x72>
    38d6:	78 c0       	rjmp	.+240    	; 0x39c8 <adcStartConversion+0x162>
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	9b 81       	ldd	r25, Y+3	; 0x03
    38dc:	87 30       	cpi	r24, 0x07	; 7
    38de:	91 05       	cpc	r25, r1
    38e0:	09 f4       	brne	.+2      	; 0x38e4 <adcStartConversion+0x7e>
    38e2:	85 c0       	rjmp	.+266    	; 0x39ee <adcStartConversion+0x188>
    38e4:	95 c0       	rjmp	.+298    	; 0x3a10 <adcStartConversion+0x1aa>
	{
	case ADC_CHNL0:
		ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(ADC_CHNL0);
    38e6:	a7 e2       	ldi	r26, 0x27	; 39
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e7 e2       	ldi	r30, 0x27	; 39
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	88 7f       	andi	r24, 0xF8	; 248
    38f2:	8c 93       	st	X, r24
		ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    38f4:	a6 e2       	ldi	r26, 0x26	; 38
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	e6 e2       	ldi	r30, 0x26	; 38
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	80 64       	ori	r24, 0x40	; 64
    3900:	8c 93       	st	X, r24
		ADC_CHNL0_Flag = TRUE;
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	80 93 4f 01 	sts	0x014F, r24
    3908:	83 c0       	rjmp	.+262    	; 0x3a10 <adcStartConversion+0x1aa>
		break;

	case ADC_CHNL1:
		ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(ADC_CHNL1);
    390a:	a7 e2       	ldi	r26, 0x27	; 39
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	e7 e2       	ldi	r30, 0x27	; 39
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	88 7f       	andi	r24, 0xF8	; 248
    3916:	81 60       	ori	r24, 0x01	; 1
    3918:	8c 93       	st	X, r24
		ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    391a:	a6 e2       	ldi	r26, 0x26	; 38
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	e6 e2       	ldi	r30, 0x26	; 38
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	80 81       	ld	r24, Z
    3924:	80 64       	ori	r24, 0x40	; 64
    3926:	8c 93       	st	X, r24
		ADC_CHNL1_Flag = TRUE;
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	80 93 50 01 	sts	0x0150, r24
    392e:	70 c0       	rjmp	.+224    	; 0x3a10 <adcStartConversion+0x1aa>
		break;

	case ADC_CHNL2:
		ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(ADC_CHNL2);
    3930:	a7 e2       	ldi	r26, 0x27	; 39
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	e7 e2       	ldi	r30, 0x27	; 39
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	88 7f       	andi	r24, 0xF8	; 248
    393c:	82 60       	ori	r24, 0x02	; 2
    393e:	8c 93       	st	X, r24
		ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    3940:	a6 e2       	ldi	r26, 0x26	; 38
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e6 e2       	ldi	r30, 0x26	; 38
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	80 64       	ori	r24, 0x40	; 64
    394c:	8c 93       	st	X, r24
		ADC_CHNL2_Flag = TRUE;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	80 93 51 01 	sts	0x0151, r24
    3954:	5d c0       	rjmp	.+186    	; 0x3a10 <adcStartConversion+0x1aa>
		break;

	case ADC_CHNL3:
		ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(ADC_CHNL3);
    3956:	a7 e2       	ldi	r26, 0x27	; 39
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	e7 e2       	ldi	r30, 0x27	; 39
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	88 7f       	andi	r24, 0xF8	; 248
    3962:	83 60       	ori	r24, 0x03	; 3
    3964:	8c 93       	st	X, r24
		ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    3966:	a6 e2       	ldi	r26, 0x26	; 38
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	e6 e2       	ldi	r30, 0x26	; 38
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	80 64       	ori	r24, 0x40	; 64
    3972:	8c 93       	st	X, r24
		ADC_CHNL3_Flag = TRUE;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	80 93 52 01 	sts	0x0152, r24
    397a:	4a c0       	rjmp	.+148    	; 0x3a10 <adcStartConversion+0x1aa>
		break;

	case ADC_CHNL4:
		ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(ADC_CHNL4);
    397c:	a7 e2       	ldi	r26, 0x27	; 39
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	e7 e2       	ldi	r30, 0x27	; 39
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	88 7f       	andi	r24, 0xF8	; 248
    3988:	84 60       	ori	r24, 0x04	; 4
    398a:	8c 93       	st	X, r24
		ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    398c:	a6 e2       	ldi	r26, 0x26	; 38
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	e6 e2       	ldi	r30, 0x26	; 38
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	80 64       	ori	r24, 0x40	; 64
    3998:	8c 93       	st	X, r24
		ADC_CHNL4_Flag = TRUE;
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	80 93 53 01 	sts	0x0153, r24
    39a0:	37 c0       	rjmp	.+110    	; 0x3a10 <adcStartConversion+0x1aa>
		break;

	case ADC_CHNL5:
		ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(ADC_CHNL5);
    39a2:	a7 e2       	ldi	r26, 0x27	; 39
    39a4:	b0 e0       	ldi	r27, 0x00	; 0
    39a6:	e7 e2       	ldi	r30, 0x27	; 39
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	88 7f       	andi	r24, 0xF8	; 248
    39ae:	85 60       	ori	r24, 0x05	; 5
    39b0:	8c 93       	st	X, r24
		ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    39b2:	a6 e2       	ldi	r26, 0x26	; 38
    39b4:	b0 e0       	ldi	r27, 0x00	; 0
    39b6:	e6 e2       	ldi	r30, 0x26	; 38
    39b8:	f0 e0       	ldi	r31, 0x00	; 0
    39ba:	80 81       	ld	r24, Z
    39bc:	80 64       	ori	r24, 0x40	; 64
    39be:	8c 93       	st	X, r24
		ADC_CHNL5_Flag = TRUE;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	80 93 54 01 	sts	0x0154, r24
    39c6:	24 c0       	rjmp	.+72     	; 0x3a10 <adcStartConversion+0x1aa>
		break;

	case ADC_CHNL6:
		ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(ADC_CHNL6);
    39c8:	a7 e2       	ldi	r26, 0x27	; 39
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	e7 e2       	ldi	r30, 0x27	; 39
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	88 7f       	andi	r24, 0xF8	; 248
    39d4:	86 60       	ori	r24, 0x06	; 6
    39d6:	8c 93       	st	X, r24
		ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    39d8:	a6 e2       	ldi	r26, 0x26	; 38
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	e6 e2       	ldi	r30, 0x26	; 38
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	80 81       	ld	r24, Z
    39e2:	80 64       	ori	r24, 0x40	; 64
    39e4:	8c 93       	st	X, r24
		ADC_CHNL6_Flag = TRUE;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	80 93 55 01 	sts	0x0155, r24
    39ec:	11 c0       	rjmp	.+34     	; 0x3a10 <adcStartConversion+0x1aa>
		break;

	case ADC_CHNL7:
		ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(ADC_CHNL7);
    39ee:	a7 e2       	ldi	r26, 0x27	; 39
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	e7 e2       	ldi	r30, 0x27	; 39
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	87 60       	ori	r24, 0x07	; 7
    39fa:	8c 93       	st	X, r24
		ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    39fc:	a6 e2       	ldi	r26, 0x26	; 38
    39fe:	b0 e0       	ldi	r27, 0x00	; 0
    3a00:	e6 e2       	ldi	r30, 0x26	; 38
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	80 64       	ori	r24, 0x40	; 64
    3a08:	8c 93       	st	X, r24
		ADC_CHNL7_Flag = TRUE;
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	80 93 56 01 	sts	0x0156, r24
		break;
	}
}
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	08 95       	ret

00003a1c <adcBusy>:

boolean adcBusy()
{
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <adcBusy+0x6>
    3a22:	0f 92       	push	r0
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
	boolean state;
	if ((ADC_CHNL0_Flag||ADC_CHNL1_Flag||ADC_CHNL2_Flag||ADC_CHNL3_Flag||ADC_CHNL4_Flag||ADC_CHNL5_Flag||ADC_CHNL6_Flag||ADC_CHNL7_Flag)==TRUE)
    3a28:	80 91 4f 01 	lds	r24, 0x014F
    3a2c:	88 23       	and	r24, r24
    3a2e:	e1 f4       	brne	.+56     	; 0x3a68 <adcBusy+0x4c>
    3a30:	80 91 50 01 	lds	r24, 0x0150
    3a34:	88 23       	and	r24, r24
    3a36:	c1 f4       	brne	.+48     	; 0x3a68 <adcBusy+0x4c>
    3a38:	80 91 51 01 	lds	r24, 0x0151
    3a3c:	88 23       	and	r24, r24
    3a3e:	a1 f4       	brne	.+40     	; 0x3a68 <adcBusy+0x4c>
    3a40:	80 91 52 01 	lds	r24, 0x0152
    3a44:	88 23       	and	r24, r24
    3a46:	81 f4       	brne	.+32     	; 0x3a68 <adcBusy+0x4c>
    3a48:	80 91 53 01 	lds	r24, 0x0153
    3a4c:	88 23       	and	r24, r24
    3a4e:	61 f4       	brne	.+24     	; 0x3a68 <adcBusy+0x4c>
    3a50:	80 91 54 01 	lds	r24, 0x0154
    3a54:	88 23       	and	r24, r24
    3a56:	41 f4       	brne	.+16     	; 0x3a68 <adcBusy+0x4c>
    3a58:	80 91 55 01 	lds	r24, 0x0155
    3a5c:	88 23       	and	r24, r24
    3a5e:	21 f4       	brne	.+8      	; 0x3a68 <adcBusy+0x4c>
    3a60:	80 91 56 01 	lds	r24, 0x0156
    3a64:	88 23       	and	r24, r24
    3a66:	29 f0       	breq	.+10     	; 0x3a72 <adcBusy+0x56>
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	9b 83       	std	Y+3, r25	; 0x03
    3a6e:	8a 83       	std	Y+2, r24	; 0x02
    3a70:	02 c0       	rjmp	.+4      	; 0x3a76 <adcBusy+0x5a>
    3a72:	1b 82       	std	Y+3, r1	; 0x03
    3a74:	1a 82       	std	Y+2, r1	; 0x02
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7a:	81 30       	cpi	r24, 0x01	; 1
    3a7c:	91 05       	cpc	r25, r1
    3a7e:	19 f4       	brne	.+6      	; 0x3a86 <adcBusy+0x6a>
	{
		state=TRUE;
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	89 83       	std	Y+1, r24	; 0x01
    3a84:	01 c0       	rjmp	.+2      	; 0x3a88 <adcBusy+0x6c>
	}

	else state=FALSE;
    3a86:	19 82       	std	Y+1, r1	; 0x01

	return state;
    3a88:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	0f 90       	pop	r0
    3a90:	cf 91       	pop	r28
    3a92:	df 91       	pop	r29
    3a94:	08 95       	ret

00003a96 <adcResultFlagCheck>:

void adcResultFlagCheck(u8 chnlNo)
{
    3a96:	df 93       	push	r29
    3a98:	cf 93       	push	r28
    3a9a:	00 d0       	rcall	.+0      	; 0x3a9c <adcResultFlagCheck+0x6>
    3a9c:	0f 92       	push	r0
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
    3aa2:	89 83       	std	Y+1, r24	; 0x01
	switch(chnlNo)
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	28 2f       	mov	r18, r24
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	3b 83       	std	Y+3, r19	; 0x03
    3aac:	2a 83       	std	Y+2, r18	; 0x02
    3aae:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab2:	83 30       	cpi	r24, 0x03	; 3
    3ab4:	91 05       	cpc	r25, r1
    3ab6:	09 f4       	brne	.+2      	; 0x3aba <adcResultFlagCheck+0x24>
    3ab8:	5e c0       	rjmp	.+188    	; 0x3b76 <adcResultFlagCheck+0xe0>
    3aba:	2a 81       	ldd	r18, Y+2	; 0x02
    3abc:	3b 81       	ldd	r19, Y+3	; 0x03
    3abe:	24 30       	cpi	r18, 0x04	; 4
    3ac0:	31 05       	cpc	r19, r1
    3ac2:	84 f4       	brge	.+32     	; 0x3ae4 <adcResultFlagCheck+0x4e>
    3ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac8:	81 30       	cpi	r24, 0x01	; 1
    3aca:	91 05       	cpc	r25, r1
    3acc:	a1 f1       	breq	.+104    	; 0x3b36 <adcResultFlagCheck+0xa0>
    3ace:	2a 81       	ldd	r18, Y+2	; 0x02
    3ad0:	3b 81       	ldd	r19, Y+3	; 0x03
    3ad2:	22 30       	cpi	r18, 0x02	; 2
    3ad4:	31 05       	cpc	r19, r1
    3ad6:	0c f0       	brlt	.+2      	; 0x3ada <adcResultFlagCheck+0x44>
    3ad8:	3e c0       	rjmp	.+124    	; 0x3b56 <adcResultFlagCheck+0xc0>
    3ada:	8a 81       	ldd	r24, Y+2	; 0x02
    3adc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	d1 f0       	breq	.+52     	; 0x3b16 <adcResultFlagCheck+0x80>
    3ae2:	8f c0       	rjmp	.+286    	; 0x3c02 <adcResultFlagCheck+0x16c>
    3ae4:	2a 81       	ldd	r18, Y+2	; 0x02
    3ae6:	3b 81       	ldd	r19, Y+3	; 0x03
    3ae8:	25 30       	cpi	r18, 0x05	; 5
    3aea:	31 05       	cpc	r19, r1
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <adcResultFlagCheck+0x5a>
    3aee:	60 c0       	rjmp	.+192    	; 0x3bb0 <adcResultFlagCheck+0x11a>
    3af0:	8a 81       	ldd	r24, Y+2	; 0x02
    3af2:	9b 81       	ldd	r25, Y+3	; 0x03
    3af4:	85 30       	cpi	r24, 0x05	; 5
    3af6:	91 05       	cpc	r25, r1
    3af8:	0c f4       	brge	.+2      	; 0x3afc <adcResultFlagCheck+0x66>
    3afa:	4c c0       	rjmp	.+152    	; 0x3b94 <adcResultFlagCheck+0xfe>
    3afc:	2a 81       	ldd	r18, Y+2	; 0x02
    3afe:	3b 81       	ldd	r19, Y+3	; 0x03
    3b00:	26 30       	cpi	r18, 0x06	; 6
    3b02:	31 05       	cpc	r19, r1
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <adcResultFlagCheck+0x72>
    3b06:	62 c0       	rjmp	.+196    	; 0x3bcc <adcResultFlagCheck+0x136>
    3b08:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b0c:	87 30       	cpi	r24, 0x07	; 7
    3b0e:	91 05       	cpc	r25, r1
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <adcResultFlagCheck+0x7e>
    3b12:	6a c0       	rjmp	.+212    	; 0x3be8 <adcResultFlagCheck+0x152>
    3b14:	76 c0       	rjmp	.+236    	; 0x3c02 <adcResultFlagCheck+0x16c>
	{
	case ADC_CHNL0:

		if(adcBusy()==FALSE)
    3b16:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcBusy>
    3b1a:	88 23       	and	r24, r24
    3b1c:	09 f0       	breq	.+2      	; 0x3b20 <adcResultFlagCheck+0x8a>
    3b1e:	71 c0       	rjmp	.+226    	; 0x3c02 <adcResultFlagCheck+0x16c>
		{
			adcStartConversion(ADC_CHNL0);
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	0e 94 33 1c 	call	0x3866	; 0x3866 <adcStartConversion>
			if (ResultADCReadyFlag0 == TRUE)
    3b26:	80 91 67 01 	lds	r24, 0x0167
    3b2a:	81 30       	cpi	r24, 0x01	; 1
    3b2c:	09 f0       	breq	.+2      	; 0x3b30 <adcResultFlagCheck+0x9a>
    3b2e:	69 c0       	rjmp	.+210    	; 0x3c02 <adcResultFlagCheck+0x16c>
			{
				//thumb=result_ADC_CHNL7;  // why is it wrong?
				//UART_TransmitNum(values);
				//Lcd_Goto_Row_Column(0, 6);
				//Lcd_DisplayNUM(thumb)
				ResultADCReadyFlag0 = FALSE;
    3b30:	10 92 67 01 	sts	0x0167, r1
    3b34:	66 c0       	rjmp	.+204    	; 0x3c02 <adcResultFlagCheck+0x16c>
		}
		break;

	case ADC_CHNL1:

		if(adcBusy()==FALSE)
    3b36:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcBusy>
    3b3a:	88 23       	and	r24, r24
    3b3c:	09 f0       	breq	.+2      	; 0x3b40 <adcResultFlagCheck+0xaa>
    3b3e:	61 c0       	rjmp	.+194    	; 0x3c02 <adcResultFlagCheck+0x16c>
		{
			adcStartConversion(ADC_CHNL1);
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	0e 94 33 1c 	call	0x3866	; 0x3866 <adcStartConversion>
			if (ResultADCReadyFlag1 == TRUE)
    3b46:	80 91 68 01 	lds	r24, 0x0168
    3b4a:	81 30       	cpi	r24, 0x01	; 1
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <adcResultFlagCheck+0xba>
    3b4e:	59 c0       	rjmp	.+178    	; 0x3c02 <adcResultFlagCheck+0x16c>
			{
				ResultADCReadyFlag1 = FALSE;
    3b50:	10 92 68 01 	sts	0x0168, r1
    3b54:	56 c0       	rjmp	.+172    	; 0x3c02 <adcResultFlagCheck+0x16c>
		}
		break;

	case ADC_CHNL2:

		if(adcBusy()==FALSE)
    3b56:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcBusy>
    3b5a:	88 23       	and	r24, r24
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <adcResultFlagCheck+0xca>
    3b5e:	51 c0       	rjmp	.+162    	; 0x3c02 <adcResultFlagCheck+0x16c>
		{
			adcStartConversion(ADC_CHNL2);
    3b60:	82 e0       	ldi	r24, 0x02	; 2
    3b62:	0e 94 33 1c 	call	0x3866	; 0x3866 <adcStartConversion>
			if (ResultADCReadyFlag2 == TRUE)
    3b66:	80 91 69 01 	lds	r24, 0x0169
    3b6a:	81 30       	cpi	r24, 0x01	; 1
    3b6c:	09 f0       	breq	.+2      	; 0x3b70 <adcResultFlagCheck+0xda>
    3b6e:	49 c0       	rjmp	.+146    	; 0x3c02 <adcResultFlagCheck+0x16c>
			{
				ResultADCReadyFlag2 = FALSE;
    3b70:	10 92 69 01 	sts	0x0169, r1
    3b74:	46 c0       	rjmp	.+140    	; 0x3c02 <adcResultFlagCheck+0x16c>
		}
		break;

	case ADC_CHNL3:

		if(adcBusy()==FALSE)
    3b76:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcBusy>
    3b7a:	88 23       	and	r24, r24
    3b7c:	09 f0       	breq	.+2      	; 0x3b80 <adcResultFlagCheck+0xea>
    3b7e:	41 c0       	rjmp	.+130    	; 0x3c02 <adcResultFlagCheck+0x16c>
		{
			adcStartConversion(ADC_CHNL3);
    3b80:	83 e0       	ldi	r24, 0x03	; 3
    3b82:	0e 94 33 1c 	call	0x3866	; 0x3866 <adcStartConversion>
			if (ResultADCReadyFlag3 == TRUE)
    3b86:	80 91 6a 01 	lds	r24, 0x016A
    3b8a:	81 30       	cpi	r24, 0x01	; 1
    3b8c:	d1 f5       	brne	.+116    	; 0x3c02 <adcResultFlagCheck+0x16c>
			{
				ResultADCReadyFlag3 = FALSE;
    3b8e:	10 92 6a 01 	sts	0x016A, r1
    3b92:	37 c0       	rjmp	.+110    	; 0x3c02 <adcResultFlagCheck+0x16c>
		}
		break;

	case ADC_CHNL4:

		if(adcBusy()==FALSE)
    3b94:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcBusy>
    3b98:	88 23       	and	r24, r24
    3b9a:	99 f5       	brne	.+102    	; 0x3c02 <adcResultFlagCheck+0x16c>
		{
			adcStartConversion(ADC_CHNL4);
    3b9c:	84 e0       	ldi	r24, 0x04	; 4
    3b9e:	0e 94 33 1c 	call	0x3866	; 0x3866 <adcStartConversion>
			if (ResultADCReadyFlag4 == TRUE)
    3ba2:	80 91 6b 01 	lds	r24, 0x016B
    3ba6:	81 30       	cpi	r24, 0x01	; 1
    3ba8:	61 f5       	brne	.+88     	; 0x3c02 <adcResultFlagCheck+0x16c>
			{
				//UART_TransmitNum(values);
				//Lcd_Goto_Row_Column(0, 10);
				//Lcd_DisplayNUM(index_F);
				ResultADCReadyFlag4 = FALSE;
    3baa:	10 92 6b 01 	sts	0x016B, r1
    3bae:	29 c0       	rjmp	.+82     	; 0x3c02 <adcResultFlagCheck+0x16c>
		}
		break;

	case ADC_CHNL5:

		if(adcBusy()==FALSE)
    3bb0:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcBusy>
    3bb4:	88 23       	and	r24, r24
    3bb6:	29 f5       	brne	.+74     	; 0x3c02 <adcResultFlagCheck+0x16c>
		{
			adcStartConversion(ADC_CHNL5);
    3bb8:	85 e0       	ldi	r24, 0x05	; 5
    3bba:	0e 94 33 1c 	call	0x3866	; 0x3866 <adcStartConversion>
			if (ResultADCReadyFlag5 == TRUE)
    3bbe:	80 91 6c 01 	lds	r24, 0x016C
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	f1 f4       	brne	.+60     	; 0x3c02 <adcResultFlagCheck+0x16c>
			{
				//UART_TransmitNum(values);
				//Lcd_Goto_Row_Column(1, 0);
				//Lcd_DisplayNUM(middle);
				ResultADCReadyFlag5 = FALSE;
    3bc6:	10 92 6c 01 	sts	0x016C, r1
    3bca:	1b c0       	rjmp	.+54     	; 0x3c02 <adcResultFlagCheck+0x16c>
		}
		break;

	case ADC_CHNL6:

		if(adcBusy()==FALSE)
    3bcc:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcBusy>
    3bd0:	88 23       	and	r24, r24
    3bd2:	b9 f4       	brne	.+46     	; 0x3c02 <adcResultFlagCheck+0x16c>
		{
			adcStartConversion(ADC_CHNL6);
    3bd4:	86 e0       	ldi	r24, 0x06	; 6
    3bd6:	0e 94 33 1c 	call	0x3866	; 0x3866 <adcStartConversion>
			if (ResultADCReadyFlag6 == TRUE)
    3bda:	80 91 6d 01 	lds	r24, 0x016D
    3bde:	81 30       	cpi	r24, 0x01	; 1
    3be0:	81 f4       	brne	.+32     	; 0x3c02 <adcResultFlagCheck+0x16c>
			{
				//UART_TransmitNum(values);
				//Lcd_Goto_Row_Column(1, 4);
				//Lcd_DisplayNUM(ring);
				ResultADCReadyFlag6 = FALSE;
    3be2:	10 92 6d 01 	sts	0x016D, r1
    3be6:	0d c0       	rjmp	.+26     	; 0x3c02 <adcResultFlagCheck+0x16c>
		}
		break;

	case ADC_CHNL7:

		if(adcBusy()==FALSE)
    3be8:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcBusy>
    3bec:	88 23       	and	r24, r24
    3bee:	49 f4       	brne	.+18     	; 0x3c02 <adcResultFlagCheck+0x16c>
		{
			//UART_TransmitNum(values);
			//Lcd_Goto_Row_Column(1, 8);
			//Lcd_DisplayNUM(little);
			adcStartConversion(ADC_CHNL7);
    3bf0:	87 e0       	ldi	r24, 0x07	; 7
    3bf2:	0e 94 33 1c 	call	0x3866	; 0x3866 <adcStartConversion>
			if (ResultADCReadyFlag7 == TRUE)
    3bf6:	80 91 6e 01 	lds	r24, 0x016E
    3bfa:	81 30       	cpi	r24, 0x01	; 1
    3bfc:	11 f4       	brne	.+4      	; 0x3c02 <adcResultFlagCheck+0x16c>
			{
				ResultADCReadyFlag7 = FALSE;
    3bfe:	10 92 6e 01 	sts	0x016E, r1
			}
		}
		break;
	}
}
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	cf 91       	pop	r28
    3c0a:	df 91       	pop	r29
    3c0c:	08 95       	ret

00003c0e <map>:
 */

#include "Bit_Math.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    3c0e:	af 92       	push	r10
    3c10:	bf 92       	push	r11
    3c12:	cf 92       	push	r12
    3c14:	df 92       	push	r13
    3c16:	ef 92       	push	r14
    3c18:	ff 92       	push	r15
    3c1a:	0f 93       	push	r16
    3c1c:	1f 93       	push	r17
    3c1e:	df 93       	push	r29
    3c20:	cf 93       	push	r28
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	60 97       	sbiw	r28, 0x10	; 16
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	de bf       	out	0x3e, r29	; 62
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	cd bf       	out	0x3d, r28	; 61
    3c32:	69 83       	std	Y+1, r22	; 0x01
    3c34:	7a 83       	std	Y+2, r23	; 0x02
    3c36:	8b 83       	std	Y+3, r24	; 0x03
    3c38:	9c 83       	std	Y+4, r25	; 0x04
    3c3a:	2d 83       	std	Y+5, r18	; 0x05
    3c3c:	3e 83       	std	Y+6, r19	; 0x06
    3c3e:	4f 83       	std	Y+7, r20	; 0x07
    3c40:	58 87       	std	Y+8, r21	; 0x08
    3c42:	e9 86       	std	Y+9, r14	; 0x09
    3c44:	fa 86       	std	Y+10, r15	; 0x0a
    3c46:	0b 87       	std	Y+11, r16	; 0x0b
    3c48:	1c 87       	std	Y+12, r17	; 0x0c
    3c4a:	ad 86       	std	Y+13, r10	; 0x0d
    3c4c:	be 86       	std	Y+14, r11	; 0x0e
    3c4e:	cf 86       	std	Y+15, r12	; 0x0f
    3c50:	d8 8a       	std	Y+16, r13	; 0x10
  return ((x - in_min) * (out_max - out_min) + out_min * (in_max - in_min)) / (in_max - in_min);
    3c52:	29 81       	ldd	r18, Y+1	; 0x01
    3c54:	3a 81       	ldd	r19, Y+2	; 0x02
    3c56:	4b 81       	ldd	r20, Y+3	; 0x03
    3c58:	5c 81       	ldd	r21, Y+4	; 0x04
    3c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5e:	af 81       	ldd	r26, Y+7	; 0x07
    3c60:	b8 85       	ldd	r27, Y+8	; 0x08
    3c62:	79 01       	movw	r14, r18
    3c64:	8a 01       	movw	r16, r20
    3c66:	e8 1a       	sub	r14, r24
    3c68:	f9 0a       	sbc	r15, r25
    3c6a:	0a 0b       	sbc	r16, r26
    3c6c:	1b 0b       	sbc	r17, r27
    3c6e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3c70:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3c72:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3c74:	58 a1       	ldd	r21, Y+32	; 0x20
    3c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c7a:	af 85       	ldd	r26, Y+15	; 0x0f
    3c7c:	b8 89       	ldd	r27, Y+16	; 0x10
    3c7e:	28 1b       	sub	r18, r24
    3c80:	39 0b       	sbc	r19, r25
    3c82:	4a 0b       	sbc	r20, r26
    3c84:	5b 0b       	sbc	r21, r27
    3c86:	c8 01       	movw	r24, r16
    3c88:	b7 01       	movw	r22, r14
    3c8a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__mulsi3>
    3c8e:	7b 01       	movw	r14, r22
    3c90:	8c 01       	movw	r16, r24
    3c92:	29 85       	ldd	r18, Y+9	; 0x09
    3c94:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c96:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c98:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9e:	af 81       	ldd	r26, Y+7	; 0x07
    3ca0:	b8 85       	ldd	r27, Y+8	; 0x08
    3ca2:	59 01       	movw	r10, r18
    3ca4:	6a 01       	movw	r12, r20
    3ca6:	a8 1a       	sub	r10, r24
    3ca8:	b9 0a       	sbc	r11, r25
    3caa:	ca 0a       	sbc	r12, r26
    3cac:	db 0a       	sbc	r13, r27
    3cae:	d6 01       	movw	r26, r12
    3cb0:	c5 01       	movw	r24, r10
    3cb2:	2d 85       	ldd	r18, Y+13	; 0x0d
    3cb4:	3e 85       	ldd	r19, Y+14	; 0x0e
    3cb6:	4f 85       	ldd	r20, Y+15	; 0x0f
    3cb8:	58 89       	ldd	r21, Y+16	; 0x10
    3cba:	bc 01       	movw	r22, r24
    3cbc:	cd 01       	movw	r24, r26
    3cbe:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__mulsi3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	e8 0e       	add	r14, r24
    3cc8:	f9 1e       	adc	r15, r25
    3cca:	0a 1f       	adc	r16, r26
    3ccc:	1b 1f       	adc	r17, r27
    3cce:	29 85       	ldd	r18, Y+9	; 0x09
    3cd0:	3a 85       	ldd	r19, Y+10	; 0x0a
    3cd2:	4b 85       	ldd	r20, Y+11	; 0x0b
    3cd4:	5c 85       	ldd	r21, Y+12	; 0x0c
    3cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cda:	af 81       	ldd	r26, Y+7	; 0x07
    3cdc:	b8 85       	ldd	r27, Y+8	; 0x08
    3cde:	28 1b       	sub	r18, r24
    3ce0:	39 0b       	sbc	r19, r25
    3ce2:	4a 0b       	sbc	r20, r26
    3ce4:	5b 0b       	sbc	r21, r27
    3ce6:	c8 01       	movw	r24, r16
    3ce8:	b7 01       	movw	r22, r14
    3cea:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__divmodsi4>
    3cee:	da 01       	movw	r26, r20
    3cf0:	c9 01       	movw	r24, r18
}
    3cf2:	bc 01       	movw	r22, r24
    3cf4:	cd 01       	movw	r24, r26
    3cf6:	60 96       	adiw	r28, 0x10	; 16
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	cf 91       	pop	r28
    3d04:	df 91       	pop	r29
    3d06:	1f 91       	pop	r17
    3d08:	0f 91       	pop	r16
    3d0a:	ff 90       	pop	r15
    3d0c:	ef 90       	pop	r14
    3d0e:	df 90       	pop	r13
    3d10:	cf 90       	pop	r12
    3d12:	bf 90       	pop	r11
    3d14:	af 90       	pop	r10
    3d16:	08 95       	ret

00003d18 <__mulsi3>:
    3d18:	62 9f       	mul	r22, r18
    3d1a:	d0 01       	movw	r26, r0
    3d1c:	73 9f       	mul	r23, r19
    3d1e:	f0 01       	movw	r30, r0
    3d20:	82 9f       	mul	r24, r18
    3d22:	e0 0d       	add	r30, r0
    3d24:	f1 1d       	adc	r31, r1
    3d26:	64 9f       	mul	r22, r20
    3d28:	e0 0d       	add	r30, r0
    3d2a:	f1 1d       	adc	r31, r1
    3d2c:	92 9f       	mul	r25, r18
    3d2e:	f0 0d       	add	r31, r0
    3d30:	83 9f       	mul	r24, r19
    3d32:	f0 0d       	add	r31, r0
    3d34:	74 9f       	mul	r23, r20
    3d36:	f0 0d       	add	r31, r0
    3d38:	65 9f       	mul	r22, r21
    3d3a:	f0 0d       	add	r31, r0
    3d3c:	99 27       	eor	r25, r25
    3d3e:	72 9f       	mul	r23, r18
    3d40:	b0 0d       	add	r27, r0
    3d42:	e1 1d       	adc	r30, r1
    3d44:	f9 1f       	adc	r31, r25
    3d46:	63 9f       	mul	r22, r19
    3d48:	b0 0d       	add	r27, r0
    3d4a:	e1 1d       	adc	r30, r1
    3d4c:	f9 1f       	adc	r31, r25
    3d4e:	bd 01       	movw	r22, r26
    3d50:	cf 01       	movw	r24, r30
    3d52:	11 24       	eor	r1, r1
    3d54:	08 95       	ret

00003d56 <__udivmodhi4>:
    3d56:	aa 1b       	sub	r26, r26
    3d58:	bb 1b       	sub	r27, r27
    3d5a:	51 e1       	ldi	r21, 0x11	; 17
    3d5c:	07 c0       	rjmp	.+14     	; 0x3d6c <__udivmodhi4_ep>

00003d5e <__udivmodhi4_loop>:
    3d5e:	aa 1f       	adc	r26, r26
    3d60:	bb 1f       	adc	r27, r27
    3d62:	a6 17       	cp	r26, r22
    3d64:	b7 07       	cpc	r27, r23
    3d66:	10 f0       	brcs	.+4      	; 0x3d6c <__udivmodhi4_ep>
    3d68:	a6 1b       	sub	r26, r22
    3d6a:	b7 0b       	sbc	r27, r23

00003d6c <__udivmodhi4_ep>:
    3d6c:	88 1f       	adc	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	5a 95       	dec	r21
    3d72:	a9 f7       	brne	.-22     	; 0x3d5e <__udivmodhi4_loop>
    3d74:	80 95       	com	r24
    3d76:	90 95       	com	r25
    3d78:	bc 01       	movw	r22, r24
    3d7a:	cd 01       	movw	r24, r26
    3d7c:	08 95       	ret

00003d7e <__divmodsi4>:
    3d7e:	97 fb       	bst	r25, 7
    3d80:	09 2e       	mov	r0, r25
    3d82:	05 26       	eor	r0, r21
    3d84:	0e d0       	rcall	.+28     	; 0x3da2 <__divmodsi4_neg1>
    3d86:	57 fd       	sbrc	r21, 7
    3d88:	04 d0       	rcall	.+8      	; 0x3d92 <__divmodsi4_neg2>
    3d8a:	14 d0       	rcall	.+40     	; 0x3db4 <__udivmodsi4>
    3d8c:	0a d0       	rcall	.+20     	; 0x3da2 <__divmodsi4_neg1>
    3d8e:	00 1c       	adc	r0, r0
    3d90:	38 f4       	brcc	.+14     	; 0x3da0 <__divmodsi4_exit>

00003d92 <__divmodsi4_neg2>:
    3d92:	50 95       	com	r21
    3d94:	40 95       	com	r20
    3d96:	30 95       	com	r19
    3d98:	21 95       	neg	r18
    3d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9c:	4f 4f       	sbci	r20, 0xFF	; 255
    3d9e:	5f 4f       	sbci	r21, 0xFF	; 255

00003da0 <__divmodsi4_exit>:
    3da0:	08 95       	ret

00003da2 <__divmodsi4_neg1>:
    3da2:	f6 f7       	brtc	.-4      	; 0x3da0 <__divmodsi4_exit>
    3da4:	90 95       	com	r25
    3da6:	80 95       	com	r24
    3da8:	70 95       	com	r23
    3daa:	61 95       	neg	r22
    3dac:	7f 4f       	sbci	r23, 0xFF	; 255
    3dae:	8f 4f       	sbci	r24, 0xFF	; 255
    3db0:	9f 4f       	sbci	r25, 0xFF	; 255
    3db2:	08 95       	ret

00003db4 <__udivmodsi4>:
    3db4:	a1 e2       	ldi	r26, 0x21	; 33
    3db6:	1a 2e       	mov	r1, r26
    3db8:	aa 1b       	sub	r26, r26
    3dba:	bb 1b       	sub	r27, r27
    3dbc:	fd 01       	movw	r30, r26
    3dbe:	0d c0       	rjmp	.+26     	; 0x3dda <__udivmodsi4_ep>

00003dc0 <__udivmodsi4_loop>:
    3dc0:	aa 1f       	adc	r26, r26
    3dc2:	bb 1f       	adc	r27, r27
    3dc4:	ee 1f       	adc	r30, r30
    3dc6:	ff 1f       	adc	r31, r31
    3dc8:	a2 17       	cp	r26, r18
    3dca:	b3 07       	cpc	r27, r19
    3dcc:	e4 07       	cpc	r30, r20
    3dce:	f5 07       	cpc	r31, r21
    3dd0:	20 f0       	brcs	.+8      	; 0x3dda <__udivmodsi4_ep>
    3dd2:	a2 1b       	sub	r26, r18
    3dd4:	b3 0b       	sbc	r27, r19
    3dd6:	e4 0b       	sbc	r30, r20
    3dd8:	f5 0b       	sbc	r31, r21

00003dda <__udivmodsi4_ep>:
    3dda:	66 1f       	adc	r22, r22
    3ddc:	77 1f       	adc	r23, r23
    3dde:	88 1f       	adc	r24, r24
    3de0:	99 1f       	adc	r25, r25
    3de2:	1a 94       	dec	r1
    3de4:	69 f7       	brne	.-38     	; 0x3dc0 <__udivmodsi4_loop>
    3de6:	60 95       	com	r22
    3de8:	70 95       	com	r23
    3dea:	80 95       	com	r24
    3dec:	90 95       	com	r25
    3dee:	9b 01       	movw	r18, r22
    3df0:	ac 01       	movw	r20, r24
    3df2:	bd 01       	movw	r22, r26
    3df4:	cf 01       	movw	r24, r30
    3df6:	08 95       	ret

00003df8 <__prologue_saves__>:
    3df8:	2f 92       	push	r2
    3dfa:	3f 92       	push	r3
    3dfc:	4f 92       	push	r4
    3dfe:	5f 92       	push	r5
    3e00:	6f 92       	push	r6
    3e02:	7f 92       	push	r7
    3e04:	8f 92       	push	r8
    3e06:	9f 92       	push	r9
    3e08:	af 92       	push	r10
    3e0a:	bf 92       	push	r11
    3e0c:	cf 92       	push	r12
    3e0e:	df 92       	push	r13
    3e10:	ef 92       	push	r14
    3e12:	ff 92       	push	r15
    3e14:	0f 93       	push	r16
    3e16:	1f 93       	push	r17
    3e18:	cf 93       	push	r28
    3e1a:	df 93       	push	r29
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
    3e20:	ca 1b       	sub	r28, r26
    3e22:	db 0b       	sbc	r29, r27
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	09 94       	ijmp

00003e30 <__epilogue_restores__>:
    3e30:	2a 88       	ldd	r2, Y+18	; 0x12
    3e32:	39 88       	ldd	r3, Y+17	; 0x11
    3e34:	48 88       	ldd	r4, Y+16	; 0x10
    3e36:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e38:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e40:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e42:	b9 84       	ldd	r11, Y+9	; 0x09
    3e44:	c8 84       	ldd	r12, Y+8	; 0x08
    3e46:	df 80       	ldd	r13, Y+7	; 0x07
    3e48:	ee 80       	ldd	r14, Y+6	; 0x06
    3e4a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e4c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e4e:	1b 81       	ldd	r17, Y+3	; 0x03
    3e50:	aa 81       	ldd	r26, Y+2	; 0x02
    3e52:	b9 81       	ldd	r27, Y+1	; 0x01
    3e54:	ce 0f       	add	r28, r30
    3e56:	d1 1d       	adc	r29, r1
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	f8 94       	cli
    3e5c:	de bf       	out	0x3e, r29	; 62
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	cd bf       	out	0x3d, r28	; 61
    3e62:	ed 01       	movw	r28, r26
    3e64:	08 95       	ret

00003e66 <memset>:
    3e66:	dc 01       	movw	r26, r24
    3e68:	01 c0       	rjmp	.+2      	; 0x3e6c <memset+0x6>
    3e6a:	6d 93       	st	X+, r22
    3e6c:	41 50       	subi	r20, 0x01	; 1
    3e6e:	50 40       	sbci	r21, 0x00	; 0
    3e70:	e0 f7       	brcc	.-8      	; 0x3e6a <memset+0x4>
    3e72:	08 95       	ret

00003e74 <_exit>:
    3e74:	f8 94       	cli

00003e76 <__stop_program>:
    3e76:	ff cf       	rjmp	.-2      	; 0x3e76 <__stop_program>
